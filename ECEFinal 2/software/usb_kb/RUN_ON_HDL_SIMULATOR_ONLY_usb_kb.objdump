
RUN_ON_HDL_SIMULATOR_ONLY_usb_kb.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00005300 memsz 0x00005300 flags r-x
    LOAD off    0x00006320 vaddr 0x08005320 paddr 0x08005640 align 2**12
         filesz 0x00000320 memsz 0x00000320 flags rw-
    LOAD off    0x00006960 vaddr 0x08005960 paddr 0x08005960 align 2**12
         filesz 0x00000000 memsz 0x000002a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004e84  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000026c  080050b4  080050b4  000060b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000320  08005320  08005640  00006320  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002a8  08005960  08005960  00006960  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00006640  2**0
                  CONTENTS
  7 .SDRAM        00000000  08005c08  08005c08  00006640  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00006640  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000768  00000000  00000000  00006668  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000ad5c  00000000  00000000  00006dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000038b3  00000000  00000000  00011b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003e14  00000000  00000000  000153df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001378  00000000  00000000  000191f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027bc  00000000  00000000  0001a56c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001721  00000000  00000000  0001cd28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f0  00000000  00000000  0001e450  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00020a42  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00020a45  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00020a51  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00020a52  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00020a53  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00020a5b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00020a6a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00020a75  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001f  00000000  00000000  00020a89  2**0
                  CONTENTS, READONLY
 29 .jdi          00005017  00000000  00000000  00020aa8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00089c5e  00000000  00000000  00025abf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
080050b4 l    d  .rodata	00000000 .rodata
08005320 l    d  .rwdata	00000000 .rwdata
08005960 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08005c08 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
08000248 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
08005604 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
08005970 l     O .bss	00000004 usb_delay.2608
08005974 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08002df8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
08005350 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
08003568 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
080038a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080039e0 l     F .text	00000034 alt_dev_reg
08005430 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08003ed8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
08003ff0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08004124 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08004150 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080045b0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08004710 l     F .text	0000003c alt_get_errno
0800474c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08005994 g     O .bss	00000004 alt_instruction_exception_handler
08002d2c g     F .text	0000001c putchar
08003654 g     F .text	0000007c alt_main
08005608 g     O .rwdata	00000008 ctrl_xfers
08002d48 g     F .text	00000080 _puts_r
08005b08 g     O .bss	00000100 alt_irq
08002274 g     F .text	00000644 USB_Task
08005640 g       *ABS*	00000000 __flash_rwdata_start
08002cd8 g     F .text	0000004c printf
08001390 g     F .text	00000088 kbdPoll
0800024c g     F .text	000001f0 GetDriverandReport
080014e4 g     F .text	00000088 MAXreg_wr
08005320 g     O .rwdata	00000030 ClientDriverTable
08004a18 g     F .text	00000024 altera_nios2_gen2_irq_init
080028b8 g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
08001d74 g     F .text	000000e8 XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
08005998 g     O .bss	00000010 hid_ep
08005978 g     O .bss	00000004 errno
08005980 g     O .bss	00000004 alt_argv
0800d604 g       *ABS*	00000000 _gp
08003874 g     F .text	00000030 usleep
080016d8 g     F .text	0000007c MAXreg_rd
08005484 g     O .rwdata	00000180 alt_fd_list
080012c8 g     F .text	00000040 HID_init
08002d24 g     F .text	00000008 _putchar_r
08004a3c g     F .text	00000090 alt_find_dev
08004694 g     F .text	0000007c alt_io_redirect
080050b4 g       *ABS*	00000000 __DTOR_END__
08002dc8 g     F .text	00000014 puts
08004c98 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08003b5c g     F .text	000000ec altera_avalon_jtag_uart_read
08002c9c g     F .text	0000003c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08002bb8 g     F .text	00000064 .hidden __udivsi3
08005610 g     O .rwdata	00000001 usb_task_state
08001a30 g     F .text	00000094 MAX3421E_init
08000718 g     F .text	00000034 setKeycode
08005634 g     O .rwdata	00000004 alt_max_fd
08005614 g     O .rwdata	00000004 _global_impure_ptr
08005c08 g       *ABS*	00000000 __bss_end
080044c0 g     F .text	000000f0 alt_iic_isr_register
0800376c g     F .text	00000108 alt_tick
08004474 g     F .text	0000004c alt_ic_irq_enabled
080036d0 g     F .text	0000009c alt_alarm_stop
08005990 g     O .bss	00000004 alt_irq_active
08002980 g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000d4 alt_irq_handler
0800545c g     O .rwdata	00000028 alt_dev_null
08001308 g     F .text	00000088 mousePoll
08001884 g     F .text	00000024 Vbus_power
08004104 g     F .text	00000020 alt_dcache_flush_all
08005640 g       *ABS*	00000000 __ram_rwdata_end
0800562c g     O .rwdata	00000008 alt_dev_list
080038e0 g     F .text	00000100 write
080034b8 g     F .text	00000058 _putc_r
08005320 g       *ABS*	00000000 __ram_rodata_end
08005975 g     O .bss	00000001 usb_error
08000000 g       *ABS*	00000000 __alt_mem_SDRAM
08002c1c g     F .text	00000058 .hidden __umodsi3
08005c08 g       *ABS*	00000000 end
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08001ed0 g     F .text	0000017c XferDispatchPkt
080050b4 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08003f50 g     F .text	0000007c alt_avalon_timer_sc_init
08003c48 g     F .text	00000094 altera_avalon_jtag_uart_write
08002e64 g     F .text	0000052c ___vfprintf_internal_r
08001bf4 g     F .text	00000034 MaxGpxHandler
08004ef0 g     F .text	00000190 __call_exitprocs
08000230 g     F .text	0000001c _start
08005988 g     O .bss	00000004 _alt_tick_rate
08001754 g     F .text	00000090 MAXbytes_rd
08003cdc g     F .text	000001fc alt_avalon_spi_command
0800598c g     O .bss	00000004 _alt_nticks
08003a4c g     F .text	00000050 alt_sys_init
08005ac0 g     O .bss	00000048 devtable
08004d98 g     F .text	00000158 __register_exitproc
08000ec0 g     F .text	00000408 HIDKProbe
080059a8 g     O .bss	00000018 msd_ep
080021dc g     F .text	00000098 USB_init
08002c74 g     F .text	00000028 .hidden __mulsi3
080059c0 g     O .bss	00000100 bigbuf
08005320 g       *ABS*	00000000 __ram_rwdata_start
080050b4 g       *ABS*	00000000 __ram_rodata_start
0800596c g     O .bss	00000001 last_usb_task_state
08005964 g     O .bss	00000008 dev0ep
08000480 g     F .text	00000048 clearLED
08003a9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08004bd4 g     F .text	000000c4 alt_get_fd
08003fcc g     F .text	00000024 alt_busy_sleep
080028e4 g     F .text	00000038 MSDEventHandler
08004d68 g     F .text	00000030 memcmp
08005c08 g       *ABS*	00000000 __alt_stack_base
08002948 g     F .text	00000038 CDCEventHandler
080029ac g     F .text	00000038 DummyEventHandler
08004acc g     F .text	00000108 alt_find_file
0800418c g     F .text	000000a4 alt_dev_llist_insert
080033ac g     F .text	000000b8 __sfvwrite_small_dev
08005960 g       *ABS*	00000000 __bss_start
080018a8 g     F .text	00000188 MAX_busprobe
08005960 g     O .bss	00000002 hid_device
0800074c g     F .text	0000036c main
08001ac4 g     F .text	00000064 MAX3421E_Task
08005984 g     O .bss	00000004 alt_envp
08003afc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08002a3c g     F .text	00000084 ConvUTF8ToStr
08005638 g     O .rwdata	00000004 alt_errno
08003464 g     F .text	00000054 putc
08002ac0 g     F .text	00000084 .hidden __divsi3
0800204c g     F .text	00000190 XferInTransfer
080005e0 g     F .text	00000138 printSignedHex1
080050b4 g       *ABS*	00000000 __CTOR_END__
08002a04 g     F .text	00000038 GetDevtable
080050b4 g       *ABS*	00000000 __flash_rodata_start
080050b4 g       *ABS*	00000000 __DTOR_LIST__
08001e5c g     F .text	00000074 XferCtrlND
080017e4 g     F .text	000000a0 MAX3421E_reset
08003a14 g     F .text	00000038 alt_irq_init
08004994 g     F .text	00000084 alt_release_fd
08004d34 g     F .text	00000014 atexit
08003510 g     F .text	00000058 _write_r
08005618 g     O .rwdata	00000004 _impure_ptr
0800597c g     O .bss	00000004 alt_argc
08004290 g     F .text	00000060 _do_dtors
0800156c g     F .text	0000016c MAXbytes_wr
08000020 g       .exceptions	00000000 alt_irq_entry
08005624 g     O .rwdata	00000008 alt_fs_list
0800291c g     F .text	0000002c CDCProbe
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800043c g     F .text	00000044 setLED
080029e4 g     F .text	00000020 GetUsbTaskState
08004310 g     F .text	00000050 alt_ic_isr_register
080050f0 g     O .rodata	00000010 devclasses
08005640 g       *ABS*	00000000 _edata
08001450 g     F .text	00000038 HIDKEventHandler
08005c08 g       *ABS*	00000000 _end
08001b28 g     F .text	000000cc MaxIntHandler
08000230 g       *ABS*	00000000 __ram_exceptions_end
08001488 g     F .text	00000034 SPI_init
080043e8 g     F .text	0000008c alt_ic_irq_disable
08004d48 g     F .text	00000020 exit
08002b44 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08001418 g     F .text	00000038 HIDMEventHandler
08005080 g     F .text	00000034 _exit
080004c8 g     F .text	00000118 printSignedHex0
08002ddc g     F .text	0000001c strlen
08004838 g     F .text	0000015c open
080042f0 g     F .text	00000020 alt_icache_flush_all
0800563c g     O .rwdata	00000004 alt_priority_mask
08004360 g     F .text	00000088 alt_ic_irq_enable
08003390 g     F .text	0000001c __vfprintf_internal
08000ab8 g     F .text	00000408 HIDMProbe
080014bc g     F .text	00000028 SPI_wr
0800561c g     O .rwdata	00000008 alt_alarm_list
08004230 g     F .text	00000060 _do_ctors
0800402c g     F .text	000000d8 close
080035d0 g     F .text	00000084 alt_load
08001c28 g     F .text	0000014c XferCtrlReq



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820034 	movhi	r2,2048
 8000140:	1096c204 	addi	r2,r2,23304
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820034 	movhi	r2,2048
 8000158:	1096c204 	addi	r2,r2,23304
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a0e417 	ldw	r2,-31856(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a0e417 	ldw	r2,-31856(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 800023c:	d6b58114 	ori	gp,gp,54788
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000240:	80035d00 	call	80035d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000244:	80036540 	call	8003654 <alt_main>

08000248 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000248:	003fff06 	br	8000248 <__alt_data_end+0xfc000248>

0800024c <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
 800024c:	defff604 	addi	sp,sp,-40
 8000250:	dfc00915 	stw	ra,36(sp)
 8000254:	df000815 	stw	fp,32(sp)
 8000258:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 800025c:	00bfffc4 	movi	r2,-1
 8000260:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 8000264:	01020034 	movhi	r4,2048
 8000268:	21144004 	addi	r4,r4,20736
 800026c:	8002dc80 	call	8002dc8 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8000270:	00800044 	movi	r2,1
 8000274:	e0bffd05 	stb	r2,-12(fp)
 8000278:	00001f06 	br	80002f8 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 800027c:	e0bffd03 	ldbu	r2,-12(fp)
 8000280:	1009883a 	mov	r4,r2
 8000284:	8002a040 	call	8002a04 <GetDevtable>
 8000288:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 800028c:	e0bffe17 	ldw	r2,-8(fp)
 8000290:	10800017 	ldw	r2,0(r2)
 8000294:	10001526 	beq	r2,zero,80002ec <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 8000298:	e0bffd03 	ldbu	r2,-12(fp)
 800029c:	100b883a 	mov	r5,r2
 80002a0:	01020034 	movhi	r4,2048
 80002a4:	21144904 	addi	r4,r4,20772
 80002a8:	8002cd80 	call	8002cd8 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 80002ac:	e0bffe17 	ldw	r2,-8(fp)
 80002b0:	10800103 	ldbu	r2,4(r2)
 80002b4:	10c03fcc 	andi	r3,r2,255
 80002b8:	00820034 	movhi	r2,2048
 80002bc:	10943c04 	addi	r2,r2,20720
 80002c0:	18c7883a 	add	r3,r3,r3
 80002c4:	18c7883a 	add	r3,r3,r3
 80002c8:	10c5883a 	add	r2,r2,r3
 80002cc:	10800017 	ldw	r2,0(r2)
 80002d0:	100b883a 	mov	r5,r2
 80002d4:	01020034 	movhi	r4,2048
 80002d8:	21144c04 	addi	r4,r4,20784
 80002dc:	8002cd80 	call	8002cd8 <printf>
			device = tpl_ptr->devclass;
 80002e0:	e0bffe17 	ldw	r2,-8(fp)
 80002e4:	10800103 	ldbu	r2,4(r2)
 80002e8:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 80002ec:	e0bffd03 	ldbu	r2,-12(fp)
 80002f0:	10800044 	addi	r2,r2,1
 80002f4:	e0bffd05 	stb	r2,-12(fp)
 80002f8:	e0bffd03 	ldbu	r2,-12(fp)
 80002fc:	10800230 	cmpltui	r2,r2,8
 8000300:	103fde1e 	bne	r2,zero,800027c <__alt_data_end+0xfc00027c>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8000304:	d0a00003 	ldbu	r2,-32768(gp)
 8000308:	11003fcc 	andi	r4,r2,255
 800030c:	d0a0d743 	ldbu	r2,-31907(gp)
 8000310:	10803fcc 	andi	r2,r2,255
 8000314:	e0ffff44 	addi	r3,fp,-3
 8000318:	d8c00415 	stw	r3,16(sp)
 800031c:	00c00044 	movi	r3,1
 8000320:	d8c00315 	stw	r3,12(sp)
 8000324:	d8800215 	stw	r2,8(sp)
 8000328:	d8000115 	stw	zero,4(sp)
 800032c:	d8000015 	stw	zero,0(sp)
 8000330:	01c00084 	movi	r7,2
 8000334:	01802844 	movi	r6,161
 8000338:	000b883a 	mov	r5,zero
 800033c:	8001c280 	call	8001c28 <XferCtrlReq>
 8000340:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 8000344:	e0bfff03 	ldbu	r2,-4(fp)
 8000348:	10000926 	beq	r2,zero,8000370 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 800034c:	01020034 	movhi	r4,2048
 8000350:	21144e04 	addi	r4,r4,20792
 8000354:	8002cd80 	call	8002cd8 <printf>
		printf("%x \n", rcode);
 8000358:	e0bfff03 	ldbu	r2,-4(fp)
 800035c:	100b883a 	mov	r5,r2
 8000360:	01020034 	movhi	r4,2048
 8000364:	21145504 	addi	r4,r4,20820
 8000368:	8002cd80 	call	8002cd8 <printf>
 800036c:	00000906 	br	8000394 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 8000370:	01020034 	movhi	r4,2048
 8000374:	21145704 	addi	r4,r4,20828
 8000378:	8002cd80 	call	8002cd8 <printf>
		printf("%x \n", tmpbyte);
 800037c:	e0bfff43 	ldbu	r2,-3(fp)
 8000380:	10803fcc 	andi	r2,r2,255
 8000384:	100b883a 	mov	r5,r2
 8000388:	01020034 	movhi	r4,2048
 800038c:	21145504 	addi	r4,r4,20820
 8000390:	8002cd80 	call	8002cd8 <printf>
	}
	printf("Protocol: ");
 8000394:	01020034 	movhi	r4,2048
 8000398:	21145b04 	addi	r4,r4,20844
 800039c:	8002cd80 	call	8002cd8 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 80003a0:	d0a00003 	ldbu	r2,-32768(gp)
 80003a4:	11003fcc 	andi	r4,r2,255
 80003a8:	d0a0d743 	ldbu	r2,-31907(gp)
 80003ac:	10803fcc 	andi	r2,r2,255
 80003b0:	e0ffff44 	addi	r3,fp,-3
 80003b4:	d8c00415 	stw	r3,16(sp)
 80003b8:	00c00044 	movi	r3,1
 80003bc:	d8c00315 	stw	r3,12(sp)
 80003c0:	d8800215 	stw	r2,8(sp)
 80003c4:	d8000115 	stw	zero,4(sp)
 80003c8:	d8000015 	stw	zero,0(sp)
 80003cc:	01c000c4 	movi	r7,3
 80003d0:	01802844 	movi	r6,161
 80003d4:	000b883a 	mov	r5,zero
 80003d8:	8001c280 	call	8001c28 <XferCtrlReq>
 80003dc:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 80003e0:	e0bfff03 	ldbu	r2,-4(fp)
 80003e4:	10000926 	beq	r2,zero,800040c <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 80003e8:	01020034 	movhi	r4,2048
 80003ec:	21145e04 	addi	r4,r4,20856
 80003f0:	8002cd80 	call	8002cd8 <printf>
		printf("%x \n", rcode);
 80003f4:	e0bfff03 	ldbu	r2,-4(fp)
 80003f8:	100b883a 	mov	r5,r2
 80003fc:	01020034 	movhi	r4,2048
 8000400:	21145504 	addi	r4,r4,20820
 8000404:	8002cd80 	call	8002cd8 <printf>
 8000408:	00000606 	br	8000424 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 800040c:	e0bfff43 	ldbu	r2,-3(fp)
 8000410:	10803fcc 	andi	r2,r2,255
 8000414:	100b883a 	mov	r5,r2
 8000418:	01020034 	movhi	r4,2048
 800041c:	21146504 	addi	r4,r4,20884
 8000420:	8002cd80 	call	8002cd8 <printf>
	}
	return device;
 8000424:	e0bffd43 	ldbu	r2,-11(fp)
}
 8000428:	e037883a 	mov	sp,fp
 800042c:	dfc00117 	ldw	ra,4(sp)
 8000430:	df000017 	ldw	fp,0(sp)
 8000434:	dec00204 	addi	sp,sp,8
 8000438:	f800283a 	ret

0800043c <setLED>:

void setLED(int LED) {
 800043c:	defffe04 	addi	sp,sp,-8
 8000440:	df000115 	stw	fp,4(sp)
 8000444:	df000104 	addi	fp,sp,4
 8000448:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 800044c:	00805c04 	movi	r2,368
 8000450:	10c00037 	ldwio	r3,0(r2)
 8000454:	01000044 	movi	r4,1
 8000458:	e0bfff17 	ldw	r2,-4(fp)
 800045c:	2084983a 	sll	r2,r4,r2
 8000460:	1886b03a 	or	r3,r3,r2
 8000464:	00805c04 	movi	r2,368
 8000468:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 800046c:	0001883a 	nop
 8000470:	e037883a 	mov	sp,fp
 8000474:	df000017 	ldw	fp,0(sp)
 8000478:	dec00104 	addi	sp,sp,4
 800047c:	f800283a 	ret

08000480 <clearLED>:

void clearLED(int LED) {
 8000480:	defffe04 	addi	sp,sp,-8
 8000484:	df000115 	stw	fp,4(sp)
 8000488:	df000104 	addi	fp,sp,4
 800048c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 8000490:	00805c04 	movi	r2,368
 8000494:	10c00037 	ldwio	r3,0(r2)
 8000498:	01000044 	movi	r4,1
 800049c:	e0bfff17 	ldw	r2,-4(fp)
 80004a0:	2084983a 	sll	r2,r4,r2
 80004a4:	0084303a 	nor	r2,zero,r2
 80004a8:	1886703a 	and	r3,r3,r2
 80004ac:	00805c04 	movi	r2,368
 80004b0:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 80004b4:	0001883a 	nop
 80004b8:	e037883a 	mov	sp,fp
 80004bc:	df000017 	ldw	fp,0(sp)
 80004c0:	dec00104 	addi	sp,sp,4
 80004c4:	f800283a 	ret

080004c8 <printSignedHex0>:

void printSignedHex0(signed char value) {
 80004c8:	defffc04 	addi	sp,sp,-16
 80004cc:	dfc00315 	stw	ra,12(sp)
 80004d0:	df000215 	stw	fp,8(sp)
 80004d4:	df000204 	addi	fp,sp,8
 80004d8:	2005883a 	mov	r2,r4
 80004dc:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 80004e0:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 80004e4:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 80004e8:	00806004 	movi	r2,384
 80004ec:	10800037 	ldwio	r2,0(r2)
 80004f0:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 80004f4:	e0bfff07 	ldb	r2,-4(fp)
 80004f8:	1000060e 	bge	r2,zero,8000514 <printSignedHex0+0x4c>
		setLED(11);
 80004fc:	010002c4 	movi	r4,11
 8000500:	800043c0 	call	800043c <setLED>
		value = -value;
 8000504:	e0bfff03 	ldbu	r2,-4(fp)
 8000508:	0085c83a 	sub	r2,zero,r2
 800050c:	e0bfff05 	stb	r2,-4(fp)
 8000510:	00000206 	br	800051c <printSignedHex0+0x54>
	} else {
		clearLED(11);
 8000514:	010002c4 	movi	r4,11
 8000518:	80004800 	call	8000480 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 800051c:	e0bfff03 	ldbu	r2,-4(fp)
 8000520:	108018c4 	addi	r2,r2,99
 8000524:	10803fcc 	andi	r2,r2,255
 8000528:	108031f0 	cmpltui	r2,r2,199
 800052c:	1000031e 	bne	r2,zero,800053c <printSignedHex0+0x74>
		setLED(13);
 8000530:	01000344 	movi	r4,13
 8000534:	800043c0 	call	800043c <setLED>
 8000538:	00000206 	br	8000544 <printSignedHex0+0x7c>
	else
		clearLED(13);
 800053c:	01000344 	movi	r4,13
 8000540:	80004800 	call	8000480 <clearLED>

	value = value % 100;
 8000544:	e0bfff07 	ldb	r2,-4(fp)
 8000548:	01401904 	movi	r5,100
 800054c:	1009883a 	mov	r4,r2
 8000550:	8002b440 	call	8002b44 <__modsi3>
 8000554:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 8000558:	e0bfff07 	ldb	r2,-4(fp)
 800055c:	01400284 	movi	r5,10
 8000560:	1009883a 	mov	r4,r2
 8000564:	8002ac00 	call	8002ac0 <__divsi3>
 8000568:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 800056c:	e0bfff07 	ldb	r2,-4(fp)
 8000570:	01400284 	movi	r5,10
 8000574:	1009883a 	mov	r4,r2
 8000578:	8002b440 	call	8002b44 <__modsi3>
 800057c:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 8000580:	e0bffe8b 	ldhu	r2,-6(fp)
 8000584:	10803fcc 	andi	r2,r2,255
 8000588:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 800058c:	e0bffe03 	ldbu	r2,-8(fp)
 8000590:	1004933a 	slli	r2,r2,12
 8000594:	1007883a 	mov	r3,r2
 8000598:	e0bffe8b 	ldhu	r2,-6(fp)
 800059c:	1884b03a 	or	r2,r3,r2
 80005a0:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 80005a4:	e0bffe43 	ldbu	r2,-7(fp)
 80005a8:	1004923a 	slli	r2,r2,8
 80005ac:	1007883a 	mov	r3,r2
 80005b0:	e0bffe8b 	ldhu	r2,-6(fp)
 80005b4:	1884b03a 	or	r2,r3,r2
 80005b8:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 80005bc:	e0fffe8b 	ldhu	r3,-6(fp)
 80005c0:	00806004 	movi	r2,384
 80005c4:	10c00035 	stwio	r3,0(r2)
}
 80005c8:	0001883a 	nop
 80005cc:	e037883a 	mov	sp,fp
 80005d0:	dfc00117 	ldw	ra,4(sp)
 80005d4:	df000017 	ldw	fp,0(sp)
 80005d8:	dec00204 	addi	sp,sp,8
 80005dc:	f800283a 	ret

080005e0 <printSignedHex1>:

void printSignedHex1(signed char value) {
 80005e0:	defffb04 	addi	sp,sp,-20
 80005e4:	dfc00415 	stw	ra,16(sp)
 80005e8:	df000315 	stw	fp,12(sp)
 80005ec:	df000304 	addi	fp,sp,12
 80005f0:	2005883a 	mov	r2,r4
 80005f4:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 80005f8:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 80005fc:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8000600:	00806004 	movi	r2,384
 8000604:	10800037 	ldwio	r2,0(r2)
 8000608:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 800060c:	e0bfff07 	ldb	r2,-4(fp)
 8000610:	1000060e 	bge	r2,zero,800062c <printSignedHex1+0x4c>
		setLED(10);
 8000614:	01000284 	movi	r4,10
 8000618:	800043c0 	call	800043c <setLED>
		value = -value;
 800061c:	e0bfff03 	ldbu	r2,-4(fp)
 8000620:	0085c83a 	sub	r2,zero,r2
 8000624:	e0bfff05 	stb	r2,-4(fp)
 8000628:	00000206 	br	8000634 <printSignedHex1+0x54>
	} else {
		clearLED(10);
 800062c:	01000284 	movi	r4,10
 8000630:	80004800 	call	8000480 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8000634:	e0bfff03 	ldbu	r2,-4(fp)
 8000638:	108018c4 	addi	r2,r2,99
 800063c:	10803fcc 	andi	r2,r2,255
 8000640:	108031f0 	cmpltui	r2,r2,199
 8000644:	1000031e 	bne	r2,zero,8000654 <printSignedHex1+0x74>
		setLED(12);
 8000648:	01000304 	movi	r4,12
 800064c:	800043c0 	call	800043c <setLED>
 8000650:	00000206 	br	800065c <printSignedHex1+0x7c>
	else
		clearLED(12);
 8000654:	01000304 	movi	r4,12
 8000658:	80004800 	call	8000480 <clearLED>

	value = value % 100;
 800065c:	e0bfff07 	ldb	r2,-4(fp)
 8000660:	01401904 	movi	r5,100
 8000664:	1009883a 	mov	r4,r2
 8000668:	8002b440 	call	8002b44 <__modsi3>
 800066c:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 8000670:	e0bfff07 	ldb	r2,-4(fp)
 8000674:	01400284 	movi	r5,10
 8000678:	1009883a 	mov	r4,r2
 800067c:	8002ac00 	call	8002ac0 <__divsi3>
 8000680:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 8000684:	e0bfff07 	ldb	r2,-4(fp)
 8000688:	01400284 	movi	r5,10
 800068c:	1009883a 	mov	r4,r2
 8000690:	8002b440 	call	8002b44 <__modsi3>
 8000694:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 8000698:	e0bfff07 	ldb	r2,-4(fp)
 800069c:	01400284 	movi	r5,10
 80006a0:	1009883a 	mov	r4,r2
 80006a4:	8002ac00 	call	8002ac0 <__divsi3>
 80006a8:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 80006ac:	e0bfff07 	ldb	r2,-4(fp)
 80006b0:	01400284 	movi	r5,10
 80006b4:	1009883a 	mov	r4,r2
 80006b8:	8002b440 	call	8002b44 <__modsi3>
 80006bc:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 80006c0:	e0bffe17 	ldw	r2,-8(fp)
 80006c4:	10bfc00c 	andi	r2,r2,65280
 80006c8:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 80006cc:	e0bffd03 	ldbu	r2,-12(fp)
 80006d0:	1004913a 	slli	r2,r2,4
 80006d4:	1007883a 	mov	r3,r2
 80006d8:	e0bffe17 	ldw	r2,-8(fp)
 80006dc:	10c4b03a 	or	r2,r2,r3
 80006e0:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 80006e4:	e0bffd43 	ldbu	r2,-11(fp)
 80006e8:	e0fffe17 	ldw	r3,-8(fp)
 80006ec:	1884b03a 	or	r2,r3,r2
 80006f0:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 80006f4:	e0fffe17 	ldw	r3,-8(fp)
 80006f8:	00806004 	movi	r2,384
 80006fc:	10c00035 	stwio	r3,0(r2)
}
 8000700:	0001883a 	nop
 8000704:	e037883a 	mov	sp,fp
 8000708:	dfc00117 	ldw	ra,4(sp)
 800070c:	df000017 	ldw	fp,0(sp)
 8000710:	dec00204 	addi	sp,sp,8
 8000714:	f800283a 	ret

08000718 <setKeycode>:

void setKeycode(WORD keycode)
{
 8000718:	defffe04 	addi	sp,sp,-8
 800071c:	df000115 	stw	fp,4(sp)
 8000720:	df000104 	addi	fp,sp,4
 8000724:	2005883a 	mov	r2,r4
 8000728:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(0x000001c0, keycode);
 800072c:	e0ffff0b 	ldhu	r3,-4(fp)
 8000730:	00807004 	movi	r2,448
 8000734:	10c00035 	stwio	r3,0(r2)
}
 8000738:	0001883a 	nop
 800073c:	e037883a 	mov	sp,fp
 8000740:	df000017 	ldw	fp,0(sp)
 8000744:	dec00104 	addi	sp,sp,4
 8000748:	f800283a 	ret

0800074c <main>:
int main() {
 800074c:	defff704 	addi	sp,sp,-36
 8000750:	dfc00815 	stw	ra,32(sp)
 8000754:	df000715 	stw	fp,28(sp)
 8000758:	df000704 	addi	fp,sp,28
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 800075c:	e03ff905 	stb	zero,-28(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 8000760:	e03ff945 	stb	zero,-27(fp)
	BYTE device;
	WORD keycode;

	printf("initializing MAX3421E...\n");
 8000764:	01020034 	movhi	r4,2048
 8000768:	21146704 	addi	r4,r4,20892
 800076c:	8002dc80 	call	8002dc8 <puts>
	MAX3421E_init();
 8000770:	8001a300 	call	8001a30 <MAX3421E_init>
	printf("initializing USB...\n");
 8000774:	01020034 	movhi	r4,2048
 8000778:	21146e04 	addi	r4,r4,20920
 800077c:	8002dc80 	call	8002dc8 <puts>
	USB_init();
 8000780:	80021dc0 	call	80021dc <USB_init>
	while (1) {
		printf(".");
 8000784:	01000b84 	movi	r4,46
 8000788:	8002d2c0 	call	8002d2c <putchar>
		MAX3421E_Task();
 800078c:	8001ac40 	call	8001ac4 <MAX3421E_Task>
		USB_Task();
 8000790:	80022740 	call	8002274 <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 8000794:	80029e40 	call	80029e4 <GetUsbTaskState>
 8000798:	10803fcc 	andi	r2,r2,255
 800079c:	10801018 	cmpnei	r2,r2,64
 80007a0:	1000a11e 	bne	r2,zero,8000a28 <main+0x2dc>
			if (!runningdebugflag) {
 80007a4:	e0bff903 	ldbu	r2,-28(fp)
 80007a8:	1000071e 	bne	r2,zero,80007c8 <main+0x7c>
				runningdebugflag = 1;
 80007ac:	00800044 	movi	r2,1
 80007b0:	e0bff905 	stb	r2,-28(fp)
				setLED(9);
 80007b4:	01000244 	movi	r4,9
 80007b8:	800043c0 	call	800043c <setLED>
				device = GetDriverandReport();
 80007bc:	800024c0 	call	800024c <GetDriverandReport>
 80007c0:	e0bff985 	stb	r2,-26(fp)
 80007c4:	003fef06 	br	8000784 <__alt_data_end+0xfc000784>
			} else if (device == 1) {
 80007c8:	e0bff983 	ldbu	r2,-26(fp)
 80007cc:	10800058 	cmpnei	r2,r2,1
 80007d0:	1000391e 	bne	r2,zero,80008b8 <main+0x16c>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 80007d4:	e0bffd44 	addi	r2,fp,-11
 80007d8:	1009883a 	mov	r4,r2
 80007dc:	80013900 	call	8001390 <kbdPoll>
 80007e0:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
 80007e4:	e0bffb03 	ldbu	r2,-20(fp)
 80007e8:	10800118 	cmpnei	r2,r2,4
 80007ec:	1000ae26 	beq	r2,zero,8000aa8 <main+0x35c>
					continue; //NAK means no new data
				} else if (rcode) {
 80007f0:	e0bffb03 	ldbu	r2,-20(fp)
 80007f4:	10000926 	beq	r2,zero,800081c <main+0xd0>
					printf("Rcode: ");
 80007f8:	01020034 	movhi	r4,2048
 80007fc:	21147304 	addi	r4,r4,20940
 8000800:	8002cd80 	call	8002cd8 <printf>
					printf("%x \n", rcode);
 8000804:	e0bffb03 	ldbu	r2,-20(fp)
 8000808:	100b883a 	mov	r5,r2
 800080c:	01020034 	movhi	r4,2048
 8000810:	21145504 	addi	r4,r4,20820
 8000814:	8002cd80 	call	8002cd8 <printf>
					continue;
 8000818:	0000a606 	br	8000ab4 <main+0x368>
				}
				printf("keycodes: ");
 800081c:	01020034 	movhi	r4,2048
 8000820:	21147504 	addi	r4,r4,20948
 8000824:	8002cd80 	call	8002cd8 <printf>
				for (int i = 0; i < 6; i++) {
 8000828:	e03ffa15 	stw	zero,-24(fp)
 800082c:	00000c06 	br	8000860 <main+0x114>
					printf("%x ", kbdbuf.keycode[i]);
 8000830:	e0fffdc4 	addi	r3,fp,-9
 8000834:	e0bffa17 	ldw	r2,-24(fp)
 8000838:	1885883a 	add	r2,r3,r2
 800083c:	10800003 	ldbu	r2,0(r2)
 8000840:	10803fcc 	andi	r2,r2,255
 8000844:	100b883a 	mov	r5,r2
 8000848:	01020034 	movhi	r4,2048
 800084c:	21147804 	addi	r4,r4,20960
 8000850:	8002cd80 	call	8002cd8 <printf>
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
 8000854:	e0bffa17 	ldw	r2,-24(fp)
 8000858:	10800044 	addi	r2,r2,1
 800085c:	e0bffa15 	stw	r2,-24(fp)
 8000860:	e0bffa17 	ldw	r2,-24(fp)
 8000864:	10800190 	cmplti	r2,r2,6
 8000868:	103ff11e 	bne	r2,zero,8000830 <__alt_data_end+0xfc000830>
					printf("%x ", kbdbuf.keycode[i]);
				}
				setKeycode(kbdbuf.keycode[0]);
 800086c:	e0bffdc3 	ldbu	r2,-9(fp)
 8000870:	10803fcc 	andi	r2,r2,255
 8000874:	1009883a 	mov	r4,r2
 8000878:	80007180 	call	8000718 <setKeycode>
				printSignedHex0(kbdbuf.keycode[0]);
 800087c:	e0bffdc3 	ldbu	r2,-9(fp)
 8000880:	10803fcc 	andi	r2,r2,255
 8000884:	1080201c 	xori	r2,r2,128
 8000888:	10bfe004 	addi	r2,r2,-128
 800088c:	1009883a 	mov	r4,r2
 8000890:	80004c80 	call	80004c8 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
 8000894:	e0bffe03 	ldbu	r2,-8(fp)
 8000898:	10803fcc 	andi	r2,r2,255
 800089c:	1080201c 	xori	r2,r2,128
 80008a0:	10bfe004 	addi	r2,r2,-128
 80008a4:	1009883a 	mov	r4,r2
 80008a8:	80005e00 	call	80005e0 <printSignedHex1>
				printf("\n");
 80008ac:	01000284 	movi	r4,10
 80008b0:	8002d2c0 	call	8002d2c <putchar>
 80008b4:	003fb306 	br	8000784 <__alt_data_end+0xfc000784>
			}

			else if (device == 2) {
 80008b8:	e0bff983 	ldbu	r2,-26(fp)
 80008bc:	10800098 	cmpnei	r2,r2,2
 80008c0:	103fb01e 	bne	r2,zero,8000784 <__alt_data_end+0xfc000784>
				rcode = mousePoll(&buf);
 80008c4:	e0bffb44 	addi	r2,fp,-19
 80008c8:	1009883a 	mov	r4,r2
 80008cc:	80013080 	call	8001308 <mousePoll>
 80008d0:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
 80008d4:	e0bffb03 	ldbu	r2,-20(fp)
 80008d8:	10800118 	cmpnei	r2,r2,4
 80008dc:	10007426 	beq	r2,zero,8000ab0 <main+0x364>
					//NAK means no new data
					continue;
				} else if (rcode) {
 80008e0:	e0bffb03 	ldbu	r2,-20(fp)
 80008e4:	10000926 	beq	r2,zero,800090c <main+0x1c0>
					printf("Rcode: ");
 80008e8:	01020034 	movhi	r4,2048
 80008ec:	21147304 	addi	r4,r4,20940
 80008f0:	8002cd80 	call	8002cd8 <printf>
					printf("%x \n", rcode);
 80008f4:	e0bffb03 	ldbu	r2,-20(fp)
 80008f8:	100b883a 	mov	r5,r2
 80008fc:	01020034 	movhi	r4,2048
 8000900:	21145504 	addi	r4,r4,20820
 8000904:	8002cd80 	call	8002cd8 <printf>
					continue;
 8000908:	00006a06 	br	8000ab4 <main+0x368>
				}
				printf("X displacement: ");
 800090c:	01020034 	movhi	r4,2048
 8000910:	21147904 	addi	r4,r4,20964
 8000914:	8002cd80 	call	8002cd8 <printf>
				printf("%d ", (signed char) buf.Xdispl);
 8000918:	e0bffb83 	ldbu	r2,-18(fp)
 800091c:	10803fcc 	andi	r2,r2,255
 8000920:	1080201c 	xori	r2,r2,128
 8000924:	10bfe004 	addi	r2,r2,-128
 8000928:	100b883a 	mov	r5,r2
 800092c:	01020034 	movhi	r4,2048
 8000930:	21147e04 	addi	r4,r4,20984
 8000934:	8002cd80 	call	8002cd8 <printf>
				printSignedHex0((signed char) buf.Xdispl);
 8000938:	e0bffb83 	ldbu	r2,-18(fp)
 800093c:	10803fcc 	andi	r2,r2,255
 8000940:	1080201c 	xori	r2,r2,128
 8000944:	10bfe004 	addi	r2,r2,-128
 8000948:	1009883a 	mov	r4,r2
 800094c:	80004c80 	call	80004c8 <printSignedHex0>
				printf("Y displacement: ");
 8000950:	01020034 	movhi	r4,2048
 8000954:	21147f04 	addi	r4,r4,20988
 8000958:	8002cd80 	call	8002cd8 <printf>
				printf("%d ", (signed char) buf.Ydispl);
 800095c:	e0bffbc3 	ldbu	r2,-17(fp)
 8000960:	10803fcc 	andi	r2,r2,255
 8000964:	1080201c 	xori	r2,r2,128
 8000968:	10bfe004 	addi	r2,r2,-128
 800096c:	100b883a 	mov	r5,r2
 8000970:	01020034 	movhi	r4,2048
 8000974:	21147e04 	addi	r4,r4,20984
 8000978:	8002cd80 	call	8002cd8 <printf>
				printSignedHex1((signed char) buf.Ydispl);
 800097c:	e0bffbc3 	ldbu	r2,-17(fp)
 8000980:	10803fcc 	andi	r2,r2,255
 8000984:	1080201c 	xori	r2,r2,128
 8000988:	10bfe004 	addi	r2,r2,-128
 800098c:	1009883a 	mov	r4,r2
 8000990:	80005e00 	call	80005e0 <printSignedHex1>
				printf("Buttons: ");
 8000994:	01020034 	movhi	r4,2048
 8000998:	21148404 	addi	r4,r4,21008
 800099c:	8002cd80 	call	8002cd8 <printf>
				printf("%x\n", buf.button);
 80009a0:	e0bffb43 	ldbu	r2,-19(fp)
 80009a4:	10803fcc 	andi	r2,r2,255
 80009a8:	100b883a 	mov	r5,r2
 80009ac:	01020034 	movhi	r4,2048
 80009b0:	21148704 	addi	r4,r4,21020
 80009b4:	8002cd80 	call	8002cd8 <printf>
				if (buf.button & 0x04)
 80009b8:	e0bffb43 	ldbu	r2,-19(fp)
 80009bc:	10803fcc 	andi	r2,r2,255
 80009c0:	1080010c 	andi	r2,r2,4
 80009c4:	10000326 	beq	r2,zero,80009d4 <main+0x288>
					setLED(2);
 80009c8:	01000084 	movi	r4,2
 80009cc:	800043c0 	call	800043c <setLED>
 80009d0:	00000206 	br	80009dc <main+0x290>
				else
					clearLED(2);
 80009d4:	01000084 	movi	r4,2
 80009d8:	80004800 	call	8000480 <clearLED>
				if (buf.button & 0x02)
 80009dc:	e0bffb43 	ldbu	r2,-19(fp)
 80009e0:	10803fcc 	andi	r2,r2,255
 80009e4:	1080008c 	andi	r2,r2,2
 80009e8:	10000326 	beq	r2,zero,80009f8 <main+0x2ac>
					setLED(1);
 80009ec:	01000044 	movi	r4,1
 80009f0:	800043c0 	call	800043c <setLED>
 80009f4:	00000206 	br	8000a00 <main+0x2b4>
				else
					clearLED(1);
 80009f8:	01000044 	movi	r4,1
 80009fc:	80004800 	call	8000480 <clearLED>
				if (buf.button & 0x01)
 8000a00:	e0bffb43 	ldbu	r2,-19(fp)
 8000a04:	10803fcc 	andi	r2,r2,255
 8000a08:	1080004c 	andi	r2,r2,1
 8000a0c:	10000326 	beq	r2,zero,8000a1c <main+0x2d0>
					setLED(0);
 8000a10:	0009883a 	mov	r4,zero
 8000a14:	800043c0 	call	800043c <setLED>
 8000a18:	003f5a06 	br	8000784 <__alt_data_end+0xfc000784>
				else
					clearLED(0);
 8000a1c:	0009883a 	mov	r4,zero
 8000a20:	80004800 	call	8000480 <clearLED>
 8000a24:	003f5706 	br	8000784 <__alt_data_end+0xfc000784>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 8000a28:	80029e40 	call	80029e4 <GetUsbTaskState>
 8000a2c:	10803fcc 	andi	r2,r2,255
 8000a30:	10803fd8 	cmpnei	r2,r2,255
 8000a34:	10000a1e 	bne	r2,zero,8000a60 <main+0x314>
			if (!errorflag) {
 8000a38:	e0bff943 	ldbu	r2,-27(fp)
 8000a3c:	103f511e 	bne	r2,zero,8000784 <__alt_data_end+0xfc000784>
				errorflag = 1;
 8000a40:	00800044 	movi	r2,1
 8000a44:	e0bff945 	stb	r2,-27(fp)
				clearLED(9);
 8000a48:	01000244 	movi	r4,9
 8000a4c:	80004800 	call	8000480 <clearLED>
				printf("USB Error State\n");
 8000a50:	01020034 	movhi	r4,2048
 8000a54:	21148804 	addi	r4,r4,21024
 8000a58:	8002dc80 	call	8002dc8 <puts>
 8000a5c:	003f4906 	br	8000784 <__alt_data_end+0xfc000784>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
 8000a60:	01020034 	movhi	r4,2048
 8000a64:	21148c04 	addi	r4,r4,21040
 8000a68:	8002cd80 	call	8002cd8 <printf>
			printf("%x\n", GetUsbTaskState());
 8000a6c:	80029e40 	call	80029e4 <GetUsbTaskState>
 8000a70:	10803fcc 	andi	r2,r2,255
 8000a74:	100b883a 	mov	r5,r2
 8000a78:	01020034 	movhi	r4,2048
 8000a7c:	21148704 	addi	r4,r4,21020
 8000a80:	8002cd80 	call	8002cd8 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 8000a84:	e0bff903 	ldbu	r2,-28(fp)
 8000a88:	10000326 	beq	r2,zero,8000a98 <main+0x34c>
				runningdebugflag = 0;
 8000a8c:	e03ff905 	stb	zero,-28(fp)
				MAX3421E_init();
 8000a90:	8001a300 	call	8001a30 <MAX3421E_init>
				USB_init();
 8000a94:	80021dc0 	call	80021dc <USB_init>
			}
			errorflag = 0;
 8000a98:	e03ff945 	stb	zero,-27(fp)
			clearLED(9);
 8000a9c:	01000244 	movi	r4,9
 8000aa0:	80004800 	call	8000480 <clearLED>
 8000aa4:	003f3706 	br	8000784 <__alt_data_end+0xfc000784>
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) {
					continue; //NAK means no new data
 8000aa8:	0001883a 	nop
 8000aac:	003f3506 	br	8000784 <__alt_data_end+0xfc000784>

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
 8000ab0:	0001883a 	nop
			}
			errorflag = 0;
			clearLED(9);
		}

	}
 8000ab4:	003f3306 	br	8000784 <__alt_data_end+0xfc000784>

08000ab8 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 8000ab8:	defff204 	addi	sp,sp,-56
 8000abc:	dfc00d15 	stw	ra,52(sp)
 8000ac0:	df000c15 	stw	fp,48(sp)
 8000ac4:	df000c04 	addi	fp,sp,48
 8000ac8:	2005883a 	mov	r2,r4
 8000acc:	e17fff15 	stw	r5,-4(fp)
 8000ad0:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000ad4:	00820034 	movhi	r2,2048
 8000ad8:	10967004 	addi	r2,r2,22976
 8000adc:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 8000ae0:	00820034 	movhi	r2,2048
 8000ae4:	10967004 	addi	r2,r2,22976
 8000ae8:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8000aec:	e0fffe03 	ldbu	r3,-8(fp)
 8000af0:	00820034 	movhi	r2,2048
 8000af4:	10967004 	addi	r2,r2,22976
 8000af8:	d8800415 	stw	r2,16(sp)
 8000afc:	00800244 	movi	r2,9
 8000b00:	d8800315 	stw	r2,12(sp)
 8000b04:	d8000215 	stw	zero,8(sp)
 8000b08:	00800084 	movi	r2,2
 8000b0c:	d8800115 	stw	r2,4(sp)
 8000b10:	d8000015 	stw	zero,0(sp)
 8000b14:	01c00184 	movi	r7,6
 8000b18:	01802004 	movi	r6,128
 8000b1c:	000b883a 	mov	r5,zero
 8000b20:	1809883a 	mov	r4,r3
 8000b24:	8001c280 	call	8001c28 <XferCtrlReq>
 8000b28:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8000b2c:	e0bffc03 	ldbu	r2,-16(fp)
 8000b30:	10000226 	beq	r2,zero,8000b3c <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 8000b34:	0005883a 	mov	r2,zero
 8000b38:	0000dc06 	br	8000eac <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8000b3c:	e0bffa17 	ldw	r2,-24(fp)
 8000b40:	1080008b 	ldhu	r2,2(r2)
 8000b44:	10bfffcc 	andi	r2,r2,65535
 8000b48:	10804070 	cmpltui	r2,r2,257
 8000b4c:	1000031e 	bne	r2,zero,8000b5c <HIDMProbe+0xa4>
		total_length = 256;
 8000b50:	00804004 	movi	r2,256
 8000b54:	e0bff90d 	sth	r2,-28(fp)
 8000b58:	00000306 	br	8000b68 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000b5c:	e0bffa17 	ldw	r2,-24(fp)
 8000b60:	1080008b 	ldhu	r2,2(r2)
 8000b64:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000b68:	e13ffe03 	ldbu	r4,-8(fp)
 8000b6c:	e0fff90b 	ldhu	r3,-28(fp)
 8000b70:	00820034 	movhi	r2,2048
 8000b74:	10967004 	addi	r2,r2,22976
 8000b78:	d8800415 	stw	r2,16(sp)
 8000b7c:	d8c00315 	stw	r3,12(sp)
 8000b80:	d8000215 	stw	zero,8(sp)
 8000b84:	00800084 	movi	r2,2
 8000b88:	d8800115 	stw	r2,4(sp)
 8000b8c:	d8000015 	stw	zero,0(sp)
 8000b90:	01c00184 	movi	r7,6
 8000b94:	01802004 	movi	r6,128
 8000b98:	000b883a 	mov	r5,zero
 8000b9c:	8001c280 	call	8001c28 <XferCtrlReq>
 8000ba0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8000ba4:	e0bffc03 	ldbu	r2,-16(fp)
 8000ba8:	10000226 	beq	r2,zero,8000bb4 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 8000bac:	0005883a 	mov	r2,zero
 8000bb0:	0000be06 	br	8000eac <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 8000bb4:	e0bffa17 	ldw	r2,-24(fp)
 8000bb8:	10800143 	ldbu	r2,5(r2)
 8000bbc:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8000bc0:	0000b306 	br	8000e90 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 8000bc4:	e0bffa17 	ldw	r2,-24(fp)
 8000bc8:	10800043 	ldbu	r2,1(r2)
 8000bcc:	10803fcc 	andi	r2,r2,255
 8000bd0:	10800120 	cmpeqi	r2,r2,4
 8000bd4:	1000091e 	bne	r2,zero,8000bfc <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000bd8:	e0bffa17 	ldw	r2,-24(fp)
 8000bdc:	10800003 	ldbu	r2,0(r2)
 8000be0:	10803fcc 	andi	r2,r2,255
 8000be4:	e0fffb17 	ldw	r3,-20(fp)
 8000be8:	1885883a 	add	r2,r3,r2
 8000bec:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8000bf0:	e0bffb17 	ldw	r2,-20(fp)
 8000bf4:	e0bffa15 	stw	r2,-24(fp)
 8000bf8:	0000a506 	br	8000e90 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8000bfc:	e0bffa17 	ldw	r2,-24(fp)
 8000c00:	10800143 	ldbu	r2,5(r2)
 8000c04:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8000c08:	e0bffa17 	ldw	r2,-24(fp)
 8000c0c:	10800183 	ldbu	r2,6(r2)
 8000c10:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8000c14:	e0bffa17 	ldw	r2,-24(fp)
 8000c18:	108001c3 	ldbu	r2,7(r2)
 8000c1c:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000c20:	e0bffc83 	ldbu	r2,-14(fp)
 8000c24:	108000d8 	cmpnei	r2,r2,3
 8000c28:	1000971e 	bne	r2,zero,8000e88 <HIDMProbe+0x3d0>
 8000c2c:	e0bffcc3 	ldbu	r2,-13(fp)
 8000c30:	10800058 	cmpnei	r2,r2,1
 8000c34:	1000941e 	bne	r2,zero,8000e88 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 8000c38:	e0bffd03 	ldbu	r2,-12(fp)
 8000c3c:	10800098 	cmpnei	r2,r2,2
 8000c40:	1000911e 	bne	r2,zero,8000e88 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 8000c44:	e0fffe03 	ldbu	r3,-8(fp)
 8000c48:	00820034 	movhi	r2,2048
 8000c4c:	1096b004 	addi	r2,r2,23232
 8000c50:	180690fa 	slli	r3,r3,3
 8000c54:	10c5883a 	add	r2,r2,r3
 8000c58:	10800104 	addi	r2,r2,4
 8000c5c:	00c00084 	movi	r3,2
 8000c60:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 8000c64:	e0fffe03 	ldbu	r3,-8(fp)
 8000c68:	00820034 	movhi	r2,2048
 8000c6c:	1096b004 	addi	r2,r2,23232
 8000c70:	180690fa 	slli	r3,r3,3
 8000c74:	10c5883a 	add	r2,r2,r3
 8000c78:	10800017 	ldw	r2,0(r2)
 8000c7c:	1080008b 	ldhu	r2,2(r2)
 8000c80:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8000c84:	80012c80 	call	80012c8 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8000c88:	e0fffe03 	ldbu	r3,-8(fp)
 8000c8c:	00820034 	movhi	r2,2048
 8000c90:	1096b004 	addi	r2,r2,23232
 8000c94:	180690fa 	slli	r3,r3,3
 8000c98:	10c7883a 	add	r3,r2,r3
 8000c9c:	00820034 	movhi	r2,2048
 8000ca0:	10966604 	addi	r2,r2,22936
 8000ca4:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 8000ca8:	e0fffe03 	ldbu	r3,-8(fp)
 8000cac:	00820034 	movhi	r2,2048
 8000cb0:	1096b004 	addi	r2,r2,23232
 8000cb4:	180690fa 	slli	r3,r3,3
 8000cb8:	10c5883a 	add	r2,r2,r3
 8000cbc:	10800017 	ldw	r2,0(r2)
 8000cc0:	e0fffd43 	ldbu	r3,-11(fp)
 8000cc4:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 8000cc8:	e0bffa17 	ldw	r2,-24(fp)
 8000ccc:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 8000cd0:	d0a0d745 	stb	r2,-31907(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 8000cd4:	e0bffe03 	ldbu	r2,-8(fp)
 8000cd8:	d0a0d705 	stb	r2,-31908(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000cdc:	e0bffa17 	ldw	r2,-24(fp)
 8000ce0:	10800003 	ldbu	r2,0(r2)
 8000ce4:	10803fcc 	andi	r2,r2,255
 8000ce8:	e0fffb17 	ldw	r3,-20(fp)
 8000cec:	1885883a 	add	r2,r3,r2
 8000cf0:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8000cf4:	e0bffb17 	ldw	r2,-20(fp)
 8000cf8:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 8000cfc:	00005b06 	br	8000e6c <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8000d00:	e0bffa17 	ldw	r2,-24(fp)
 8000d04:	10800043 	ldbu	r2,1(r2)
 8000d08:	10803fcc 	andi	r2,r2,255
 8000d0c:	10800160 	cmpeqi	r2,r2,5
 8000d10:	1000091e 	bne	r2,zero,8000d38 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000d14:	e0bffa17 	ldw	r2,-24(fp)
 8000d18:	10800003 	ldbu	r2,0(r2)
 8000d1c:	10803fcc 	andi	r2,r2,255
 8000d20:	e0fffb17 	ldw	r3,-20(fp)
 8000d24:	1885883a 	add	r2,r3,r2
 8000d28:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8000d2c:	e0bffb17 	ldw	r2,-20(fp)
 8000d30:	e0bffa15 	stw	r2,-24(fp)
 8000d34:	00004d06 	br	8000e6c <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000d38:	e0fffe03 	ldbu	r3,-8(fp)
 8000d3c:	00820034 	movhi	r2,2048
 8000d40:	1096b004 	addi	r2,r2,23232
 8000d44:	180690fa 	slli	r3,r3,3
 8000d48:	10c5883a 	add	r2,r2,r3
 8000d4c:	10800017 	ldw	r2,0(r2)
 8000d50:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8000d54:	e0fffa17 	ldw	r3,-24(fp)
 8000d58:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000d5c:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8000d60:	e0fffe03 	ldbu	r3,-8(fp)
 8000d64:	00820034 	movhi	r2,2048
 8000d68:	1096b004 	addi	r2,r2,23232
 8000d6c:	180690fa 	slli	r3,r3,3
 8000d70:	10c5883a 	add	r2,r2,r3
 8000d74:	10800017 	ldw	r2,0(r2)
 8000d78:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8000d7c:	e0fffa17 	ldw	r3,-24(fp)
 8000d80:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8000d84:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000d88:	e0fffe03 	ldbu	r3,-8(fp)
 8000d8c:	00820034 	movhi	r2,2048
 8000d90:	1096b004 	addi	r2,r2,23232
 8000d94:	180690fa 	slli	r3,r3,3
 8000d98:	10c5883a 	add	r2,r2,r3
 8000d9c:	10800017 	ldw	r2,0(r2)
 8000da0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8000da4:	e0fffa17 	ldw	r3,-24(fp)
 8000da8:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000dac:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8000db0:	e0fffe03 	ldbu	r3,-8(fp)
 8000db4:	00820034 	movhi	r2,2048
 8000db8:	1096b004 	addi	r2,r2,23232
 8000dbc:	180690fa 	slli	r3,r3,3
 8000dc0:	10c5883a 	add	r2,r2,r3
 8000dc4:	10800017 	ldw	r2,0(r2)
 8000dc8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8000dcc:	e0fffa17 	ldw	r3,-24(fp)
 8000dd0:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8000dd4:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8000dd8:	e0fffe03 	ldbu	r3,-8(fp)
 8000ddc:	e0bffc43 	ldbu	r2,-15(fp)
 8000de0:	d8000415 	stw	zero,16(sp)
 8000de4:	d8000315 	stw	zero,12(sp)
 8000de8:	d8000215 	stw	zero,8(sp)
 8000dec:	d8000115 	stw	zero,4(sp)
 8000df0:	d8800015 	stw	r2,0(sp)
 8000df4:	01c00244 	movi	r7,9
 8000df8:	000d883a 	mov	r6,zero
 8000dfc:	000b883a 	mov	r5,zero
 8000e00:	1809883a 	mov	r4,r3
 8000e04:	8001c280 	call	8001c28 <XferCtrlReq>
 8000e08:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 8000e0c:	e0bffc03 	ldbu	r2,-16(fp)
 8000e10:	10000226 	beq	r2,zero,8000e1c <HIDMProbe+0x364>
							return (FALSE);
 8000e14:	0005883a 	mov	r2,zero
 8000e18:	00002406 	br	8000eac <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8000e1c:	e0fffe03 	ldbu	r3,-8(fp)
 8000e20:	d0a0d743 	ldbu	r2,-31907(gp)
 8000e24:	10803fcc 	andi	r2,r2,255
 8000e28:	d8000415 	stw	zero,16(sp)
 8000e2c:	d8000315 	stw	zero,12(sp)
 8000e30:	d8800215 	stw	r2,8(sp)
 8000e34:	d8000115 	stw	zero,4(sp)
 8000e38:	d8000015 	stw	zero,0(sp)
 8000e3c:	01c002c4 	movi	r7,11
 8000e40:	01800844 	movi	r6,33
 8000e44:	000b883a 	mov	r5,zero
 8000e48:	1809883a 	mov	r4,r3
 8000e4c:	8001c280 	call	8001c28 <XferCtrlReq>
 8000e50:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8000e54:	e0bffc03 	ldbu	r2,-16(fp)
 8000e58:	10000226 	beq	r2,zero,8000e64 <HIDMProbe+0x3ac>
							return (FALSE);
 8000e5c:	0005883a 	mov	r2,zero
 8000e60:	00001206 	br	8000eac <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 8000e64:	00800044 	movi	r2,1
 8000e68:	00001006 	br	8000eac <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8000e6c:	e0fff90b 	ldhu	r3,-28(fp)
 8000e70:	00820034 	movhi	r2,2048
 8000e74:	10967004 	addi	r2,r2,22976
 8000e78:	1885883a 	add	r2,r3,r2
 8000e7c:	e0fffb17 	ldw	r3,-20(fp)
 8000e80:	18bf9f36 	bltu	r3,r2,8000d00 <__alt_data_end+0xfc000d00>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000e84:	00000206 	br	8000e90 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 8000e88:	0005883a 	mov	r2,zero
 8000e8c:	00000706 	br	8000eac <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8000e90:	e0fff90b 	ldhu	r3,-28(fp)
 8000e94:	00820034 	movhi	r2,2048
 8000e98:	10967004 	addi	r2,r2,22976
 8000e9c:	1885883a 	add	r2,r3,r2
 8000ea0:	e0fffb17 	ldw	r3,-20(fp)
 8000ea4:	18bf4736 	bltu	r3,r2,8000bc4 <__alt_data_end+0xfc000bc4>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8000ea8:	0005883a 	mov	r2,zero
}
 8000eac:	e037883a 	mov	sp,fp
 8000eb0:	dfc00117 	ldw	ra,4(sp)
 8000eb4:	df000017 	ldw	fp,0(sp)
 8000eb8:	dec00204 	addi	sp,sp,8
 8000ebc:	f800283a 	ret

08000ec0 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 8000ec0:	defff204 	addi	sp,sp,-56
 8000ec4:	dfc00d15 	stw	ra,52(sp)
 8000ec8:	df000c15 	stw	fp,48(sp)
 8000ecc:	df000c04 	addi	fp,sp,48
 8000ed0:	2005883a 	mov	r2,r4
 8000ed4:	e17fff15 	stw	r5,-4(fp)
 8000ed8:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000edc:	00820034 	movhi	r2,2048
 8000ee0:	10967004 	addi	r2,r2,22976
 8000ee4:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 8000ee8:	00820034 	movhi	r2,2048
 8000eec:	10967004 	addi	r2,r2,22976
 8000ef0:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8000ef4:	e0fffe03 	ldbu	r3,-8(fp)
 8000ef8:	00820034 	movhi	r2,2048
 8000efc:	10967004 	addi	r2,r2,22976
 8000f00:	d8800415 	stw	r2,16(sp)
 8000f04:	00800244 	movi	r2,9
 8000f08:	d8800315 	stw	r2,12(sp)
 8000f0c:	d8000215 	stw	zero,8(sp)
 8000f10:	00800084 	movi	r2,2
 8000f14:	d8800115 	stw	r2,4(sp)
 8000f18:	d8000015 	stw	zero,0(sp)
 8000f1c:	01c00184 	movi	r7,6
 8000f20:	01802004 	movi	r6,128
 8000f24:	000b883a 	mov	r5,zero
 8000f28:	1809883a 	mov	r4,r3
 8000f2c:	8001c280 	call	8001c28 <XferCtrlReq>
 8000f30:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 8000f34:	e0bffc03 	ldbu	r2,-16(fp)
 8000f38:	10000226 	beq	r2,zero,8000f44 <HIDKProbe+0x84>
		return (FALSE);
 8000f3c:	0005883a 	mov	r2,zero
 8000f40:	0000dc06 	br	80012b4 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8000f44:	e0bffa17 	ldw	r2,-24(fp)
 8000f48:	1080008b 	ldhu	r2,2(r2)
 8000f4c:	10bfffcc 	andi	r2,r2,65535
 8000f50:	10804070 	cmpltui	r2,r2,257
 8000f54:	1000031e 	bne	r2,zero,8000f64 <HIDKProbe+0xa4>
		total_length = 256;
 8000f58:	00804004 	movi	r2,256
 8000f5c:	e0bff90d 	sth	r2,-28(fp)
 8000f60:	00000306 	br	8000f70 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000f64:	e0bffa17 	ldw	r2,-24(fp)
 8000f68:	1080008b 	ldhu	r2,2(r2)
 8000f6c:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000f70:	e13ffe03 	ldbu	r4,-8(fp)
 8000f74:	e0fff90b 	ldhu	r3,-28(fp)
 8000f78:	00820034 	movhi	r2,2048
 8000f7c:	10967004 	addi	r2,r2,22976
 8000f80:	d8800415 	stw	r2,16(sp)
 8000f84:	d8c00315 	stw	r3,12(sp)
 8000f88:	d8000215 	stw	zero,8(sp)
 8000f8c:	00800084 	movi	r2,2
 8000f90:	d8800115 	stw	r2,4(sp)
 8000f94:	d8000015 	stw	zero,0(sp)
 8000f98:	01c00184 	movi	r7,6
 8000f9c:	01802004 	movi	r6,128
 8000fa0:	000b883a 	mov	r5,zero
 8000fa4:	8001c280 	call	8001c28 <XferCtrlReq>
 8000fa8:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8000fac:	e0bffc03 	ldbu	r2,-16(fp)
 8000fb0:	10000226 	beq	r2,zero,8000fbc <HIDKProbe+0xfc>
		return (FALSE);
 8000fb4:	0005883a 	mov	r2,zero
 8000fb8:	0000be06 	br	80012b4 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8000fbc:	e0bffa17 	ldw	r2,-24(fp)
 8000fc0:	10800143 	ldbu	r2,5(r2)
 8000fc4:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8000fc8:	0000b306 	br	8001298 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8000fcc:	e0bffa17 	ldw	r2,-24(fp)
 8000fd0:	10800043 	ldbu	r2,1(r2)
 8000fd4:	10803fcc 	andi	r2,r2,255
 8000fd8:	10800120 	cmpeqi	r2,r2,4
 8000fdc:	1000091e 	bne	r2,zero,8001004 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000fe0:	e0bffa17 	ldw	r2,-24(fp)
 8000fe4:	10800003 	ldbu	r2,0(r2)
 8000fe8:	10803fcc 	andi	r2,r2,255
 8000fec:	e0fffb17 	ldw	r3,-20(fp)
 8000ff0:	1885883a 	add	r2,r3,r2
 8000ff4:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8000ff8:	e0bffb17 	ldw	r2,-20(fp)
 8000ffc:	e0bffa15 	stw	r2,-24(fp)
 8001000:	0000a506 	br	8001298 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8001004:	e0bffa17 	ldw	r2,-24(fp)
 8001008:	10800143 	ldbu	r2,5(r2)
 800100c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8001010:	e0bffa17 	ldw	r2,-24(fp)
 8001014:	10800183 	ldbu	r2,6(r2)
 8001018:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 800101c:	e0bffa17 	ldw	r2,-24(fp)
 8001020:	108001c3 	ldbu	r2,7(r2)
 8001024:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8001028:	e0bffc83 	ldbu	r2,-14(fp)
 800102c:	108000d8 	cmpnei	r2,r2,3
 8001030:	1000971e 	bne	r2,zero,8001290 <HIDKProbe+0x3d0>
 8001034:	e0bffcc3 	ldbu	r2,-13(fp)
 8001038:	10800058 	cmpnei	r2,r2,1
 800103c:	1000941e 	bne	r2,zero,8001290 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 8001040:	e0bffd03 	ldbu	r2,-12(fp)
 8001044:	10800058 	cmpnei	r2,r2,1
 8001048:	1000911e 	bne	r2,zero,8001290 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 800104c:	e0fffe03 	ldbu	r3,-8(fp)
 8001050:	00820034 	movhi	r2,2048
 8001054:	1096b004 	addi	r2,r2,23232
 8001058:	180690fa 	slli	r3,r3,3
 800105c:	10c5883a 	add	r2,r2,r3
 8001060:	10800104 	addi	r2,r2,4
 8001064:	00c00044 	movi	r3,1
 8001068:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 800106c:	e0fffe03 	ldbu	r3,-8(fp)
 8001070:	00820034 	movhi	r2,2048
 8001074:	1096b004 	addi	r2,r2,23232
 8001078:	180690fa 	slli	r3,r3,3
 800107c:	10c5883a 	add	r2,r2,r3
 8001080:	10800017 	ldw	r2,0(r2)
 8001084:	1080008b 	ldhu	r2,2(r2)
 8001088:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 800108c:	80012c80 	call	80012c8 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8001090:	e0fffe03 	ldbu	r3,-8(fp)
 8001094:	00820034 	movhi	r2,2048
 8001098:	1096b004 	addi	r2,r2,23232
 800109c:	180690fa 	slli	r3,r3,3
 80010a0:	10c7883a 	add	r3,r2,r3
 80010a4:	00820034 	movhi	r2,2048
 80010a8:	10966604 	addi	r2,r2,22936
 80010ac:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 80010b0:	e0fffe03 	ldbu	r3,-8(fp)
 80010b4:	00820034 	movhi	r2,2048
 80010b8:	1096b004 	addi	r2,r2,23232
 80010bc:	180690fa 	slli	r3,r3,3
 80010c0:	10c5883a 	add	r2,r2,r3
 80010c4:	10800017 	ldw	r2,0(r2)
 80010c8:	e0fffd43 	ldbu	r3,-11(fp)
 80010cc:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 80010d0:	e0bffa17 	ldw	r2,-24(fp)
 80010d4:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 80010d8:	d0a0d745 	stb	r2,-31907(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 80010dc:	e0bffe03 	ldbu	r2,-8(fp)
 80010e0:	d0a0d705 	stb	r2,-31908(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 80010e4:	e0bffa17 	ldw	r2,-24(fp)
 80010e8:	10800003 	ldbu	r2,0(r2)
 80010ec:	10803fcc 	andi	r2,r2,255
 80010f0:	e0fffb17 	ldw	r3,-20(fp)
 80010f4:	1885883a 	add	r2,r3,r2
 80010f8:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 80010fc:	e0bffb17 	ldw	r2,-20(fp)
 8001100:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 8001104:	00005b06 	br	8001274 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8001108:	e0bffa17 	ldw	r2,-24(fp)
 800110c:	10800043 	ldbu	r2,1(r2)
 8001110:	10803fcc 	andi	r2,r2,255
 8001114:	10800160 	cmpeqi	r2,r2,5
 8001118:	1000091e 	bne	r2,zero,8001140 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 800111c:	e0bffa17 	ldw	r2,-24(fp)
 8001120:	10800003 	ldbu	r2,0(r2)
 8001124:	10803fcc 	andi	r2,r2,255
 8001128:	e0fffb17 	ldw	r3,-20(fp)
 800112c:	1885883a 	add	r2,r3,r2
 8001130:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8001134:	e0bffb17 	ldw	r2,-20(fp)
 8001138:	e0bffa15 	stw	r2,-24(fp)
 800113c:	00004d06 	br	8001274 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8001140:	e0fffe03 	ldbu	r3,-8(fp)
 8001144:	00820034 	movhi	r2,2048
 8001148:	1096b004 	addi	r2,r2,23232
 800114c:	180690fa 	slli	r3,r3,3
 8001150:	10c5883a 	add	r2,r2,r3
 8001154:	10800017 	ldw	r2,0(r2)
 8001158:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 800115c:	e0fffa17 	ldw	r3,-24(fp)
 8001160:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8001164:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8001168:	e0fffe03 	ldbu	r3,-8(fp)
 800116c:	00820034 	movhi	r2,2048
 8001170:	1096b004 	addi	r2,r2,23232
 8001174:	180690fa 	slli	r3,r3,3
 8001178:	10c5883a 	add	r2,r2,r3
 800117c:	10800017 	ldw	r2,0(r2)
 8001180:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8001184:	e0fffa17 	ldw	r3,-24(fp)
 8001188:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 800118c:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8001190:	e0fffe03 	ldbu	r3,-8(fp)
 8001194:	00820034 	movhi	r2,2048
 8001198:	1096b004 	addi	r2,r2,23232
 800119c:	180690fa 	slli	r3,r3,3
 80011a0:	10c5883a 	add	r2,r2,r3
 80011a4:	10800017 	ldw	r2,0(r2)
 80011a8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 80011ac:	e0fffa17 	ldw	r3,-24(fp)
 80011b0:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 80011b4:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 80011b8:	e0fffe03 	ldbu	r3,-8(fp)
 80011bc:	00820034 	movhi	r2,2048
 80011c0:	1096b004 	addi	r2,r2,23232
 80011c4:	180690fa 	slli	r3,r3,3
 80011c8:	10c5883a 	add	r2,r2,r3
 80011cc:	10800017 	ldw	r2,0(r2)
 80011d0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 80011d4:	e0fffa17 	ldw	r3,-24(fp)
 80011d8:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 80011dc:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 80011e0:	e0fffe03 	ldbu	r3,-8(fp)
 80011e4:	e0bffc43 	ldbu	r2,-15(fp)
 80011e8:	d8000415 	stw	zero,16(sp)
 80011ec:	d8000315 	stw	zero,12(sp)
 80011f0:	d8000215 	stw	zero,8(sp)
 80011f4:	d8000115 	stw	zero,4(sp)
 80011f8:	d8800015 	stw	r2,0(sp)
 80011fc:	01c00244 	movi	r7,9
 8001200:	000d883a 	mov	r6,zero
 8001204:	000b883a 	mov	r5,zero
 8001208:	1809883a 	mov	r4,r3
 800120c:	8001c280 	call	8001c28 <XferCtrlReq>
 8001210:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 8001214:	e0bffc03 	ldbu	r2,-16(fp)
 8001218:	10000226 	beq	r2,zero,8001224 <HIDKProbe+0x364>
							return (FALSE);
 800121c:	0005883a 	mov	r2,zero
 8001220:	00002406 	br	80012b4 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8001224:	e0fffe03 	ldbu	r3,-8(fp)
 8001228:	d0a0d743 	ldbu	r2,-31907(gp)
 800122c:	10803fcc 	andi	r2,r2,255
 8001230:	d8000415 	stw	zero,16(sp)
 8001234:	d8000315 	stw	zero,12(sp)
 8001238:	d8800215 	stw	r2,8(sp)
 800123c:	d8000115 	stw	zero,4(sp)
 8001240:	d8000015 	stw	zero,0(sp)
 8001244:	01c002c4 	movi	r7,11
 8001248:	01800844 	movi	r6,33
 800124c:	000b883a 	mov	r5,zero
 8001250:	1809883a 	mov	r4,r3
 8001254:	8001c280 	call	8001c28 <XferCtrlReq>
 8001258:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 800125c:	e0bffc03 	ldbu	r2,-16(fp)
 8001260:	10000226 	beq	r2,zero,800126c <HIDKProbe+0x3ac>
							return (FALSE);
 8001264:	0005883a 	mov	r2,zero
 8001268:	00001206 	br	80012b4 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 800126c:	00800044 	movi	r2,1
 8001270:	00001006 	br	80012b4 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8001274:	e0fff90b 	ldhu	r3,-28(fp)
 8001278:	00820034 	movhi	r2,2048
 800127c:	10967004 	addi	r2,r2,22976
 8001280:	1885883a 	add	r2,r3,r2
 8001284:	e0fffb17 	ldw	r3,-20(fp)
 8001288:	18bf9f36 	bltu	r3,r2,8001108 <__alt_data_end+0xfc001108>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 800128c:	00000206 	br	8001298 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 8001290:	0005883a 	mov	r2,zero
 8001294:	00000706 	br	80012b4 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8001298:	e0fff90b 	ldhu	r3,-28(fp)
 800129c:	00820034 	movhi	r2,2048
 80012a0:	10967004 	addi	r2,r2,22976
 80012a4:	1885883a 	add	r2,r3,r2
 80012a8:	e0fffb17 	ldw	r3,-20(fp)
 80012ac:	18bf4736 	bltu	r3,r2,8000fcc <__alt_data_end+0xfc000fcc>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 80012b0:	0005883a 	mov	r2,zero
}
 80012b4:	e037883a 	mov	sp,fp
 80012b8:	dfc00117 	ldw	ra,4(sp)
 80012bc:	df000017 	ldw	fp,0(sp)
 80012c0:	dec00204 	addi	sp,sp,8
 80012c4:	f800283a 	ret

080012c8 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 80012c8:	deffff04 	addi	sp,sp,-4
 80012cc:	df000015 	stw	fp,0(sp)
 80012d0:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 80012d4:	00820034 	movhi	r2,2048
 80012d8:	10966604 	addi	r2,r2,22936
 80012dc:	00c01004 	movi	r3,64
 80012e0:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 80012e4:	00820034 	movhi	r2,2048
 80012e8:	10966604 	addi	r2,r2,22936
 80012ec:	00c00404 	movi	r3,16
 80012f0:	10c00385 	stb	r3,14(r2)
}
 80012f4:	0001883a 	nop
 80012f8:	e037883a 	mov	sp,fp
 80012fc:	df000017 	ldw	fp,0(sp)
 8001300:	dec00104 	addi	sp,sp,4
 8001304:	f800283a 	ret

08001308 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 8001308:	defffb04 	addi	sp,sp,-20
 800130c:	dfc00415 	stw	ra,16(sp)
 8001310:	df000315 	stw	fp,12(sp)
 8001314:	df000304 	addi	fp,sp,12
 8001318:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 800131c:	d0a0d703 	ldbu	r2,-31908(gp)
 8001320:	10803fcc 	andi	r2,r2,255
 8001324:	100b883a 	mov	r5,r2
 8001328:	01003804 	movi	r4,224
 800132c:	80014e40 	call	80014e4 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001330:	d0a0d703 	ldbu	r2,-31908(gp)
 8001334:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8001338:	d0a0d703 	ldbu	r2,-31908(gp)
 800133c:	10c03fcc 	andi	r3,r2,255
 8001340:	00820034 	movhi	r2,2048
 8001344:	1096b004 	addi	r2,r2,23232
 8001348:	180690fa 	slli	r3,r3,3
 800134c:	10c5883a 	add	r2,r2,r3
 8001350:	10800017 	ldw	r2,0(r2)
 8001354:	10800204 	addi	r2,r2,8
 8001358:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 800135c:	10803fcc 	andi	r2,r2,255
 8001360:	d8800015 	stw	r2,0(sp)
 8001364:	e1ffff17 	ldw	r7,-4(fp)
 8001368:	01800204 	movi	r6,8
 800136c:	01400044 	movi	r5,1
 8001370:	800204c0 	call	800204c <XferInTransfer>
 8001374:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8001378:	e0bffe03 	ldbu	r2,-8(fp)
}
 800137c:	e037883a 	mov	sp,fp
 8001380:	dfc00117 	ldw	ra,4(sp)
 8001384:	df000017 	ldw	fp,0(sp)
 8001388:	dec00204 	addi	sp,sp,8
 800138c:	f800283a 	ret

08001390 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 8001390:	defffb04 	addi	sp,sp,-20
 8001394:	dfc00415 	stw	ra,16(sp)
 8001398:	df000315 	stw	fp,12(sp)
 800139c:	df000304 	addi	fp,sp,12
 80013a0:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 80013a4:	d0a0d703 	ldbu	r2,-31908(gp)
 80013a8:	10803fcc 	andi	r2,r2,255
 80013ac:	100b883a 	mov	r5,r2
 80013b0:	01003804 	movi	r4,224
 80013b4:	80014e40 	call	80014e4 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 80013b8:	d0a0d703 	ldbu	r2,-31908(gp)
 80013bc:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 80013c0:	d0a0d703 	ldbu	r2,-31908(gp)
 80013c4:	10c03fcc 	andi	r3,r2,255
 80013c8:	00820034 	movhi	r2,2048
 80013cc:	1096b004 	addi	r2,r2,23232
 80013d0:	180690fa 	slli	r3,r3,3
 80013d4:	10c5883a 	add	r2,r2,r3
 80013d8:	10800017 	ldw	r2,0(r2)
 80013dc:	10800204 	addi	r2,r2,8
 80013e0:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 80013e4:	10803fcc 	andi	r2,r2,255
 80013e8:	d8800015 	stw	r2,0(sp)
 80013ec:	e1ffff17 	ldw	r7,-4(fp)
 80013f0:	01800204 	movi	r6,8
 80013f4:	01400044 	movi	r5,1
 80013f8:	800204c0 	call	800204c <XferInTransfer>
 80013fc:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8001400:	e0bffe03 	ldbu	r2,-8(fp)
}
 8001404:	e037883a 	mov	sp,fp
 8001408:	dfc00117 	ldw	ra,4(sp)
 800140c:	df000017 	ldw	fp,0(sp)
 8001410:	dec00204 	addi	sp,sp,8
 8001414:	f800283a 	ret

08001418 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8001418:	defffb04 	addi	sp,sp,-20
 800141c:	df000415 	stw	fp,16(sp)
 8001420:	df000404 	addi	fp,sp,16
 8001424:	2007883a 	mov	r3,r4
 8001428:	2805883a 	mov	r2,r5
 800142c:	e1bffe15 	stw	r6,-8(fp)
 8001430:	e1ffff15 	stw	r7,-4(fp)
 8001434:	e0fffc05 	stb	r3,-16(fp)
 8001438:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 800143c:	0005883a 	mov	r2,zero
}
 8001440:	e037883a 	mov	sp,fp
 8001444:	df000017 	ldw	fp,0(sp)
 8001448:	dec00104 	addi	sp,sp,4
 800144c:	f800283a 	ret

08001450 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8001450:	defffb04 	addi	sp,sp,-20
 8001454:	df000415 	stw	fp,16(sp)
 8001458:	df000404 	addi	fp,sp,16
 800145c:	2007883a 	mov	r3,r4
 8001460:	2805883a 	mov	r2,r5
 8001464:	e1bffe15 	stw	r6,-8(fp)
 8001468:	e1ffff15 	stw	r7,-4(fp)
 800146c:	e0fffc05 	stb	r3,-16(fp)
 8001470:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8001474:	0005883a 	mov	r2,zero
}
 8001478:	e037883a 	mov	sp,fp
 800147c:	df000017 	ldw	fp,0(sp)
 8001480:	dec00104 	addi	sp,sp,4
 8001484:	f800283a 	ret

08001488 <SPI_init>:

//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8001488:	defffc04 	addi	sp,sp,-16
 800148c:	df000315 	stw	fp,12(sp)
 8001490:	df000304 	addi	fp,sp,12
 8001494:	2807883a 	mov	r3,r5
 8001498:	3005883a 	mov	r2,r6
 800149c:	e13ffd05 	stb	r4,-12(fp)
 80014a0:	e0fffe05 	stb	r3,-8(fp)
 80014a4:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 80014a8:	0001883a 	nop
 80014ac:	e037883a 	mov	sp,fp
 80014b0:	df000017 	ldw	fp,0(sp)
 80014b4:	dec00104 	addi	sp,sp,4
 80014b8:	f800283a 	ret

080014bc <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 80014bc:	defffe04 	addi	sp,sp,-8
 80014c0:	df000115 	stw	fp,4(sp)
 80014c4:	df000104 	addi	fp,sp,4
 80014c8:	2005883a 	mov	r2,r4
 80014cc:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 80014d0:	0001883a 	nop
 80014d4:	e037883a 	mov	sp,fp
 80014d8:	df000017 	ldw	fp,0(sp)
 80014dc:	dec00104 	addi	sp,sp,4
 80014e0:	f800283a 	ret

080014e4 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 80014e4:	defff704 	addi	sp,sp,-36
 80014e8:	dfc00815 	stw	ra,32(sp)
 80014ec:	df000715 	stw	fp,28(sp)
 80014f0:	df000704 	addi	fp,sp,28
 80014f4:	2007883a 	mov	r3,r4
 80014f8:	2805883a 	mov	r2,r5
 80014fc:	e0fffe05 	stb	r3,-8(fp)
 8001500:	e0bfff05 	stb	r2,-4(fp)
	//write reg + 2 via SPI
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE temp[2] = {reg+2, val};
 8001504:	e0bffe03 	ldbu	r2,-8(fp)
 8001508:	10800084 	addi	r2,r2,2
 800150c:	e0bffd05 	stb	r2,-12(fp)
 8001510:	e0bfff03 	ldbu	r2,-4(fp)
 8001514:	e0bffd45 	stb	r2,-11(fp)

	int return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2, temp, 0, 0, 0);
 8001518:	e0bffd04 	addi	r2,fp,-12
 800151c:	d8000215 	stw	zero,8(sp)
 8001520:	d8000115 	stw	zero,4(sp)
 8001524:	d8000015 	stw	zero,0(sp)
 8001528:	100f883a 	mov	r7,r2
 800152c:	01800084 	movi	r6,2
 8001530:	000b883a 	mov	r5,zero
 8001534:	01003004 	movi	r4,192
 8001538:	8003cdc0 	call	8003cdc <alt_avalon_spi_command>
 800153c:	e0bffc15 	stw	r2,-16(fp)

	if(return_code < 0)
 8001540:	e0bffc17 	ldw	r2,-16(fp)
 8001544:	1000030e 	bge	r2,zero,8001554 <MAXreg_wr+0x70>
		printf("Error");
 8001548:	01020034 	movhi	r4,2048
 800154c:	21149104 	addi	r4,r4,21060
 8001550:	8002cd80 	call	8002cd8 <printf>

}
 8001554:	0001883a 	nop
 8001558:	e037883a 	mov	sp,fp
 800155c:	dfc00117 	ldw	ra,4(sp)
 8001560:	df000017 	ldw	fp,0(sp)
 8001564:	dec00204 	addi	sp,sp,8
 8001568:	f800283a 	ret

0800156c <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 800156c:	defff304 	addi	sp,sp,-52
 8001570:	dfc00c15 	stw	ra,48(sp)
 8001574:	df000b15 	stw	fp,44(sp)
 8001578:	dc000a15 	stw	r16,40(sp)
 800157c:	df000b04 	addi	fp,sp,44
 8001580:	201b883a 	mov	r13,r4
 8001584:	2809883a 	mov	r4,r5
 8001588:	e1bffe15 	stw	r6,-8(fp)
 800158c:	e37ffc05 	stb	r13,-16(fp)
 8001590:	e13ffd05 	stb	r4,-12(fp)
 8001594:	d809883a 	mov	r4,sp
 8001598:	2021883a 	mov	r16,r4
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);

	BYTE temp[nbytes+1];
 800159c:	e13ffd03 	ldbu	r4,-12(fp)
 80015a0:	21000044 	addi	r4,r4,1
 80015a4:	217fffc4 	addi	r5,r4,-1
 80015a8:	e17ff915 	stw	r5,-28(fp)
 80015ac:	200b883a 	mov	r5,r4
 80015b0:	2817883a 	mov	r11,r5
 80015b4:	0019883a 	mov	r12,zero
 80015b8:	580ad77a 	srli	r5,r11,29
 80015bc:	601090fa 	slli	r8,r12,3
 80015c0:	2a10b03a 	or	r8,r5,r8
 80015c4:	580e90fa 	slli	r7,r11,3
 80015c8:	200b883a 	mov	r5,r4
 80015cc:	2813883a 	mov	r9,r5
 80015d0:	0015883a 	mov	r10,zero
 80015d4:	480ad77a 	srli	r5,r9,29
 80015d8:	500690fa 	slli	r3,r10,3
 80015dc:	28c6b03a 	or	r3,r5,r3
 80015e0:	480490fa 	slli	r2,r9,3
 80015e4:	2005883a 	mov	r2,r4
 80015e8:	108000c4 	addi	r2,r2,3
 80015ec:	1004d0ba 	srli	r2,r2,2
 80015f0:	1085883a 	add	r2,r2,r2
 80015f4:	1085883a 	add	r2,r2,r2
 80015f8:	d8b7c83a 	sub	sp,sp,r2
 80015fc:	d8800304 	addi	r2,sp,12
 8001600:	1005883a 	mov	r2,r2
 8001604:	e0bffa15 	stw	r2,-24(fp)
	temp[0] = reg + 2;
 8001608:	e0bffc03 	ldbu	r2,-16(fp)
 800160c:	10800084 	addi	r2,r2,2
 8001610:	1007883a 	mov	r3,r2
 8001614:	e0bffa17 	ldw	r2,-24(fp)
 8001618:	10c00005 	stb	r3,0(r2)

	for(int i=1; i< nbytes + 1; i++){
 800161c:	00800044 	movi	r2,1
 8001620:	e0bff815 	stw	r2,-32(fp)
 8001624:	00000c06 	br	8001658 <MAXbytes_wr+0xec>
		temp[i] = data[i-1];
 8001628:	e0bff817 	ldw	r2,-32(fp)
 800162c:	10bfffc4 	addi	r2,r2,-1
 8001630:	e0fffe17 	ldw	r3,-8(fp)
 8001634:	1885883a 	add	r2,r3,r2
 8001638:	10c00003 	ldbu	r3,0(r2)
 800163c:	e13ffa17 	ldw	r4,-24(fp)
 8001640:	e0bff817 	ldw	r2,-32(fp)
 8001644:	2085883a 	add	r2,r4,r2
 8001648:	10c00005 	stb	r3,0(r2)
	//return (data + nbytes);

	BYTE temp[nbytes+1];
	temp[0] = reg + 2;

	for(int i=1; i< nbytes + 1; i++){
 800164c:	e0bff817 	ldw	r2,-32(fp)
 8001650:	10800044 	addi	r2,r2,1
 8001654:	e0bff815 	stw	r2,-32(fp)
 8001658:	e0bffd03 	ldbu	r2,-12(fp)
 800165c:	10800044 	addi	r2,r2,1
 8001660:	e0fff817 	ldw	r3,-32(fp)
 8001664:	18bff016 	blt	r3,r2,8001628 <__alt_data_end+0xfc001628>



	// loop over nbytes and copy it into rest of temp

	int return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1, temp, 0,0,0);
 8001668:	e0bffd03 	ldbu	r2,-12(fp)
 800166c:	10800044 	addi	r2,r2,1
 8001670:	1007883a 	mov	r3,r2
 8001674:	e0bffa17 	ldw	r2,-24(fp)
 8001678:	d8000215 	stw	zero,8(sp)
 800167c:	d8000115 	stw	zero,4(sp)
 8001680:	d8000015 	stw	zero,0(sp)
 8001684:	100f883a 	mov	r7,r2
 8001688:	180d883a 	mov	r6,r3
 800168c:	000b883a 	mov	r5,zero
 8001690:	01003004 	movi	r4,192
 8001694:	8003cdc0 	call	8003cdc <alt_avalon_spi_command>
 8001698:	e0bffb15 	stw	r2,-20(fp)
	int return_code0 = alt_avalon_spi_command(SPI_0_BASE, 0, 1, temp, 0, 0, 0); // write the reg + 2

	int return_code1 = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes, data, 0, 0, 0);
	*/

	if(return_code < 0)
 800169c:	e0bffb17 	ldw	r2,-20(fp)
 80016a0:	1000030e 	bge	r2,zero,80016b0 <MAXbytes_wr+0x144>
		printf("Error");
 80016a4:	01020034 	movhi	r4,2048
 80016a8:	21149104 	addi	r4,r4,21060
 80016ac:	8002cd80 	call	8002cd8 <printf>

	return data + nbytes;
 80016b0:	e0bffd03 	ldbu	r2,-12(fp)
 80016b4:	e0fffe17 	ldw	r3,-8(fp)
 80016b8:	1885883a 	add	r2,r3,r2
 80016bc:	8037883a 	mov	sp,r16

}
 80016c0:	e6ffff04 	addi	sp,fp,-4
 80016c4:	dfc00217 	ldw	ra,8(sp)
 80016c8:	df000117 	ldw	fp,4(sp)
 80016cc:	dc000017 	ldw	r16,0(sp)
 80016d0:	dec00304 	addi	sp,sp,12
 80016d4:	f800283a 	ret

080016d8 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 80016d8:	defff804 	addi	sp,sp,-32
 80016dc:	dfc00715 	stw	ra,28(sp)
 80016e0:	df000615 	stw	fp,24(sp)
 80016e4:	df000604 	addi	fp,sp,24
 80016e8:	2005883a 	mov	r2,r4
 80016ec:	e0bfff05 	stb	r2,-4(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	alt_u8 val;
	BYTE temp[1] = {reg};
 80016f0:	e0bfff03 	ldbu	r2,-4(fp)
 80016f4:	e0bffe45 	stb	r2,-7(fp)
	int return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1, temp, 1, &val, 0);
 80016f8:	e0fffe44 	addi	r3,fp,-7
 80016fc:	d8000215 	stw	zero,8(sp)
 8001700:	e0bffe04 	addi	r2,fp,-8
 8001704:	d8800115 	stw	r2,4(sp)
 8001708:	00800044 	movi	r2,1
 800170c:	d8800015 	stw	r2,0(sp)
 8001710:	180f883a 	mov	r7,r3
 8001714:	01800044 	movi	r6,1
 8001718:	000b883a 	mov	r5,zero
 800171c:	01003004 	movi	r4,192
 8001720:	8003cdc0 	call	8003cdc <alt_avalon_spi_command>
 8001724:	e0bffd15 	stw	r2,-12(fp)

	if(return_code < 0)
 8001728:	e0bffd17 	ldw	r2,-12(fp)
 800172c:	1000030e 	bge	r2,zero,800173c <MAXreg_rd+0x64>
		printf("Error");
 8001730:	01020034 	movhi	r4,2048
 8001734:	21149104 	addi	r4,r4,21060
 8001738:	8002cd80 	call	8002cd8 <printf>

	return val;
 800173c:	e0bffe03 	ldbu	r2,-8(fp)

}
 8001740:	e037883a 	mov	sp,fp
 8001744:	dfc00117 	ldw	ra,4(sp)
 8001748:	df000017 	ldw	fp,0(sp)
 800174c:	dec00204 	addi	sp,sp,8
 8001750:	f800283a 	ret

08001754 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 8001754:	defff604 	addi	sp,sp,-40
 8001758:	dfc00915 	stw	ra,36(sp)
 800175c:	df000815 	stw	fp,32(sp)
 8001760:	df000804 	addi	fp,sp,32
 8001764:	2007883a 	mov	r3,r4
 8001768:	2805883a 	mov	r2,r5
 800176c:	e1bfff15 	stw	r6,-4(fp)
 8001770:	e0fffd05 	stb	r3,-12(fp)
 8001774:	e0bffe05 	stb	r2,-8(fp)
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE temp[1] = {reg};
 8001778:	e0bffd03 	ldbu	r2,-12(fp)
 800177c:	e0bffc05 	stb	r2,-16(fp)

	int return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1, temp, nbytes, data, 0);
 8001780:	e0bffe03 	ldbu	r2,-8(fp)
 8001784:	e13ffc04 	addi	r4,fp,-16
 8001788:	d8000215 	stw	zero,8(sp)
 800178c:	e0ffff17 	ldw	r3,-4(fp)
 8001790:	d8c00115 	stw	r3,4(sp)
 8001794:	d8800015 	stw	r2,0(sp)
 8001798:	200f883a 	mov	r7,r4
 800179c:	01800044 	movi	r6,1
 80017a0:	000b883a 	mov	r5,zero
 80017a4:	01003004 	movi	r4,192
 80017a8:	8003cdc0 	call	8003cdc <alt_avalon_spi_command>
 80017ac:	e0bffb15 	stw	r2,-20(fp)

	if(return_code < 0)
 80017b0:	e0bffb17 	ldw	r2,-20(fp)
 80017b4:	1000030e 	bge	r2,zero,80017c4 <MAXbytes_rd+0x70>
		printf("Error");
 80017b8:	01020034 	movhi	r4,2048
 80017bc:	21149104 	addi	r4,r4,21060
 80017c0:	8002cd80 	call	8002cd8 <printf>

	return data + nbytes;
 80017c4:	e0bffe03 	ldbu	r2,-8(fp)
 80017c8:	e0ffff17 	ldw	r3,-4(fp)
 80017cc:	1885883a 	add	r2,r3,r2


}
 80017d0:	e037883a 	mov	sp,fp
 80017d4:	dfc00117 	ldw	ra,4(sp)
 80017d8:	df000017 	ldw	fp,0(sp)
 80017dc:	dec00204 	addi	sp,sp,8
 80017e0:	f800283a 	ret

080017e4 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 80017e4:	defffd04 	addi	sp,sp,-12
 80017e8:	dfc00215 	stw	ra,8(sp)
 80017ec:	df000115 	stw	fp,4(sp)
 80017f0:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 80017f4:	0007883a 	mov	r3,zero
 80017f8:	00806404 	movi	r2,400
 80017fc:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 8001800:	010003f4 	movhi	r4,15
 8001804:	21109004 	addi	r4,r4,16960
 8001808:	80038740 	call	8003874 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 800180c:	00c00044 	movi	r3,1
 8001810:	00806404 	movi	r2,400
 8001814:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 8001818:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 800181c:	01400804 	movi	r5,32
 8001820:	01001e04 	movi	r4,120
 8001824:	80014e40 	call	80014e4 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 8001828:	000b883a 	mov	r5,zero
 800182c:	01001e04 	movi	r4,120
 8001830:	80014e40 	call	80014e4 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8001834:	00000806 	br	8001858 <MAX3421E_reset+0x74>
		tmp++;                                      //timeout after 256 attempts
 8001838:	e0bfff03 	ldbu	r2,-4(fp)
 800183c:	10800044 	addi	r2,r2,1
 8001840:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 8001844:	e0bfff03 	ldbu	r2,-4(fp)
 8001848:	1000031e 	bne	r2,zero,8001858 <MAX3421E_reset+0x74>
			printf("reset timeout!");
 800184c:	01020034 	movhi	r4,2048
 8001850:	21149304 	addi	r4,r4,21068
 8001854:	8002cd80 	call	8002cd8 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8001858:	01001a04 	movi	r4,104
 800185c:	80016d80 	call	80016d8 <MAXreg_rd>
 8001860:	10803fcc 	andi	r2,r2,255
 8001864:	1080004c 	andi	r2,r2,1
 8001868:	103ff326 	beq	r2,zero,8001838 <__alt_data_end+0xfc001838>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 800186c:	0001883a 	nop
 8001870:	e037883a 	mov	sp,fp
 8001874:	dfc00117 	ldw	ra,4(sp)
 8001878:	df000017 	ldw	fp,0(sp)
 800187c:	dec00204 	addi	sp,sp,8
 8001880:	f800283a 	ret

08001884 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 8001884:	defffe04 	addi	sp,sp,-8
 8001888:	df000115 	stw	fp,4(sp)
 800188c:	df000104 	addi	fp,sp,4
 8001890:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 8001894:	00800044 	movi	r2,1
}
 8001898:	e037883a 	mov	sp,fp
 800189c:	df000017 	ldw	fp,0(sp)
 80018a0:	dec00104 	addi	sp,sp,4
 80018a4:	f800283a 	ret

080018a8 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 80018a8:	defffd04 	addi	sp,sp,-12
 80018ac:	dfc00215 	stw	ra,8(sp)
 80018b0:	df000115 	stw	fp,4(sp)
 80018b4:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 80018b8:	01003e04 	movi	r4,248
 80018bc:	80016d80 	call	80016d8 <MAXreg_rd>
 80018c0:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 80018c4:	e0ffff03 	ldbu	r3,-4(fp)
 80018c8:	00bff004 	movi	r2,-64
 80018cc:	1884703a 	and	r2,r3,r2
 80018d0:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 80018d4:	e0bfff03 	ldbu	r2,-4(fp)
 80018d8:	10c01020 	cmpeqi	r3,r2,64
 80018dc:	1800221e 	bne	r3,zero,8001968 <MAX_busprobe+0xc0>
 80018e0:	10c01048 	cmpgei	r3,r2,65
 80018e4:	1800021e 	bne	r3,zero,80018f0 <MAX_busprobe+0x48>
 80018e8:	10003b26 	beq	r2,zero,80019d8 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80018ec:	00004a06 	br	8001a18 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 80018f0:	10c02020 	cmpeqi	r3,r2,128
 80018f4:	1800031e 	bne	r3,zero,8001904 <MAX_busprobe+0x5c>
 80018f8:	10803020 	cmpeqi	r2,r2,192
 80018fc:	1000331e 	bne	r2,zero,80019cc <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8001900:	00004506 	br	8001a18 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 8001904:	d0a00303 	ldbu	r2,-32756(gp)
 8001908:	10803fcc 	andi	r2,r2,255
 800190c:	108004e0 	cmpeqi	r2,r2,19
 8001910:	10003e1e 	bne	r2,zero,8001a0c <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8001914:	01003604 	movi	r4,216
 8001918:	80016d80 	call	80016d8 <MAXreg_rd>
 800191c:	10803fcc 	andi	r2,r2,255
 8001920:	1080008c 	andi	r2,r2,2
 8001924:	1000071e 	bne	r2,zero,8001944 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8001928:	01403244 	movi	r5,201
 800192c:	01003604 	movi	r4,216
 8001930:	80014e40 	call	80014e4 <MAXreg_wr>
				printf("Starting in full speed\n");
 8001934:	01020034 	movhi	r4,2048
 8001938:	21149704 	addi	r4,r4,21084
 800193c:	8002dc80 	call	8002dc8 <puts>
 8001940:	00000606 	br	800195c <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 8001944:	014032c4 	movi	r5,203
 8001948:	01003604 	movi	r4,216
 800194c:	80014e40 	call	80014e4 <MAXreg_wr>
				printf("Starting in low speed\n");
 8001950:	01020034 	movhi	r4,2048
 8001954:	21149d04 	addi	r4,r4,21108
 8001958:	8002dc80 	call	8002dc8 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 800195c:	00800404 	movi	r2,16
 8001960:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 8001964:	00002906 	br	8001a0c <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 8001968:	d0a00303 	ldbu	r2,-32756(gp)
 800196c:	10803fcc 	andi	r2,r2,255
 8001970:	108004e0 	cmpeqi	r2,r2,19
 8001974:	1000271e 	bne	r2,zero,8001a14 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8001978:	01003604 	movi	r4,216
 800197c:	80016d80 	call	80016d8 <MAXreg_rd>
 8001980:	10803fcc 	andi	r2,r2,255
 8001984:	1080008c 	andi	r2,r2,2
 8001988:	1000071e 	bne	r2,zero,80019a8 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 800198c:	014032c4 	movi	r5,203
 8001990:	01003604 	movi	r4,216
 8001994:	80014e40 	call	80014e4 <MAXreg_wr>
				printf("Starting in low speed\n");
 8001998:	01020034 	movhi	r4,2048
 800199c:	21149d04 	addi	r4,r4,21108
 80019a0:	8002dc80 	call	8002dc8 <puts>
 80019a4:	00000606 	br	80019c0 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 80019a8:	01403244 	movi	r5,201
 80019ac:	01003604 	movi	r4,216
 80019b0:	80014e40 	call	80014e4 <MAXreg_wr>
				printf("Starting in full speed\n");
 80019b4:	01020034 	movhi	r4,2048
 80019b8:	21149704 	addi	r4,r4,21084
 80019bc:	8002dc80 	call	8002dc8 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 80019c0:	00800404 	movi	r2,16
 80019c4:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 80019c8:	00001206 	br	8001a14 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 80019cc:	00800104 	movi	r2,4
 80019d0:	d0a00305 	stb	r2,-32756(gp)
		break;
 80019d4:	00001006 	br	8001a18 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 80019d8:	d0a00303 	ldbu	r2,-32756(gp)
 80019dc:	10803fcc 	andi	r2,r2,255
 80019e0:	10803c0c 	andi	r2,r2,240
 80019e4:	10000326 	beq	r2,zero,80019f4 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 80019e8:	00800044 	movi	r2,1
 80019ec:	d0a00305 	stb	r2,-32756(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 80019f0:	00000906 	br	8001a18 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 80019f4:	01403244 	movi	r5,201
 80019f8:	01003604 	movi	r4,216
 80019fc:	80014e40 	call	80014e4 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 8001a00:	008000c4 	movi	r2,3
 8001a04:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 8001a08:	00000306 	br	8001a18 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 8001a0c:	0001883a 	nop
 8001a10:	00000106 	br	8001a18 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 8001a14:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8001a18:	0001883a 	nop
 8001a1c:	e037883a 	mov	sp,fp
 8001a20:	dfc00117 	ldw	ra,4(sp)
 8001a24:	df000017 	ldw	fp,0(sp)
 8001a28:	dec00204 	addi	sp,sp,8
 8001a2c:	f800283a 	ret

08001a30 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 8001a30:	defffe04 	addi	sp,sp,-8
 8001a34:	dfc00115 	stw	ra,4(sp)
 8001a38:	df000015 	stw	fp,0(sp)
 8001a3c:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 8001a40:	01400684 	movi	r5,26
 8001a44:	01002204 	movi	r4,136
 8001a48:	80014e40 	call	80014e4 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 8001a4c:	80017e40 	call	80017e4 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 8001a50:	0009883a 	mov	r4,zero
 8001a54:	80018840 	call	8001884 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 8001a58:	01402004 	movi	r5,128
 8001a5c:	01002e04 	movi	r4,184
 8001a60:	80014e40 	call	80014e4 <MAXreg_wr>
	Vbus_power( ON);
 8001a64:	01000044 	movi	r4,1
 8001a68:	80018840 	call	8001884 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 8001a6c:	01403444 	movi	r5,209
 8001a70:	01003604 	movi	r4,216
 8001a74:	80014e40 	call	80014e4 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 8001a78:	01400804 	movi	r5,32
 8001a7c:	01003404 	movi	r4,208
 8001a80:	80014e40 	call	80014e4 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 8001a84:	01400104 	movi	r5,4
 8001a88:	01003a04 	movi	r4,232
 8001a8c:	80014e40 	call	80014e4 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 8001a90:	80018a80 	call	80018a8 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 8001a94:	01400804 	movi	r5,32
 8001a98:	01003204 	movi	r4,200
 8001a9c:	80014e40 	call	80014e4 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 8001aa0:	01400044 	movi	r5,1
 8001aa4:	01002004 	movi	r4,128
 8001aa8:	80014e40 	call	80014e4 <MAXreg_wr>
}
 8001aac:	0001883a 	nop
 8001ab0:	e037883a 	mov	sp,fp
 8001ab4:	dfc00117 	ldw	ra,4(sp)
 8001ab8:	df000017 	ldw	fp,0(sp)
 8001abc:	dec00204 	addi	sp,sp,8
 8001ac0:	f800283a 	ret

08001ac4 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 8001ac4:	defffe04 	addi	sp,sp,-8
 8001ac8:	dfc00115 	stw	ra,4(sp)
 8001acc:	df000015 	stw	fp,0(sp)
 8001ad0:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 8001ad4:	00806c04 	movi	r2,432
 8001ad8:	10800037 	ldwio	r2,0(r2)
 8001adc:	1000041e 	bne	r2,zero,8001af0 <MAX3421E_Task+0x2c>
		printf("MAX interrupt\n\r");
 8001ae0:	01020034 	movhi	r4,2048
 8001ae4:	2114a304 	addi	r4,r4,21132
 8001ae8:	8002cd80 	call	8002cd8 <printf>
		MaxIntHandler();
 8001aec:	8001b280 	call	8001b28 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 8001af0:	00806804 	movi	r2,416
 8001af4:	10800037 	ldwio	r2,0(r2)
 8001af8:	10800058 	cmpnei	r2,r2,1
 8001afc:	1000041e 	bne	r2,zero,8001b10 <MAX3421E_Task+0x4c>
		printf("GPX interrupt\n\r");
 8001b00:	01020034 	movhi	r4,2048
 8001b04:	2114a704 	addi	r4,r4,21148
 8001b08:	8002cd80 	call	8002cd8 <printf>
		MaxGpxHandler();
 8001b0c:	8001bf40 	call	8001bf4 <MaxGpxHandler>
	}
}
 8001b10:	0001883a 	nop
 8001b14:	e037883a 	mov	sp,fp
 8001b18:	dfc00117 	ldw	ra,4(sp)
 8001b1c:	df000017 	ldw	fp,0(sp)
 8001b20:	dec00204 	addi	sp,sp,8
 8001b24:	f800283a 	ret

08001b28 <MaxIntHandler>:

void MaxIntHandler(void) {
 8001b28:	defffd04 	addi	sp,sp,-12
 8001b2c:	dfc00215 	stw	ra,8(sp)
 8001b30:	df000115 	stw	fp,4(sp)
 8001b34:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 8001b38:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 8001b3c:	01003204 	movi	r4,200
 8001b40:	80016d80 	call	80016d8 <MAXreg_rd>
 8001b44:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 8001b48:	e0bfff43 	ldbu	r2,-3(fp)
 8001b4c:	100b883a 	mov	r5,r2
 8001b50:	01020034 	movhi	r4,2048
 8001b54:	2114ab04 	addi	r4,r4,21164
 8001b58:	8002cd80 	call	8002cd8 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 8001b5c:	e0bfff43 	ldbu	r2,-3(fp)
 8001b60:	1080100c 	andi	r2,r2,64
 8001b64:	10000326 	beq	r2,zero,8001b74 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 8001b68:	e0bfff03 	ldbu	r2,-4(fp)
 8001b6c:	10801014 	ori	r2,r2,64
 8001b70:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 8001b74:	e0bfff43 	ldbu	r2,-3(fp)
 8001b78:	1080080c 	andi	r2,r2,32
 8001b7c:	10000426 	beq	r2,zero,8001b90 <MaxIntHandler+0x68>
		MAX_busprobe();
 8001b80:	80018a80 	call	80018a8 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 8001b84:	e0bfff03 	ldbu	r2,-4(fp)
 8001b88:	10800814 	ori	r2,r2,32
 8001b8c:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 8001b90:	e0bfff43 	ldbu	r2,-3(fp)
 8001b94:	1080020c 	andi	r2,r2,8
 8001b98:	10000326 	beq	r2,zero,8001ba8 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 8001b9c:	000b883a 	mov	r5,zero
 8001ba0:	01000e04 	movi	r4,56
 8001ba4:	80014e40 	call	80014e4 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 8001ba8:	e0bfff43 	ldbu	r2,-3(fp)
 8001bac:	1080004c 	andi	r2,r2,1
 8001bb0:	10000626 	beq	r2,zero,8001bcc <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 8001bb4:	d0a00303 	ldbu	r2,-32756(gp)
 8001bb8:	10800044 	addi	r2,r2,1
 8001bbc:	d0a00305 	stb	r2,-32756(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 8001bc0:	e0bfff03 	ldbu	r2,-4(fp)
 8001bc4:	10800054 	ori	r2,r2,1
 8001bc8:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 8001bcc:	e0bfff03 	ldbu	r2,-4(fp)
 8001bd0:	100b883a 	mov	r5,r2
 8001bd4:	01003204 	movi	r4,200
 8001bd8:	80014e40 	call	80014e4 <MAXreg_wr>
}
 8001bdc:	0001883a 	nop
 8001be0:	e037883a 	mov	sp,fp
 8001be4:	dfc00117 	ldw	ra,4(sp)
 8001be8:	df000017 	ldw	fp,0(sp)
 8001bec:	dec00204 	addi	sp,sp,8
 8001bf0:	f800283a 	ret

08001bf4 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 8001bf4:	defffd04 	addi	sp,sp,-12
 8001bf8:	dfc00215 	stw	ra,8(sp)
 8001bfc:	df000115 	stw	fp,4(sp)
 8001c00:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 8001c04:	01002c04 	movi	r4,176
 8001c08:	80016d80 	call	80016d8 <MAXreg_rd>
 8001c0c:	e0bfff05 	stb	r2,-4(fp)
}
 8001c10:	0001883a 	nop
 8001c14:	e037883a 	mov	sp,fp
 8001c18:	dfc00117 	ldw	ra,4(sp)
 8001c1c:	df000017 	ldw	fp,0(sp)
 8001c20:	dec00204 	addi	sp,sp,8
 8001c24:	f800283a 	ret

08001c28 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 8001c28:	defff104 	addi	sp,sp,-60
 8001c2c:	dfc00e15 	stw	ra,56(sp)
 8001c30:	df000d15 	stw	fp,52(sp)
 8001c34:	df000d04 	addi	fp,sp,52
 8001c38:	2015883a 	mov	r10,r4
 8001c3c:	2813883a 	mov	r9,r5
 8001c40:	3011883a 	mov	r8,r6
 8001c44:	380d883a 	mov	r6,r7
 8001c48:	e1400217 	ldw	r5,8(fp)
 8001c4c:	e1000317 	ldw	r4,12(fp)
 8001c50:	e0c00417 	ldw	r3,16(fp)
 8001c54:	e0800517 	ldw	r2,20(fp)
 8001c58:	e2bff805 	stb	r10,-32(fp)
 8001c5c:	e27ff905 	stb	r9,-28(fp)
 8001c60:	e23ffa05 	stb	r8,-24(fp)
 8001c64:	e1bffb05 	stb	r6,-20(fp)
 8001c68:	e17ffc05 	stb	r5,-16(fp)
 8001c6c:	e13ffd05 	stb	r4,-12(fp)
 8001c70:	e0fffe0d 	sth	r3,-8(fp)
 8001c74:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 8001c78:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 8001c7c:	00800044 	movi	r2,1
 8001c80:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 8001c84:	e0800617 	ldw	r2,24(fp)
 8001c88:	1000011e 	bne	r2,zero,8001c90 <XferCtrlReq+0x68>
        datastage = 0;
 8001c8c:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 8001c90:	e0bff803 	ldbu	r2,-32(fp)
 8001c94:	100b883a 	mov	r5,r2
 8001c98:	01003804 	movi	r4,224
 8001c9c:	80014e40 	call	80014e4 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 8001ca0:	e0bffa03 	ldbu	r2,-24(fp)
 8001ca4:	10803fcc 	andi	r2,r2,255
 8001ca8:	1080201c 	xori	r2,r2,128
 8001cac:	10bfe004 	addi	r2,r2,-128
 8001cb0:	1000020e 	bge	r2,zero,8001cbc <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 8001cb4:	00800044 	movi	r2,1
 8001cb8:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8001cbc:	e0bffa03 	ldbu	r2,-24(fp)
 8001cc0:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 8001cc4:	e0bffb03 	ldbu	r2,-20(fp)
 8001cc8:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 8001ccc:	e0bffc03 	ldbu	r2,-16(fp)
 8001cd0:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 8001cd4:	e0bffd03 	ldbu	r2,-12(fp)
 8001cd8:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 8001cdc:	e0bffe0b 	ldhu	r2,-8(fp)
 8001ce0:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 8001ce4:	e0bfff0b 	ldhu	r2,-4(fp)
 8001ce8:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 8001cec:	e0bff584 	addi	r2,fp,-42
 8001cf0:	100d883a 	mov	r6,r2
 8001cf4:	01400204 	movi	r5,8
 8001cf8:	01000804 	movi	r4,32
 8001cfc:	800156c0 	call	800156c <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 8001d00:	e0bff903 	ldbu	r2,-28(fp)
 8001d04:	100b883a 	mov	r5,r2
 8001d08:	01000404 	movi	r4,16
 8001d0c:	8001ed00 	call	8001ed0 <XferDispatchPkt>
 8001d10:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 8001d14:	e0bff543 	ldbu	r2,-43(fp)
 8001d18:	10000226 	beq	r2,zero,8001d24 <XferCtrlReq+0xfc>
        return( rcode );
 8001d1c:	e0bff543 	ldbu	r2,-43(fp)
 8001d20:	00000f06 	br	8001d60 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 8001d24:	e0bff503 	ldbu	r2,-44(fp)
 8001d28:	1085883a 	add	r2,r2,r2
 8001d2c:	1087883a 	add	r3,r2,r2
 8001d30:	d0a00104 	addi	r2,gp,-32764
 8001d34:	1885883a 	add	r2,r3,r2
 8001d38:	10800017 	ldw	r2,0(r2)
 8001d3c:	e13ff803 	ldbu	r4,-32(fp)
 8001d40:	e17ff903 	ldbu	r5,-28(fp)
 8001d44:	e1bfff0b 	ldhu	r6,-4(fp)
 8001d48:	e0fff417 	ldw	r3,-48(fp)
 8001d4c:	d8c00015 	stw	r3,0(sp)
 8001d50:	e1c00617 	ldw	r7,24(fp)
 8001d54:	103ee83a 	callr	r2
 8001d58:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 8001d5c:	e0bff543 	ldbu	r2,-43(fp)
}
 8001d60:	e037883a 	mov	sp,fp
 8001d64:	dfc00117 	ldw	ra,4(sp)
 8001d68:	df000017 	ldw	fp,0(sp)
 8001d6c:	dec00204 	addi	sp,sp,8
 8001d70:	f800283a 	ret

08001d74 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001d74:	defff804 	addi	sp,sp,-32
 8001d78:	dfc00715 	stw	ra,28(sp)
 8001d7c:	df000615 	stw	fp,24(sp)
 8001d80:	df000604 	addi	fp,sp,24
 8001d84:	2807883a 	mov	r3,r5
 8001d88:	3005883a 	mov	r2,r6
 8001d8c:	e1ffff15 	stw	r7,-4(fp)
 8001d90:	e13ffc05 	stb	r4,-16(fp)
 8001d94:	e0fffd05 	stb	r3,-12(fp)
 8001d98:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 8001d9c:	e0800217 	ldw	r2,8(fp)
 8001da0:	10002826 	beq	r2,zero,8001e44 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8001da4:	e0fffc03 	ldbu	r3,-16(fp)
 8001da8:	00820034 	movhi	r2,2048
 8001dac:	1096b004 	addi	r2,r2,23232
 8001db0:	180690fa 	slli	r3,r3,3
 8001db4:	10c5883a 	add	r2,r2,r3
 8001db8:	10c00017 	ldw	r3,0(r2)
 8001dbc:	e0bffd03 	ldbu	r2,-12(fp)
 8001dc0:	100490fa 	slli	r2,r2,3
 8001dc4:	1885883a 	add	r2,r3,r2
 8001dc8:	00c00804 	movi	r3,32
 8001dcc:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 8001dd0:	e13ffc03 	ldbu	r4,-16(fp)
 8001dd4:	e17ffd03 	ldbu	r5,-12(fp)
 8001dd8:	e1bffe0b 	ldhu	r6,-8(fp)
 8001ddc:	e0fffc03 	ldbu	r3,-16(fp)
 8001de0:	00820034 	movhi	r2,2048
 8001de4:	1096b004 	addi	r2,r2,23232
 8001de8:	180690fa 	slli	r3,r3,3
 8001dec:	10c5883a 	add	r2,r2,r3
 8001df0:	10c00017 	ldw	r3,0(r2)
 8001df4:	e0bffd03 	ldbu	r2,-12(fp)
 8001df8:	100490fa 	slli	r2,r2,3
 8001dfc:	1885883a 	add	r2,r3,r2
 8001e00:	1080008b 	ldhu	r2,2(r2)
 8001e04:	10803fcc 	andi	r2,r2,255
 8001e08:	d8800015 	stw	r2,0(sp)
 8001e0c:	e1ffff17 	ldw	r7,-4(fp)
 8001e10:	800204c0 	call	800204c <XferInTransfer>
 8001e14:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 8001e18:	e0bffb03 	ldbu	r2,-20(fp)
 8001e1c:	10000226 	beq	r2,zero,8001e28 <XferCtrlData+0xb4>
        return( rcode );
 8001e20:	e0bffb03 	ldbu	r2,-20(fp)
 8001e24:	00000806 	br	8001e48 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001e28:	e0bffd03 	ldbu	r2,-12(fp)
 8001e2c:	100b883a 	mov	r5,r2
 8001e30:	01002804 	movi	r4,160
 8001e34:	8001ed00 	call	8001ed0 <XferDispatchPkt>
 8001e38:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 8001e3c:	e0bffb03 	ldbu	r2,-20(fp)
 8001e40:	00000106 	br	8001e48 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 8001e44:	00bfffc4 	movi	r2,-1
    }
}
 8001e48:	e037883a 	mov	sp,fp
 8001e4c:	dfc00117 	ldw	ra,4(sp)
 8001e50:	df000017 	ldw	fp,0(sp)
 8001e54:	dec00204 	addi	sp,sp,8
 8001e58:	f800283a 	ret

08001e5c <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001e5c:	defff904 	addi	sp,sp,-28
 8001e60:	dfc00615 	stw	ra,24(sp)
 8001e64:	df000515 	stw	fp,20(sp)
 8001e68:	df000504 	addi	fp,sp,20
 8001e6c:	2807883a 	mov	r3,r5
 8001e70:	3005883a 	mov	r2,r6
 8001e74:	e1ffff15 	stw	r7,-4(fp)
 8001e78:	e13ffc05 	stb	r4,-16(fp)
 8001e7c:	e0fffd05 	stb	r3,-12(fp)
 8001e80:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 8001e84:	e0800217 	ldw	r2,8(fp)
 8001e88:	10000626 	beq	r2,zero,8001ea4 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001e8c:	e0bffd03 	ldbu	r2,-12(fp)
 8001e90:	100b883a 	mov	r5,r2
 8001e94:	01002804 	movi	r4,160
 8001e98:	8001ed00 	call	8001ed0 <XferDispatchPkt>
 8001e9c:	e0bffb05 	stb	r2,-20(fp)
 8001ea0:	00000506 	br	8001eb8 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 8001ea4:	e0bffd03 	ldbu	r2,-12(fp)
 8001ea8:	100b883a 	mov	r5,r2
 8001eac:	01002004 	movi	r4,128
 8001eb0:	8001ed00 	call	8001ed0 <XferDispatchPkt>
 8001eb4:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 8001eb8:	e0bffb03 	ldbu	r2,-20(fp)
}
 8001ebc:	e037883a 	mov	sp,fp
 8001ec0:	dfc00117 	ldw	ra,4(sp)
 8001ec4:	df000017 	ldw	fp,0(sp)
 8001ec8:	dec00204 	addi	sp,sp,8
 8001ecc:	f800283a 	ret

08001ed0 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 8001ed0:	defff904 	addi	sp,sp,-28
 8001ed4:	dfc00615 	stw	ra,24(sp)
 8001ed8:	df000515 	stw	fp,20(sp)
 8001edc:	df000504 	addi	fp,sp,20
 8001ee0:	2007883a 	mov	r3,r4
 8001ee4:	2805883a 	mov	r2,r5
 8001ee8:	e0fffe05 	stb	r3,-8(fp)
 8001eec:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001ef0:	d0a0e217 	ldw	r2,-31864(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 8001ef4:	0140fa04 	movi	r5,1000
 8001ef8:	1009883a 	mov	r4,r2
 8001efc:	8002c740 	call	8002c74 <__mulsi3>
 8001f00:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001f04:	d0a0e117 	ldw	r2,-31868(gp)
 8001f08:	100b883a 	mov	r5,r2
 8001f0c:	1809883a 	mov	r4,r3
 8001f10:	8002bb80 	call	8002bb8 <__udivsi3>
 8001f14:	1084e204 	addi	r2,r2,5000
 8001f18:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 8001f1c:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 8001f20:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8001f24:	e0fffe03 	ldbu	r3,-8(fp)
 8001f28:	e0bfff03 	ldbu	r2,-4(fp)
 8001f2c:	1884b03a 	or	r2,r3,r2
 8001f30:	10803fcc 	andi	r2,r2,255
 8001f34:	100b883a 	mov	r5,r2
 8001f38:	01003c04 	movi	r4,240
 8001f3c:	80014e40 	call	80014e4 <MAXreg_wr>
        rcode = 0xff;
 8001f40:	00bfffc4 	movi	r2,-1
 8001f44:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001f48:	00000d06 	br	8001f80 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 8001f4c:	01003204 	movi	r4,200
 8001f50:	80016d80 	call	80016d8 <MAXreg_rd>
 8001f54:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 8001f58:	e0bffd03 	ldbu	r2,-12(fp)
 8001f5c:	10803fcc 	andi	r2,r2,255
 8001f60:	1080201c 	xori	r2,r2,128
 8001f64:	10bfe004 	addi	r2,r2,-128
 8001f68:	1000050e 	bge	r2,zero,8001f80 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8001f6c:	01402004 	movi	r5,128
 8001f70:	01003204 	movi	r4,200
 8001f74:	80014e40 	call	80014e4 <MAXreg_wr>
                rcode = 0x00;
 8001f78:	e03ffb05 	stb	zero,-20(fp)
                break;
 8001f7c:	00000c06 	br	8001fb0 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001f80:	d0a0e217 	ldw	r2,-31864(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001f84:	0140fa04 	movi	r5,1000
 8001f88:	1009883a 	mov	r4,r2
 8001f8c:	8002c740 	call	8002c74 <__mulsi3>
 8001f90:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001f94:	d0a0e117 	ldw	r2,-31868(gp)
 8001f98:	100b883a 	mov	r5,r2
 8001f9c:	1809883a 	mov	r4,r3
 8001fa0:	8002bb80 	call	8002bb8 <__udivsi3>
 8001fa4:	1007883a 	mov	r3,r2
 8001fa8:	e0bffc17 	ldw	r2,-16(fp)
 8001fac:	18bfe736 	bltu	r3,r2,8001f4c <__alt_data_end+0xfc001f4c>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8001fb0:	e0bffb03 	ldbu	r2,-20(fp)
 8001fb4:	10000226 	beq	r2,zero,8001fc0 <XferDispatchPkt+0xf0>
            return( rcode );
 8001fb8:	e0bffb03 	ldbu	r2,-20(fp)
 8001fbc:	00001e06 	br	8002038 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8001fc0:	01003e04 	movi	r4,248
 8001fc4:	80016d80 	call	80016d8 <MAXreg_rd>
 8001fc8:	108003cc 	andi	r2,r2,15
 8001fcc:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 8001fd0:	e0bffb03 	ldbu	r2,-20(fp)
 8001fd4:	10800118 	cmpnei	r2,r2,4
 8001fd8:	1000071e 	bne	r2,zero,8001ff8 <XferDispatchPkt+0x128>
            nak_count++;
 8001fdc:	e0bffb83 	ldbu	r2,-18(fp)
 8001fe0:	10800044 	addi	r2,r2,1
 8001fe4:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 8001fe8:	e0bffb83 	ldbu	r2,-18(fp)
 8001fec:	10803218 	cmpnei	r2,r2,200
 8001ff0:	10000b1e 	bne	r2,zero,8002020 <XferDispatchPkt+0x150>
                break;
 8001ff4:	00000f06 	br	8002034 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8001ff8:	e0bffb03 	ldbu	r2,-20(fp)
 8001ffc:	10800398 	cmpnei	r2,r2,14
 8002000:	1000091e 	bne	r2,zero,8002028 <XferDispatchPkt+0x158>
            retry_count++;
 8002004:	e0bffb43 	ldbu	r2,-19(fp)
 8002008:	10800044 	addi	r2,r2,1
 800200c:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8002010:	e0bffb47 	ldb	r2,-19(fp)
 8002014:	108000d8 	cmpnei	r2,r2,3
 8002018:	10000526 	beq	r2,zero,8002030 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 800201c:	00000106 	br	8002024 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 8002020:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 8002024:	003fbf06 	br	8001f24 <__alt_data_end+0xfc001f24>
            }
            else {
                continue;
            }
        }
        else break;
 8002028:	0001883a 	nop
 800202c:	00000106 	br	8002034 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 8002030:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 8002034:	e0bffb03 	ldbu	r2,-20(fp)
}
 8002038:	e037883a 	mov	sp,fp
 800203c:	dfc00117 	ldw	ra,4(sp)
 8002040:	df000017 	ldw	fp,0(sp)
 8002044:	dec00204 	addi	sp,sp,8
 8002048:	f800283a 	ret

0800204c <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 800204c:	defff804 	addi	sp,sp,-32
 8002050:	dfc00715 	stw	ra,28(sp)
 8002054:	df000615 	stw	fp,24(sp)
 8002058:	df000604 	addi	fp,sp,24
 800205c:	2011883a 	mov	r8,r4
 8002060:	2809883a 	mov	r4,r5
 8002064:	3007883a 	mov	r3,r6
 8002068:	e1fffe15 	stw	r7,-8(fp)
 800206c:	e0800217 	ldw	r2,8(fp)
 8002070:	e23ffb05 	stb	r8,-20(fp)
 8002074:	e13ffc05 	stb	r4,-16(fp)
 8002078:	e0fffd0d 	sth	r3,-12(fp)
 800207c:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8002080:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 8002084:	e0fffb03 	ldbu	r3,-20(fp)
 8002088:	00820034 	movhi	r2,2048
 800208c:	1096b004 	addi	r2,r2,23232
 8002090:	180690fa 	slli	r3,r3,3
 8002094:	10c5883a 	add	r2,r2,r3
 8002098:	10c00017 	ldw	r3,0(r2)
 800209c:	e0bffc03 	ldbu	r2,-16(fp)
 80020a0:	100490fa 	slli	r2,r2,3
 80020a4:	1885883a 	add	r2,r3,r2
 80020a8:	10800183 	ldbu	r2,6(r2)
 80020ac:	10803fcc 	andi	r2,r2,255
 80020b0:	100b883a 	mov	r5,r2
 80020b4:	01003a04 	movi	r4,232
 80020b8:	80014e40 	call	80014e4 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 80020bc:	e0bffc03 	ldbu	r2,-16(fp)
 80020c0:	100b883a 	mov	r5,r2
 80020c4:	0009883a 	mov	r4,zero
 80020c8:	8001ed00 	call	8001ed0 <XferDispatchPkt>
 80020cc:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 80020d0:	e0bffa83 	ldbu	r2,-22(fp)
 80020d4:	10000226 	beq	r2,zero,80020e0 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 80020d8:	e0bffa83 	ldbu	r2,-22(fp)
 80020dc:	00003a06 	br	80021c8 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 80020e0:	01003204 	movi	r4,200
 80020e4:	80016d80 	call	80016d8 <MAXreg_rd>
 80020e8:	10803fcc 	andi	r2,r2,255
 80020ec:	1080010c 	andi	r2,r2,4
 80020f0:	1000021e 	bne	r2,zero,80020fc <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 80020f4:	00bffc04 	movi	r2,-16
 80020f8:	00003306 	br	80021c8 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 80020fc:	01000c04 	movi	r4,48
 8002100:	80016d80 	call	80016d8 <MAXreg_rd>
 8002104:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 8002108:	e0bffac3 	ldbu	r2,-21(fp)
 800210c:	e1bffe17 	ldw	r6,-8(fp)
 8002110:	100b883a 	mov	r5,r2
 8002114:	01000204 	movi	r4,8
 8002118:	80017540 	call	8001754 <MAXbytes_rd>
 800211c:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8002120:	01400104 	movi	r5,4
 8002124:	01003204 	movi	r4,200
 8002128:	80014e40 	call	80014e4 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 800212c:	e0fffac3 	ldbu	r3,-21(fp)
 8002130:	e0bffa0b 	ldhu	r2,-24(fp)
 8002134:	1885883a 	add	r2,r3,r2
 8002138:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 800213c:	e0fffac3 	ldbu	r3,-21(fp)
 8002140:	e0bfff03 	ldbu	r2,-4(fp)
 8002144:	18800336 	bltu	r3,r2,8002154 <XferInTransfer+0x108>
 8002148:	e0fffa0b 	ldhu	r3,-24(fp)
 800214c:	e0bffd0b 	ldhu	r2,-12(fp)
 8002150:	18bfda36 	bltu	r3,r2,80020bc <__alt_data_end+0xfc0020bc>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8002154:	01003e04 	movi	r4,248
 8002158:	80016d80 	call	80016d8 <MAXreg_rd>
 800215c:	10803fcc 	andi	r2,r2,255
 8002160:	1080040c 	andi	r2,r2,16
 8002164:	10000c26 	beq	r2,zero,8002198 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8002168:	e0fffb03 	ldbu	r3,-20(fp)
 800216c:	00820034 	movhi	r2,2048
 8002170:	1096b004 	addi	r2,r2,23232
 8002174:	180690fa 	slli	r3,r3,3
 8002178:	10c5883a 	add	r2,r2,r3
 800217c:	10c00017 	ldw	r3,0(r2)
 8002180:	e0bffc03 	ldbu	r2,-16(fp)
 8002184:	100490fa 	slli	r2,r2,3
 8002188:	1885883a 	add	r2,r3,r2
 800218c:	00c00804 	movi	r3,32
 8002190:	10c00185 	stb	r3,6(r2)
 8002194:	00000b06 	br	80021c4 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 8002198:	e0fffb03 	ldbu	r3,-20(fp)
 800219c:	00820034 	movhi	r2,2048
 80021a0:	1096b004 	addi	r2,r2,23232
 80021a4:	180690fa 	slli	r3,r3,3
 80021a8:	10c5883a 	add	r2,r2,r3
 80021ac:	10c00017 	ldw	r3,0(r2)
 80021b0:	e0bffc03 	ldbu	r2,-16(fp)
 80021b4:	100490fa 	slli	r2,r2,3
 80021b8:	1885883a 	add	r2,r3,r2
 80021bc:	00c00404 	movi	r3,16
 80021c0:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 80021c4:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 80021c8:	e037883a 	mov	sp,fp
 80021cc:	dfc00117 	ldw	ra,4(sp)
 80021d0:	df000017 	ldw	fp,0(sp)
 80021d4:	dec00204 	addi	sp,sp,8
 80021d8:	f800283a 	ret

080021dc <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 80021dc:	defffe04 	addi	sp,sp,-8
 80021e0:	df000115 	stw	fp,4(sp)
 80021e4:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 80021e8:	e03fff05 	stb	zero,-4(fp)
 80021ec:	00001006 	br	8002230 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 80021f0:	e0ffff03 	ldbu	r3,-4(fp)
 80021f4:	00820034 	movhi	r2,2048
 80021f8:	1096b004 	addi	r2,r2,23232
 80021fc:	180690fa 	slli	r3,r3,3
 8002200:	10c5883a 	add	r2,r2,r3
 8002204:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 8002208:	e0ffff03 	ldbu	r3,-4(fp)
 800220c:	00820034 	movhi	r2,2048
 8002210:	1096b004 	addi	r2,r2,23232
 8002214:	180690fa 	slli	r3,r3,3
 8002218:	10c5883a 	add	r2,r2,r3
 800221c:	10800104 	addi	r2,r2,4
 8002220:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8002224:	e0bfff03 	ldbu	r2,-4(fp)
 8002228:	10800044 	addi	r2,r2,1
 800222c:	e0bfff05 	stb	r2,-4(fp)
 8002230:	e0bfff03 	ldbu	r2,-4(fp)
 8002234:	10800270 	cmpltui	r2,r2,9
 8002238:	103fed1e 	bne	r2,zero,80021f0 <__alt_data_end+0xfc0021f0>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 800223c:	00820034 	movhi	r2,2048
 8002240:	1096b004 	addi	r2,r2,23232
 8002244:	d0e0d804 	addi	r3,gp,-31904
 8002248:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 800224c:	d020d88d 	sth	zero,-31902(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 8002250:	00801004 	movi	r2,64
 8002254:	d0a0d945 	stb	r2,-31899(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8002258:	00800404 	movi	r2,16
 800225c:	d0a0d985 	stb	r2,-31898(gp)
}
 8002260:	0001883a 	nop
 8002264:	e037883a 	mov	sp,fp
 8002268:	df000017 	ldw	fp,0(sp)
 800226c:	dec00104 	addi	sp,sp,4
 8002270:	f800283a 	ret

08002274 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8002274:	deffb204 	addi	sp,sp,-312
 8002278:	dfc04d15 	stw	ra,308(sp)
 800227c:	df004c15 	stw	fp,304(sp)
 8002280:	dc004b15 	stw	r16,300(sp)
 8002284:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8002288:	d0a00303 	ldbu	r2,-32756(gp)
 800228c:	10803fcc 	andi	r2,r2,255
 8002290:	10803c0c 	andi	r2,r2,240
 8002294:	10c00820 	cmpeqi	r3,r2,32
 8002298:	1801121e 	bne	r3,zero,80026e4 <USB_Task+0x470>
 800229c:	10c00848 	cmpgei	r3,r2,33
 80022a0:	1800041e 	bne	r3,zero,80022b4 <USB_Task+0x40>
 80022a4:	10000a26 	beq	r2,zero,80022d0 <USB_Task+0x5c>
 80022a8:	10800420 	cmpeqi	r2,r2,16
 80022ac:	10001b1e 	bne	r2,zero,800231c <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 80022b0:	00017a06 	br	800289c <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 80022b4:	10c01020 	cmpeqi	r3,r2,64
 80022b8:	18016f1e 	bne	r3,zero,8002878 <USB_Task+0x604>
 80022bc:	10c03fe0 	cmpeqi	r3,r2,255
 80022c0:	18016f1e 	bne	r3,zero,8002880 <USB_Task+0x60c>
 80022c4:	10800c20 	cmpeqi	r2,r2,48
 80022c8:	1001441e 	bne	r2,zero,80027dc <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 80022cc:	00017306 	br	800289c <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 80022d0:	d0a00303 	ldbu	r2,-32756(gp)
 80022d4:	10803fcc 	andi	r2,r2,255
 80022d8:	10c000e0 	cmpeqi	r3,r2,3
 80022dc:	1800091e 	bne	r3,zero,8002304 <USB_Task+0x90>
 80022e0:	10c00120 	cmpeqi	r3,r2,4
 80022e4:	18000b1e 	bne	r3,zero,8002314 <USB_Task+0xa0>
 80022e8:	10800060 	cmpeqi	r2,r2,1
 80022ec:	1000011e 	bne	r2,zero,80022f4 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 80022f0:	00016a06 	br	800289c <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 80022f4:	80021dc0 	call	80021dc <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 80022f8:	008000c4 	movi	r2,3
 80022fc:	d0a00305 	stb	r2,-32756(gp)
                    break;
 8002300:	00000506 	br	8002318 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 8002304:	01400104 	movi	r5,4
 8002308:	01003a04 	movi	r4,232
 800230c:	80014e40 	call	80014e4 <MAXreg_wr>
                    break;
 8002310:	00000106 	br	8002318 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 8002314:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8002318:	00016006 	br	800289c <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 800231c:	d0a00303 	ldbu	r2,-32756(gp)
 8002320:	10803fcc 	andi	r2,r2,255
 8002324:	10bffc04 	addi	r2,r2,-16
 8002328:	10c001a8 	cmpgeui	r3,r2,6
 800232c:	1801561e 	bne	r3,zero,8002888 <USB_Task+0x614>
 8002330:	100690ba 	slli	r3,r2,2
 8002334:	00820034 	movhi	r2,2048
 8002338:	1088d204 	addi	r2,r2,9032
 800233c:	1885883a 	add	r2,r3,r2
 8002340:	10800017 	ldw	r2,0(r2)
 8002344:	1000683a 	jmp	r2
 8002348:	08002360 	cmpeqi	zero,at,141
 800234c:	08002398 	cmpnei	zero,at,142
 8002350:	080023d4 	ori	zero,at,143
 8002354:	080023f8 	rdprs	zero,at,143
 8002358:	08002438 	rdprs	zero,at,144
 800235c:	0800244c 	andi	zero,at,145
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8002360:	d0a0e217 	ldw	r2,-31864(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 8002364:	0140fa04 	movi	r5,1000
 8002368:	1009883a 	mov	r4,r2
 800236c:	8002c740 	call	8002c74 <__mulsi3>
 8002370:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8002374:	d0a0e117 	ldw	r2,-31868(gp)
 8002378:	100b883a 	mov	r5,r2
 800237c:	1809883a 	mov	r4,r3
 8002380:	8002bb80 	call	8002bb8 <__udivsi3>
 8002384:	10803204 	addi	r2,r2,200
 8002388:	d0a0db15 	stw	r2,-31892(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 800238c:	00800444 	movi	r2,17
 8002390:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_STATE_ATTACHED )
 8002394:	0000d206 	br	80026e0 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8002398:	d0a0e217 	ldw	r2,-31864(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 800239c:	0140fa04 	movi	r5,1000
 80023a0:	1009883a 	mov	r4,r2
 80023a4:	8002c740 	call	8002c74 <__mulsi3>
 80023a8:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80023ac:	d0a0e117 	ldw	r2,-31868(gp)
 80023b0:	100b883a 	mov	r5,r2
 80023b4:	1809883a 	mov	r4,r3
 80023b8:	8002bb80 	call	8002bb8 <__udivsi3>
 80023bc:	1007883a 	mov	r3,r2
 80023c0:	d0a0db17 	ldw	r2,-31892(gp)
 80023c4:	10c0c32e 	bgeu	r2,r3,80026d4 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 80023c8:	00800484 	movi	r2,18
 80023cc:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 80023d0:	0000c006 	br	80026d4 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 80023d4:	01400044 	movi	r5,1
 80023d8:	01003204 	movi	r4,200
 80023dc:	80014e40 	call	80014e4 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 80023e0:	01400044 	movi	r5,1
 80023e4:	01003a04 	movi	r4,232
 80023e8:	80014e40 	call	80014e4 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 80023ec:	008004c4 	movi	r2,19
 80023f0:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 80023f4:	0000ba06 	br	80026e0 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 80023f8:	01003a04 	movi	r4,232
 80023fc:	80016d80 	call	80016d8 <MAXreg_rd>
 8002400:	10803fcc 	andi	r2,r2,255
 8002404:	1080004c 	andi	r2,r2,1
 8002408:	1000b41e 	bne	r2,zero,80026dc <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 800240c:	01003604 	movi	r4,216
 8002410:	80016d80 	call	80016d8 <MAXreg_rd>
 8002414:	10800214 	ori	r2,r2,8
 8002418:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 800241c:	e0bfb943 	ldbu	r2,-283(fp)
 8002420:	100b883a 	mov	r5,r2
 8002424:	01003604 	movi	r4,216
 8002428:	80014e40 	call	80014e4 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 800242c:	00800504 	movi	r2,20
 8002430:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002434:	0000a906 	br	80026dc <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 8002438:	01003204 	movi	r4,200
 800243c:	80016d80 	call	80016d8 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8002440:	00800544 	movi	r2,21
 8002444:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 8002448:	0000a506 	br	80026e0 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 800244c:	00820034 	movhi	r2,2048
 8002450:	1096b004 	addi	r2,r2,23232
 8002454:	10800017 	ldw	r2,0(r2)
 8002458:	00c00204 	movi	r3,8
 800245c:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 8002460:	e0bfba04 	addi	r2,fp,-280
 8002464:	d8800415 	stw	r2,16(sp)
 8002468:	00800204 	movi	r2,8
 800246c:	d8800315 	stw	r2,12(sp)
 8002470:	d8000215 	stw	zero,8(sp)
 8002474:	00800044 	movi	r2,1
 8002478:	d8800115 	stw	r2,4(sp)
 800247c:	d8000015 	stw	zero,0(sp)
 8002480:	01c00184 	movi	r7,6
 8002484:	01802004 	movi	r6,128
 8002488:	000b883a 	mov	r5,zero
 800248c:	0009883a 	mov	r4,zero
 8002490:	8001c280 	call	8001c28 <XferCtrlReq>
 8002494:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8002498:	e0bfb983 	ldbu	r2,-282(fp)
 800249c:	1000861e 	bne	r2,zero,80026b8 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 80024a0:	00820034 	movhi	r2,2048
 80024a4:	1096b004 	addi	r2,r2,23232
 80024a8:	10800017 	ldw	r2,0(r2)
 80024ac:	e0ffbbc3 	ldbu	r3,-273(fp)
 80024b0:	18c03fcc 	andi	r3,r3,255
 80024b4:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 80024b8:	e0bfba03 	ldbu	r2,-280(fp)
 80024bc:	10803fcc 	andi	r2,r2,255
 80024c0:	e0ffba04 	addi	r3,fp,-280
 80024c4:	d8c00415 	stw	r3,16(sp)
 80024c8:	d8800315 	stw	r2,12(sp)
 80024cc:	d8000215 	stw	zero,8(sp)
 80024d0:	00800044 	movi	r2,1
 80024d4:	d8800115 	stw	r2,4(sp)
 80024d8:	d8000015 	stw	zero,0(sp)
 80024dc:	01c00184 	movi	r7,6
 80024e0:	01802004 	movi	r6,128
 80024e4:	000b883a 	mov	r5,zero
 80024e8:	0009883a 	mov	r4,zero
 80024ec:	8001c280 	call	8001c28 <XferCtrlReq>
 80024f0:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 80024f4:	e0bfbd83 	ldbu	r2,-266(fp)
 80024f8:	10803fcc 	andi	r2,r2,255
 80024fc:	10003426 	beq	r2,zero,80025d0 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002500:	e0bfbd83 	ldbu	r2,-266(fp)
 8002504:	10803fcc 	andi	r2,r2,255
 8002508:	e0ffbe84 	addi	r3,fp,-262
 800250c:	d8c00415 	stw	r3,16(sp)
 8002510:	00c00084 	movi	r3,2
 8002514:	d8c00315 	stw	r3,12(sp)
 8002518:	00c10244 	movi	r3,1033
 800251c:	d8c00215 	stw	r3,8(sp)
 8002520:	00c000c4 	movi	r3,3
 8002524:	d8c00115 	stw	r3,4(sp)
 8002528:	d8800015 	stw	r2,0(sp)
 800252c:	01c00184 	movi	r7,6
 8002530:	01802004 	movi	r6,128
 8002534:	000b883a 	mov	r5,zero
 8002538:	0009883a 	mov	r4,zero
 800253c:	8001c280 	call	8001c28 <XferCtrlReq>
 8002540:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002544:	e0bfbd83 	ldbu	r2,-266(fp)
 8002548:	10803fcc 	andi	r2,r2,255
 800254c:	e0ffbe83 	ldbu	r3,-262(fp)
 8002550:	18c03fcc 	andi	r3,r3,255
 8002554:	e13fbe84 	addi	r4,fp,-262
 8002558:	d9000415 	stw	r4,16(sp)
 800255c:	d8c00315 	stw	r3,12(sp)
 8002560:	00c10244 	movi	r3,1033
 8002564:	d8c00215 	stw	r3,8(sp)
 8002568:	00c000c4 	movi	r3,3
 800256c:	d8c00115 	stw	r3,4(sp)
 8002570:	d8800015 	stw	r2,0(sp)
 8002574:	01c00184 	movi	r7,6
 8002578:	01802004 	movi	r6,128
 800257c:	000b883a 	mov	r5,zero
 8002580:	0009883a 	mov	r4,zero
 8002584:	8001c280 	call	8001c28 <XferCtrlReq>
 8002588:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 800258c:	e0bfbd83 	ldbu	r2,-266(fp)
 8002590:	14003fcc 	andi	r16,r2,255
 8002594:	e0bfbe83 	ldbu	r2,-262(fp)
 8002598:	10803fcc 	andi	r2,r2,255
 800259c:	1004d07a 	srli	r2,r2,1
 80025a0:	10bfffc4 	addi	r2,r2,-1
 80025a4:	10c03fcc 	andi	r3,r2,255
 80025a8:	e0bfbe84 	addi	r2,fp,-262
 80025ac:	10800084 	addi	r2,r2,2
 80025b0:	180b883a 	mov	r5,r3
 80025b4:	1009883a 	mov	r4,r2
 80025b8:	8002a3c0 	call	8002a3c <ConvUTF8ToStr>
 80025bc:	100d883a 	mov	r6,r2
 80025c0:	800b883a 	mov	r5,r16
 80025c4:	01020034 	movhi	r4,2048
 80025c8:	2114ae04 	addi	r4,r4,21176
 80025cc:	8002cd80 	call	8002cd8 <printf>
                		}
                		if (buf.iProduct != 0)
 80025d0:	e0bfbdc3 	ldbu	r2,-265(fp)
 80025d4:	10803fcc 	andi	r2,r2,255
 80025d8:	10003426 	beq	r2,zero,80026ac <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 80025dc:	e0bfbdc3 	ldbu	r2,-265(fp)
 80025e0:	10803fcc 	andi	r2,r2,255
 80025e4:	e0ffbe84 	addi	r3,fp,-262
 80025e8:	d8c00415 	stw	r3,16(sp)
 80025ec:	00c00084 	movi	r3,2
 80025f0:	d8c00315 	stw	r3,12(sp)
 80025f4:	00c10244 	movi	r3,1033
 80025f8:	d8c00215 	stw	r3,8(sp)
 80025fc:	00c000c4 	movi	r3,3
 8002600:	d8c00115 	stw	r3,4(sp)
 8002604:	d8800015 	stw	r2,0(sp)
 8002608:	01c00184 	movi	r7,6
 800260c:	01802004 	movi	r6,128
 8002610:	000b883a 	mov	r5,zero
 8002614:	0009883a 	mov	r4,zero
 8002618:	8001c280 	call	8001c28 <XferCtrlReq>
 800261c:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8002620:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002624:	10803fcc 	andi	r2,r2,255
 8002628:	e0ffbe83 	ldbu	r3,-262(fp)
 800262c:	18c03fcc 	andi	r3,r3,255
 8002630:	e13fbe84 	addi	r4,fp,-262
 8002634:	d9000415 	stw	r4,16(sp)
 8002638:	d8c00315 	stw	r3,12(sp)
 800263c:	00c10244 	movi	r3,1033
 8002640:	d8c00215 	stw	r3,8(sp)
 8002644:	00c000c4 	movi	r3,3
 8002648:	d8c00115 	stw	r3,4(sp)
 800264c:	d8800015 	stw	r2,0(sp)
 8002650:	01c00184 	movi	r7,6
 8002654:	01802004 	movi	r6,128
 8002658:	000b883a 	mov	r5,zero
 800265c:	0009883a 	mov	r4,zero
 8002660:	8001c280 	call	8001c28 <XferCtrlReq>
 8002664:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8002668:	e0bfbdc3 	ldbu	r2,-265(fp)
 800266c:	14003fcc 	andi	r16,r2,255
 8002670:	e0bfbe83 	ldbu	r2,-262(fp)
 8002674:	10803fcc 	andi	r2,r2,255
 8002678:	1004d07a 	srli	r2,r2,1
 800267c:	10bfffc4 	addi	r2,r2,-1
 8002680:	10c03fcc 	andi	r3,r2,255
 8002684:	e0bfbe84 	addi	r2,fp,-262
 8002688:	10800084 	addi	r2,r2,2
 800268c:	180b883a 	mov	r5,r3
 8002690:	1009883a 	mov	r4,r2
 8002694:	8002a3c0 	call	8002a3c <ConvUTF8ToStr>
 8002698:	100d883a 	mov	r6,r2
 800269c:	800b883a 	mov	r5,r16
 80026a0:	01020034 	movhi	r4,2048
 80026a4:	2114b404 	addi	r4,r4,21200
 80026a8:	8002cd80 	call	8002cd8 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 80026ac:	00800804 	movi	r2,32
 80026b0:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 80026b4:	00000a06 	br	80026e0 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 80026b8:	e0bfb983 	ldbu	r2,-282(fp)
 80026bc:	d0a0dc45 	stb	r2,-31887(gp)
                        last_usb_task_state = usb_task_state;
 80026c0:	d0a00303 	ldbu	r2,-32756(gp)
 80026c4:	d0a0da05 	stb	r2,-31896(gp)
                        usb_task_state = USB_STATE_ERROR;
 80026c8:	00bfffc4 	movi	r2,-1
 80026cc:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 80026d0:	00000306 	br	80026e0 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 80026d4:	0001883a 	nop
 80026d8:	00006b06 	br	8002888 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 80026dc:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 80026e0:	00006906 	br	8002888 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 80026e4:	00800044 	movi	r2,1
 80026e8:	e0bfb905 	stb	r2,-284(fp)
 80026ec:	00002d06 	br	80027a4 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 80026f0:	e0ffb903 	ldbu	r3,-284(fp)
 80026f4:	00820034 	movhi	r2,2048
 80026f8:	1096b004 	addi	r2,r2,23232
 80026fc:	180690fa 	slli	r3,r3,3
 8002700:	10c5883a 	add	r2,r2,r3
 8002704:	10800017 	ldw	r2,0(r2)
 8002708:	1000231e 	bne	r2,zero,8002798 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 800270c:	e13fb903 	ldbu	r4,-284(fp)
 8002710:	00820034 	movhi	r2,2048
 8002714:	1096b004 	addi	r2,r2,23232
 8002718:	10c00017 	ldw	r3,0(r2)
 800271c:	00820034 	movhi	r2,2048
 8002720:	1096b004 	addi	r2,r2,23232
 8002724:	200890fa 	slli	r4,r4,3
 8002728:	1105883a 	add	r2,r2,r4
 800272c:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 8002730:	e0bfb903 	ldbu	r2,-284(fp)
 8002734:	d8000415 	stw	zero,16(sp)
 8002738:	d8000315 	stw	zero,12(sp)
 800273c:	d8000215 	stw	zero,8(sp)
 8002740:	d8000115 	stw	zero,4(sp)
 8002744:	d8800015 	stw	r2,0(sp)
 8002748:	01c00144 	movi	r7,5
 800274c:	000d883a 	mov	r6,zero
 8002750:	000b883a 	mov	r5,zero
 8002754:	0009883a 	mov	r4,zero
 8002758:	8001c280 	call	8001c28 <XferCtrlReq>
 800275c:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8002760:	e0bfb983 	ldbu	r2,-282(fp)
 8002764:	1000051e 	bne	r2,zero,800277c <USB_Task+0x508>
                        tmp_addr = i;
 8002768:	e0bfb903 	ldbu	r2,-284(fp)
 800276c:	d0a0dc05 	stb	r2,-31888(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 8002770:	00800c04 	movi	r2,48
 8002774:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8002778:	00000d06 	br	80027b0 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 800277c:	e0bfb983 	ldbu	r2,-282(fp)
 8002780:	d0a0dc45 	stb	r2,-31887(gp)
                        last_usb_task_state = usb_task_state;
 8002784:	d0a00303 	ldbu	r2,-32756(gp)
 8002788:	d0a0da05 	stb	r2,-31896(gp)
                        usb_task_state = USB_STATE_ERROR;
 800278c:	00bfffc4 	movi	r2,-1
 8002790:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8002794:	00000606 	br	80027b0 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8002798:	e0bfb903 	ldbu	r2,-284(fp)
 800279c:	10800044 	addi	r2,r2,1
 80027a0:	e0bfb905 	stb	r2,-284(fp)
 80027a4:	e0bfb903 	ldbu	r2,-284(fp)
 80027a8:	10800230 	cmpltui	r2,r2,8
 80027ac:	103fd01e 	bne	r2,zero,80026f0 <__alt_data_end+0xfc0026f0>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 80027b0:	d0a00303 	ldbu	r2,-32756(gp)
 80027b4:	10803fcc 	andi	r2,r2,255
 80027b8:	10800818 	cmpnei	r2,r2,32
 80027bc:	1000341e 	bne	r2,zero,8002890 <USB_Task+0x61c>
                usb_error = 0xfe;
 80027c0:	00bfff84 	movi	r2,-2
 80027c4:	d0a0dc45 	stb	r2,-31887(gp)
                last_usb_task_state = usb_task_state;
 80027c8:	d0a00303 	ldbu	r2,-32756(gp)
 80027cc:	d0a0da05 	stb	r2,-31896(gp)
                usb_task_state = USB_STATE_ERROR;
 80027d0:	00bfffc4 	movi	r2,-1
 80027d4:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 80027d8:	00002d06 	br	8002890 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 80027dc:	e03fb905 	stb	zero,-284(fp)
 80027e0:	00001706 	br	8002840 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 80027e4:	e0bfb903 	ldbu	r2,-284(fp)
 80027e8:	04020034 	movhi	r16,2048
 80027ec:	8414c804 	addi	r16,r16,21280
 80027f0:	01400304 	movi	r5,12
 80027f4:	1009883a 	mov	r4,r2
 80027f8:	8002c740 	call	8002c74 <__mulsi3>
 80027fc:	8085883a 	add	r2,r16,r2
 8002800:	10800017 	ldw	r2,0(r2)
 8002804:	d0e0dc03 	ldbu	r3,-31888(gp)
 8002808:	18c03fcc 	andi	r3,r3,255
 800280c:	000b883a 	mov	r5,zero
 8002810:	1809883a 	mov	r4,r3
 8002814:	103ee83a 	callr	r2
 8002818:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 800281c:	e0bfb983 	ldbu	r2,-282(fp)
 8002820:	10800058 	cmpnei	r2,r2,1
 8002824:	1000031e 	bne	r2,zero,8002834 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 8002828:	00801004 	movi	r2,64
 800282c:	d0a00305 	stb	r2,-32756(gp)
                    break;
 8002830:	00000606 	br	800284c <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8002834:	e0bfb903 	ldbu	r2,-284(fp)
 8002838:	10800044 	addi	r2,r2,1
 800283c:	e0bfb905 	stb	r2,-284(fp)
 8002840:	e0bfb903 	ldbu	r2,-284(fp)
 8002844:	10800130 	cmpltui	r2,r2,4
 8002848:	103fe61e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 800284c:	d0a00303 	ldbu	r2,-32756(gp)
 8002850:	10803fcc 	andi	r2,r2,255
 8002854:	10800c18 	cmpnei	r2,r2,48
 8002858:	10000f1e 	bne	r2,zero,8002898 <USB_Task+0x624>
                usb_error = 0xfd;
 800285c:	00bfff44 	movi	r2,-3
 8002860:	d0a0dc45 	stb	r2,-31887(gp)
                last_usb_task_state = usb_task_state;
 8002864:	d0a00303 	ldbu	r2,-32756(gp)
 8002868:	d0a0da05 	stb	r2,-31896(gp)
                usb_task_state = USB_STATE_ERROR;
 800286c:	00bfffc4 	movi	r2,-1
 8002870:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 8002874:	00000806 	br	8002898 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 8002878:	0001883a 	nop
 800287c:	00000706 	br	800289c <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 8002880:	0001883a 	nop
 8002884:	00000506 	br	800289c <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 8002888:	0001883a 	nop
 800288c:	00000306 	br	800289c <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 8002890:	0001883a 	nop
 8002894:	00000106 	br	800289c <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 8002898:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 800289c:	0001883a 	nop
 80028a0:	e6ffff04 	addi	sp,fp,-4
 80028a4:	dfc00217 	ldw	ra,8(sp)
 80028a8:	df000117 	ldw	fp,4(sp)
 80028ac:	dc000017 	ldw	r16,0(sp)
 80028b0:	dec00304 	addi	sp,sp,12
 80028b4:	f800283a 	ret

080028b8 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 80028b8:	defffd04 	addi	sp,sp,-12
 80028bc:	df000215 	stw	fp,8(sp)
 80028c0:	df000204 	addi	fp,sp,8
 80028c4:	2005883a 	mov	r2,r4
 80028c8:	e17fff15 	stw	r5,-4(fp)
 80028cc:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 80028d0:	0005883a 	mov	r2,zero
}
 80028d4:	e037883a 	mov	sp,fp
 80028d8:	df000017 	ldw	fp,0(sp)
 80028dc:	dec00104 	addi	sp,sp,4
 80028e0:	f800283a 	ret

080028e4 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80028e4:	defffb04 	addi	sp,sp,-20
 80028e8:	df000415 	stw	fp,16(sp)
 80028ec:	df000404 	addi	fp,sp,16
 80028f0:	2007883a 	mov	r3,r4
 80028f4:	2805883a 	mov	r2,r5
 80028f8:	e1bffe15 	stw	r6,-8(fp)
 80028fc:	e1ffff15 	stw	r7,-4(fp)
 8002900:	e0fffc05 	stb	r3,-16(fp)
 8002904:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 8002908:	0005883a 	mov	r2,zero

}
 800290c:	e037883a 	mov	sp,fp
 8002910:	df000017 	ldw	fp,0(sp)
 8002914:	dec00104 	addi	sp,sp,4
 8002918:	f800283a 	ret

0800291c <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 800291c:	defffd04 	addi	sp,sp,-12
 8002920:	df000215 	stw	fp,8(sp)
 8002924:	df000204 	addi	fp,sp,8
 8002928:	2005883a 	mov	r2,r4
 800292c:	e17fff15 	stw	r5,-4(fp)
 8002930:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 8002934:	0005883a 	mov	r2,zero

}
 8002938:	e037883a 	mov	sp,fp
 800293c:	df000017 	ldw	fp,0(sp)
 8002940:	dec00104 	addi	sp,sp,4
 8002944:	f800283a 	ret

08002948 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002948:	defffb04 	addi	sp,sp,-20
 800294c:	df000415 	stw	fp,16(sp)
 8002950:	df000404 	addi	fp,sp,16
 8002954:	2007883a 	mov	r3,r4
 8002958:	2805883a 	mov	r2,r5
 800295c:	e1bffe15 	stw	r6,-8(fp)
 8002960:	e1ffff15 	stw	r7,-4(fp)
 8002964:	e0fffc05 	stb	r3,-16(fp)
 8002968:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 800296c:	0005883a 	mov	r2,zero
}
 8002970:	e037883a 	mov	sp,fp
 8002974:	df000017 	ldw	fp,0(sp)
 8002978:	dec00104 	addi	sp,sp,4
 800297c:	f800283a 	ret

08002980 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 8002980:	defffd04 	addi	sp,sp,-12
 8002984:	df000215 	stw	fp,8(sp)
 8002988:	df000204 	addi	fp,sp,8
 800298c:	2005883a 	mov	r2,r4
 8002990:	e17fff15 	stw	r5,-4(fp)
 8002994:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 8002998:	0005883a 	mov	r2,zero
}
 800299c:	e037883a 	mov	sp,fp
 80029a0:	df000017 	ldw	fp,0(sp)
 80029a4:	dec00104 	addi	sp,sp,4
 80029a8:	f800283a 	ret

080029ac <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80029ac:	defffb04 	addi	sp,sp,-20
 80029b0:	df000415 	stw	fp,16(sp)
 80029b4:	df000404 	addi	fp,sp,16
 80029b8:	2007883a 	mov	r3,r4
 80029bc:	2805883a 	mov	r2,r5
 80029c0:	e1bffe15 	stw	r6,-8(fp)
 80029c4:	e1ffff15 	stw	r7,-4(fp)
 80029c8:	e0fffc05 	stb	r3,-16(fp)
 80029cc:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 80029d0:	0005883a 	mov	r2,zero
}
 80029d4:	e037883a 	mov	sp,fp
 80029d8:	df000017 	ldw	fp,0(sp)
 80029dc:	dec00104 	addi	sp,sp,4
 80029e0:	f800283a 	ret

080029e4 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 80029e4:	deffff04 	addi	sp,sp,-4
 80029e8:	df000015 	stw	fp,0(sp)
 80029ec:	d839883a 	mov	fp,sp
    return( usb_task_state );
 80029f0:	d0a00303 	ldbu	r2,-32756(gp)
}
 80029f4:	e037883a 	mov	sp,fp
 80029f8:	df000017 	ldw	fp,0(sp)
 80029fc:	dec00104 	addi	sp,sp,4
 8002a00:	f800283a 	ret

08002a04 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 8002a04:	defffe04 	addi	sp,sp,-8
 8002a08:	df000115 	stw	fp,4(sp)
 8002a0c:	df000104 	addi	fp,sp,4
 8002a10:	2005883a 	mov	r2,r4
 8002a14:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 8002a18:	e0bfff03 	ldbu	r2,-4(fp)
 8002a1c:	100690fa 	slli	r3,r2,3
 8002a20:	00820034 	movhi	r2,2048
 8002a24:	1096b004 	addi	r2,r2,23232
 8002a28:	1885883a 	add	r2,r3,r2
}
 8002a2c:	e037883a 	mov	sp,fp
 8002a30:	df000017 	ldw	fp,0(sp)
 8002a34:	dec00104 	addi	sp,sp,4
 8002a38:	f800283a 	ret

08002a3c <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 8002a3c:	defffc04 	addi	sp,sp,-16
 8002a40:	df000315 	stw	fp,12(sp)
 8002a44:	df000304 	addi	fp,sp,12
 8002a48:	e13ffe15 	stw	r4,-8(fp)
 8002a4c:	2805883a 	mov	r2,r5
 8002a50:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 8002a54:	e03ffd05 	stb	zero,-12(fp)
 8002a58:	00000d06 	br	8002a90 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 8002a5c:	e0bffd03 	ldbu	r2,-12(fp)
 8002a60:	e0fffe17 	ldw	r3,-8(fp)
 8002a64:	1887883a 	add	r3,r3,r2
 8002a68:	e0bffd03 	ldbu	r2,-12(fp)
 8002a6c:	1085883a 	add	r2,r2,r2
 8002a70:	1009883a 	mov	r4,r2
 8002a74:	e0bffe17 	ldw	r2,-8(fp)
 8002a78:	1105883a 	add	r2,r2,r4
 8002a7c:	10800003 	ldbu	r2,0(r2)
 8002a80:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 8002a84:	e0bffd03 	ldbu	r2,-12(fp)
 8002a88:	10800044 	addi	r2,r2,1
 8002a8c:	e0bffd05 	stb	r2,-12(fp)
 8002a90:	e0fffd03 	ldbu	r3,-12(fp)
 8002a94:	e0bfff03 	ldbu	r2,-4(fp)
 8002a98:	18bff036 	bltu	r3,r2,8002a5c <__alt_data_end+0xfc002a5c>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 8002a9c:	e0bfff03 	ldbu	r2,-4(fp)
 8002aa0:	e0fffe17 	ldw	r3,-8(fp)
 8002aa4:	1885883a 	add	r2,r3,r2
 8002aa8:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 8002aac:	e0bffe17 	ldw	r2,-8(fp)
}
 8002ab0:	e037883a 	mov	sp,fp
 8002ab4:	df000017 	ldw	fp,0(sp)
 8002ab8:	dec00104 	addi	sp,sp,4
 8002abc:	f800283a 	ret

08002ac0 <__divsi3>:
 8002ac0:	20001b16 	blt	r4,zero,8002b30 <__divsi3+0x70>
 8002ac4:	000f883a 	mov	r7,zero
 8002ac8:	28001616 	blt	r5,zero,8002b24 <__divsi3+0x64>
 8002acc:	200d883a 	mov	r6,r4
 8002ad0:	29001a2e 	bgeu	r5,r4,8002b3c <__divsi3+0x7c>
 8002ad4:	00800804 	movi	r2,32
 8002ad8:	00c00044 	movi	r3,1
 8002adc:	00000106 	br	8002ae4 <__divsi3+0x24>
 8002ae0:	10000d26 	beq	r2,zero,8002b18 <__divsi3+0x58>
 8002ae4:	294b883a 	add	r5,r5,r5
 8002ae8:	10bfffc4 	addi	r2,r2,-1
 8002aec:	18c7883a 	add	r3,r3,r3
 8002af0:	293ffb36 	bltu	r5,r4,8002ae0 <__alt_data_end+0xfc002ae0>
 8002af4:	0005883a 	mov	r2,zero
 8002af8:	18000726 	beq	r3,zero,8002b18 <__divsi3+0x58>
 8002afc:	0005883a 	mov	r2,zero
 8002b00:	31400236 	bltu	r6,r5,8002b0c <__divsi3+0x4c>
 8002b04:	314dc83a 	sub	r6,r6,r5
 8002b08:	10c4b03a 	or	r2,r2,r3
 8002b0c:	1806d07a 	srli	r3,r3,1
 8002b10:	280ad07a 	srli	r5,r5,1
 8002b14:	183ffa1e 	bne	r3,zero,8002b00 <__alt_data_end+0xfc002b00>
 8002b18:	38000126 	beq	r7,zero,8002b20 <__divsi3+0x60>
 8002b1c:	0085c83a 	sub	r2,zero,r2
 8002b20:	f800283a 	ret
 8002b24:	014bc83a 	sub	r5,zero,r5
 8002b28:	39c0005c 	xori	r7,r7,1
 8002b2c:	003fe706 	br	8002acc <__alt_data_end+0xfc002acc>
 8002b30:	0109c83a 	sub	r4,zero,r4
 8002b34:	01c00044 	movi	r7,1
 8002b38:	003fe306 	br	8002ac8 <__alt_data_end+0xfc002ac8>
 8002b3c:	00c00044 	movi	r3,1
 8002b40:	003fee06 	br	8002afc <__alt_data_end+0xfc002afc>

08002b44 <__modsi3>:
 8002b44:	20001716 	blt	r4,zero,8002ba4 <__modsi3+0x60>
 8002b48:	000f883a 	mov	r7,zero
 8002b4c:	2005883a 	mov	r2,r4
 8002b50:	28001216 	blt	r5,zero,8002b9c <__modsi3+0x58>
 8002b54:	2900162e 	bgeu	r5,r4,8002bb0 <__modsi3+0x6c>
 8002b58:	01800804 	movi	r6,32
 8002b5c:	00c00044 	movi	r3,1
 8002b60:	00000106 	br	8002b68 <__modsi3+0x24>
 8002b64:	30000a26 	beq	r6,zero,8002b90 <__modsi3+0x4c>
 8002b68:	294b883a 	add	r5,r5,r5
 8002b6c:	31bfffc4 	addi	r6,r6,-1
 8002b70:	18c7883a 	add	r3,r3,r3
 8002b74:	293ffb36 	bltu	r5,r4,8002b64 <__alt_data_end+0xfc002b64>
 8002b78:	18000526 	beq	r3,zero,8002b90 <__modsi3+0x4c>
 8002b7c:	1806d07a 	srli	r3,r3,1
 8002b80:	11400136 	bltu	r2,r5,8002b88 <__modsi3+0x44>
 8002b84:	1145c83a 	sub	r2,r2,r5
 8002b88:	280ad07a 	srli	r5,r5,1
 8002b8c:	183ffb1e 	bne	r3,zero,8002b7c <__alt_data_end+0xfc002b7c>
 8002b90:	38000126 	beq	r7,zero,8002b98 <__modsi3+0x54>
 8002b94:	0085c83a 	sub	r2,zero,r2
 8002b98:	f800283a 	ret
 8002b9c:	014bc83a 	sub	r5,zero,r5
 8002ba0:	003fec06 	br	8002b54 <__alt_data_end+0xfc002b54>
 8002ba4:	0109c83a 	sub	r4,zero,r4
 8002ba8:	01c00044 	movi	r7,1
 8002bac:	003fe706 	br	8002b4c <__alt_data_end+0xfc002b4c>
 8002bb0:	00c00044 	movi	r3,1
 8002bb4:	003ff106 	br	8002b7c <__alt_data_end+0xfc002b7c>

08002bb8 <__udivsi3>:
 8002bb8:	200d883a 	mov	r6,r4
 8002bbc:	2900152e 	bgeu	r5,r4,8002c14 <__udivsi3+0x5c>
 8002bc0:	28001416 	blt	r5,zero,8002c14 <__udivsi3+0x5c>
 8002bc4:	00800804 	movi	r2,32
 8002bc8:	00c00044 	movi	r3,1
 8002bcc:	00000206 	br	8002bd8 <__udivsi3+0x20>
 8002bd0:	10000e26 	beq	r2,zero,8002c0c <__udivsi3+0x54>
 8002bd4:	28000516 	blt	r5,zero,8002bec <__udivsi3+0x34>
 8002bd8:	294b883a 	add	r5,r5,r5
 8002bdc:	10bfffc4 	addi	r2,r2,-1
 8002be0:	18c7883a 	add	r3,r3,r3
 8002be4:	293ffa36 	bltu	r5,r4,8002bd0 <__alt_data_end+0xfc002bd0>
 8002be8:	18000826 	beq	r3,zero,8002c0c <__udivsi3+0x54>
 8002bec:	0005883a 	mov	r2,zero
 8002bf0:	31400236 	bltu	r6,r5,8002bfc <__udivsi3+0x44>
 8002bf4:	314dc83a 	sub	r6,r6,r5
 8002bf8:	10c4b03a 	or	r2,r2,r3
 8002bfc:	1806d07a 	srli	r3,r3,1
 8002c00:	280ad07a 	srli	r5,r5,1
 8002c04:	183ffa1e 	bne	r3,zero,8002bf0 <__alt_data_end+0xfc002bf0>
 8002c08:	f800283a 	ret
 8002c0c:	0005883a 	mov	r2,zero
 8002c10:	f800283a 	ret
 8002c14:	00c00044 	movi	r3,1
 8002c18:	003ff406 	br	8002bec <__alt_data_end+0xfc002bec>

08002c1c <__umodsi3>:
 8002c1c:	2005883a 	mov	r2,r4
 8002c20:	2900122e 	bgeu	r5,r4,8002c6c <__umodsi3+0x50>
 8002c24:	28001116 	blt	r5,zero,8002c6c <__umodsi3+0x50>
 8002c28:	01800804 	movi	r6,32
 8002c2c:	00c00044 	movi	r3,1
 8002c30:	00000206 	br	8002c3c <__umodsi3+0x20>
 8002c34:	30000c26 	beq	r6,zero,8002c68 <__umodsi3+0x4c>
 8002c38:	28000516 	blt	r5,zero,8002c50 <__umodsi3+0x34>
 8002c3c:	294b883a 	add	r5,r5,r5
 8002c40:	31bfffc4 	addi	r6,r6,-1
 8002c44:	18c7883a 	add	r3,r3,r3
 8002c48:	293ffa36 	bltu	r5,r4,8002c34 <__alt_data_end+0xfc002c34>
 8002c4c:	18000626 	beq	r3,zero,8002c68 <__umodsi3+0x4c>
 8002c50:	1806d07a 	srli	r3,r3,1
 8002c54:	11400136 	bltu	r2,r5,8002c5c <__umodsi3+0x40>
 8002c58:	1145c83a 	sub	r2,r2,r5
 8002c5c:	280ad07a 	srli	r5,r5,1
 8002c60:	183ffb1e 	bne	r3,zero,8002c50 <__alt_data_end+0xfc002c50>
 8002c64:	f800283a 	ret
 8002c68:	f800283a 	ret
 8002c6c:	00c00044 	movi	r3,1
 8002c70:	003ff706 	br	8002c50 <__alt_data_end+0xfc002c50>

08002c74 <__mulsi3>:
 8002c74:	0005883a 	mov	r2,zero
 8002c78:	20000726 	beq	r4,zero,8002c98 <__mulsi3+0x24>
 8002c7c:	20c0004c 	andi	r3,r4,1
 8002c80:	2008d07a 	srli	r4,r4,1
 8002c84:	18000126 	beq	r3,zero,8002c8c <__mulsi3+0x18>
 8002c88:	1145883a 	add	r2,r2,r5
 8002c8c:	294b883a 	add	r5,r5,r5
 8002c90:	203ffa1e 	bne	r4,zero,8002c7c <__alt_data_end+0xfc002c7c>
 8002c94:	f800283a 	ret
 8002c98:	f800283a 	ret

08002c9c <_printf_r>:
 8002c9c:	defffd04 	addi	sp,sp,-12
 8002ca0:	dfc00015 	stw	ra,0(sp)
 8002ca4:	d9800115 	stw	r6,4(sp)
 8002ca8:	d9c00215 	stw	r7,8(sp)
 8002cac:	20c00217 	ldw	r3,8(r4)
 8002cb0:	01820034 	movhi	r6,2048
 8002cb4:	318ceb04 	addi	r6,r6,13228
 8002cb8:	19800115 	stw	r6,4(r3)
 8002cbc:	280d883a 	mov	r6,r5
 8002cc0:	21400217 	ldw	r5,8(r4)
 8002cc4:	d9c00104 	addi	r7,sp,4
 8002cc8:	8002e640 	call	8002e64 <___vfprintf_internal_r>
 8002ccc:	dfc00017 	ldw	ra,0(sp)
 8002cd0:	dec00304 	addi	sp,sp,12
 8002cd4:	f800283a 	ret

08002cd8 <printf>:
 8002cd8:	defffc04 	addi	sp,sp,-16
 8002cdc:	dfc00015 	stw	ra,0(sp)
 8002ce0:	d9400115 	stw	r5,4(sp)
 8002ce4:	d9800215 	stw	r6,8(sp)
 8002ce8:	d9c00315 	stw	r7,12(sp)
 8002cec:	00820034 	movhi	r2,2048
 8002cf0:	10958604 	addi	r2,r2,22040
 8002cf4:	10800017 	ldw	r2,0(r2)
 8002cf8:	01420034 	movhi	r5,2048
 8002cfc:	294ceb04 	addi	r5,r5,13228
 8002d00:	10c00217 	ldw	r3,8(r2)
 8002d04:	d9800104 	addi	r6,sp,4
 8002d08:	19400115 	stw	r5,4(r3)
 8002d0c:	200b883a 	mov	r5,r4
 8002d10:	11000217 	ldw	r4,8(r2)
 8002d14:	80033900 	call	8003390 <__vfprintf_internal>
 8002d18:	dfc00017 	ldw	ra,0(sp)
 8002d1c:	dec00404 	addi	sp,sp,16
 8002d20:	f800283a 	ret

08002d24 <_putchar_r>:
 8002d24:	21800217 	ldw	r6,8(r4)
 8002d28:	80034b81 	jmpi	80034b8 <_putc_r>

08002d2c <putchar>:
 8002d2c:	00820034 	movhi	r2,2048
 8002d30:	10958604 	addi	r2,r2,22040
 8002d34:	10800017 	ldw	r2,0(r2)
 8002d38:	200b883a 	mov	r5,r4
 8002d3c:	11800217 	ldw	r6,8(r2)
 8002d40:	1009883a 	mov	r4,r2
 8002d44:	80034b81 	jmpi	80034b8 <_putc_r>

08002d48 <_puts_r>:
 8002d48:	defffd04 	addi	sp,sp,-12
 8002d4c:	dc000015 	stw	r16,0(sp)
 8002d50:	2021883a 	mov	r16,r4
 8002d54:	2809883a 	mov	r4,r5
 8002d58:	dfc00215 	stw	ra,8(sp)
 8002d5c:	dc400115 	stw	r17,4(sp)
 8002d60:	2823883a 	mov	r17,r5
 8002d64:	8002ddc0 	call	8002ddc <strlen>
 8002d68:	81400217 	ldw	r5,8(r16)
 8002d6c:	01020034 	movhi	r4,2048
 8002d70:	210ceb04 	addi	r4,r4,13228
 8002d74:	29000115 	stw	r4,4(r5)
 8002d78:	100f883a 	mov	r7,r2
 8002d7c:	880d883a 	mov	r6,r17
 8002d80:	8009883a 	mov	r4,r16
 8002d84:	80033ac0 	call	80033ac <__sfvwrite_small_dev>
 8002d88:	00ffffc4 	movi	r3,-1
 8002d8c:	10c00926 	beq	r2,r3,8002db4 <_puts_r+0x6c>
 8002d90:	81400217 	ldw	r5,8(r16)
 8002d94:	01820034 	movhi	r6,2048
 8002d98:	01c00044 	movi	r7,1
 8002d9c:	28800117 	ldw	r2,4(r5)
 8002da0:	3194ba04 	addi	r6,r6,21224
 8002da4:	8009883a 	mov	r4,r16
 8002da8:	103ee83a 	callr	r2
 8002dac:	10bfffe0 	cmpeqi	r2,r2,-1
 8002db0:	0085c83a 	sub	r2,zero,r2
 8002db4:	dfc00217 	ldw	ra,8(sp)
 8002db8:	dc400117 	ldw	r17,4(sp)
 8002dbc:	dc000017 	ldw	r16,0(sp)
 8002dc0:	dec00304 	addi	sp,sp,12
 8002dc4:	f800283a 	ret

08002dc8 <puts>:
 8002dc8:	00820034 	movhi	r2,2048
 8002dcc:	10958604 	addi	r2,r2,22040
 8002dd0:	200b883a 	mov	r5,r4
 8002dd4:	11000017 	ldw	r4,0(r2)
 8002dd8:	8002d481 	jmpi	8002d48 <_puts_r>

08002ddc <strlen>:
 8002ddc:	2005883a 	mov	r2,r4
 8002de0:	10c00007 	ldb	r3,0(r2)
 8002de4:	18000226 	beq	r3,zero,8002df0 <strlen+0x14>
 8002de8:	10800044 	addi	r2,r2,1
 8002dec:	003ffc06 	br	8002de0 <__alt_data_end+0xfc002de0>
 8002df0:	1105c83a 	sub	r2,r2,r4
 8002df4:	f800283a 	ret

08002df8 <print_repeat>:
 8002df8:	defffb04 	addi	sp,sp,-20
 8002dfc:	dc800315 	stw	r18,12(sp)
 8002e00:	dc400215 	stw	r17,8(sp)
 8002e04:	dc000115 	stw	r16,4(sp)
 8002e08:	dfc00415 	stw	ra,16(sp)
 8002e0c:	2025883a 	mov	r18,r4
 8002e10:	2823883a 	mov	r17,r5
 8002e14:	d9800005 	stb	r6,0(sp)
 8002e18:	3821883a 	mov	r16,r7
 8002e1c:	04000a0e 	bge	zero,r16,8002e48 <print_repeat+0x50>
 8002e20:	88800117 	ldw	r2,4(r17)
 8002e24:	01c00044 	movi	r7,1
 8002e28:	d80d883a 	mov	r6,sp
 8002e2c:	880b883a 	mov	r5,r17
 8002e30:	9009883a 	mov	r4,r18
 8002e34:	103ee83a 	callr	r2
 8002e38:	843fffc4 	addi	r16,r16,-1
 8002e3c:	103ff726 	beq	r2,zero,8002e1c <__alt_data_end+0xfc002e1c>
 8002e40:	00bfffc4 	movi	r2,-1
 8002e44:	00000106 	br	8002e4c <print_repeat+0x54>
 8002e48:	0005883a 	mov	r2,zero
 8002e4c:	dfc00417 	ldw	ra,16(sp)
 8002e50:	dc800317 	ldw	r18,12(sp)
 8002e54:	dc400217 	ldw	r17,8(sp)
 8002e58:	dc000117 	ldw	r16,4(sp)
 8002e5c:	dec00504 	addi	sp,sp,20
 8002e60:	f800283a 	ret

08002e64 <___vfprintf_internal_r>:
 8002e64:	deffe504 	addi	sp,sp,-108
 8002e68:	d8c00804 	addi	r3,sp,32
 8002e6c:	ddc01815 	stw	r23,96(sp)
 8002e70:	dd801715 	stw	r22,92(sp)
 8002e74:	dd401615 	stw	r21,88(sp)
 8002e78:	dd001515 	stw	r20,84(sp)
 8002e7c:	dcc01415 	stw	r19,80(sp)
 8002e80:	dc801315 	stw	r18,76(sp)
 8002e84:	dc401215 	stw	r17,72(sp)
 8002e88:	dc001115 	stw	r16,68(sp)
 8002e8c:	dfc01a15 	stw	ra,104(sp)
 8002e90:	df001915 	stw	fp,100(sp)
 8002e94:	2029883a 	mov	r20,r4
 8002e98:	2823883a 	mov	r17,r5
 8002e9c:	382d883a 	mov	r22,r7
 8002ea0:	d9800f15 	stw	r6,60(sp)
 8002ea4:	0021883a 	mov	r16,zero
 8002ea8:	d8000e15 	stw	zero,56(sp)
 8002eac:	d8000a15 	stw	zero,40(sp)
 8002eb0:	002b883a 	mov	r21,zero
 8002eb4:	0027883a 	mov	r19,zero
 8002eb8:	0025883a 	mov	r18,zero
 8002ebc:	d8000c15 	stw	zero,48(sp)
 8002ec0:	d8000b15 	stw	zero,44(sp)
 8002ec4:	002f883a 	mov	r23,zero
 8002ec8:	d8c00915 	stw	r3,36(sp)
 8002ecc:	d8c00f17 	ldw	r3,60(sp)
 8002ed0:	19000003 	ldbu	r4,0(r3)
 8002ed4:	20803fcc 	andi	r2,r4,255
 8002ed8:	1080201c 	xori	r2,r2,128
 8002edc:	10bfe004 	addi	r2,r2,-128
 8002ee0:	10011e26 	beq	r2,zero,800335c <___vfprintf_internal_r+0x4f8>
 8002ee4:	00c00044 	movi	r3,1
 8002ee8:	b8c01426 	beq	r23,r3,8002f3c <___vfprintf_internal_r+0xd8>
 8002eec:	1dc00216 	blt	r3,r23,8002ef8 <___vfprintf_internal_r+0x94>
 8002ef0:	b8000626 	beq	r23,zero,8002f0c <___vfprintf_internal_r+0xa8>
 8002ef4:	00011506 	br	800334c <___vfprintf_internal_r+0x4e8>
 8002ef8:	01400084 	movi	r5,2
 8002efc:	b9401d26 	beq	r23,r5,8002f74 <___vfprintf_internal_r+0x110>
 8002f00:	014000c4 	movi	r5,3
 8002f04:	b9402b26 	beq	r23,r5,8002fb4 <___vfprintf_internal_r+0x150>
 8002f08:	00011006 	br	800334c <___vfprintf_internal_r+0x4e8>
 8002f0c:	01400944 	movi	r5,37
 8002f10:	1140fc26 	beq	r2,r5,8003304 <___vfprintf_internal_r+0x4a0>
 8002f14:	88800117 	ldw	r2,4(r17)
 8002f18:	d9000005 	stb	r4,0(sp)
 8002f1c:	01c00044 	movi	r7,1
 8002f20:	d80d883a 	mov	r6,sp
 8002f24:	880b883a 	mov	r5,r17
 8002f28:	a009883a 	mov	r4,r20
 8002f2c:	103ee83a 	callr	r2
 8002f30:	1000d81e 	bne	r2,zero,8003294 <___vfprintf_internal_r+0x430>
 8002f34:	84000044 	addi	r16,r16,1
 8002f38:	00010406 	br	800334c <___vfprintf_internal_r+0x4e8>
 8002f3c:	01400c04 	movi	r5,48
 8002f40:	1140fa26 	beq	r2,r5,800332c <___vfprintf_internal_r+0x4c8>
 8002f44:	01400944 	movi	r5,37
 8002f48:	11400a1e 	bne	r2,r5,8002f74 <___vfprintf_internal_r+0x110>
 8002f4c:	d8800005 	stb	r2,0(sp)
 8002f50:	88800117 	ldw	r2,4(r17)
 8002f54:	b80f883a 	mov	r7,r23
 8002f58:	d80d883a 	mov	r6,sp
 8002f5c:	880b883a 	mov	r5,r17
 8002f60:	a009883a 	mov	r4,r20
 8002f64:	103ee83a 	callr	r2
 8002f68:	1000ca1e 	bne	r2,zero,8003294 <___vfprintf_internal_r+0x430>
 8002f6c:	84000044 	addi	r16,r16,1
 8002f70:	0000f506 	br	8003348 <___vfprintf_internal_r+0x4e4>
 8002f74:	25fff404 	addi	r23,r4,-48
 8002f78:	bdc03fcc 	andi	r23,r23,255
 8002f7c:	00c00244 	movi	r3,9
 8002f80:	1dc00936 	bltu	r3,r23,8002fa8 <___vfprintf_internal_r+0x144>
 8002f84:	00bfffc4 	movi	r2,-1
 8002f88:	90800426 	beq	r18,r2,8002f9c <___vfprintf_internal_r+0x138>
 8002f8c:	01400284 	movi	r5,10
 8002f90:	9009883a 	mov	r4,r18
 8002f94:	8002c740 	call	8002c74 <__mulsi3>
 8002f98:	00000106 	br	8002fa0 <___vfprintf_internal_r+0x13c>
 8002f9c:	0005883a 	mov	r2,zero
 8002fa0:	b8a5883a 	add	r18,r23,r2
 8002fa4:	0000e206 	br	8003330 <___vfprintf_internal_r+0x4cc>
 8002fa8:	01400b84 	movi	r5,46
 8002fac:	1140e426 	beq	r2,r5,8003340 <___vfprintf_internal_r+0x4dc>
 8002fb0:	05c00084 	movi	r23,2
 8002fb4:	213ff404 	addi	r4,r4,-48
 8002fb8:	27003fcc 	andi	fp,r4,255
 8002fbc:	00c00244 	movi	r3,9
 8002fc0:	1f000936 	bltu	r3,fp,8002fe8 <___vfprintf_internal_r+0x184>
 8002fc4:	00bfffc4 	movi	r2,-1
 8002fc8:	98800426 	beq	r19,r2,8002fdc <___vfprintf_internal_r+0x178>
 8002fcc:	01400284 	movi	r5,10
 8002fd0:	9809883a 	mov	r4,r19
 8002fd4:	8002c740 	call	8002c74 <__mulsi3>
 8002fd8:	00000106 	br	8002fe0 <___vfprintf_internal_r+0x17c>
 8002fdc:	0005883a 	mov	r2,zero
 8002fe0:	e0a7883a 	add	r19,fp,r2
 8002fe4:	0000d906 	br	800334c <___vfprintf_internal_r+0x4e8>
 8002fe8:	00c01b04 	movi	r3,108
 8002fec:	10c0d226 	beq	r2,r3,8003338 <___vfprintf_internal_r+0x4d4>
 8002ff0:	013fffc4 	movi	r4,-1
 8002ff4:	99000226 	beq	r19,r4,8003000 <___vfprintf_internal_r+0x19c>
 8002ff8:	d8000b15 	stw	zero,44(sp)
 8002ffc:	00000106 	br	8003004 <___vfprintf_internal_r+0x1a0>
 8003000:	04c00044 	movi	r19,1
 8003004:	01001a44 	movi	r4,105
 8003008:	11001626 	beq	r2,r4,8003064 <___vfprintf_internal_r+0x200>
 800300c:	20800916 	blt	r4,r2,8003034 <___vfprintf_internal_r+0x1d0>
 8003010:	010018c4 	movi	r4,99
 8003014:	11008826 	beq	r2,r4,8003238 <___vfprintf_internal_r+0x3d4>
 8003018:	01001904 	movi	r4,100
 800301c:	11001126 	beq	r2,r4,8003064 <___vfprintf_internal_r+0x200>
 8003020:	01001604 	movi	r4,88
 8003024:	1100c81e 	bne	r2,r4,8003348 <___vfprintf_internal_r+0x4e4>
 8003028:	00c00044 	movi	r3,1
 800302c:	d8c00e15 	stw	r3,56(sp)
 8003030:	00001506 	br	8003088 <___vfprintf_internal_r+0x224>
 8003034:	01001cc4 	movi	r4,115
 8003038:	11009826 	beq	r2,r4,800329c <___vfprintf_internal_r+0x438>
 800303c:	20800416 	blt	r4,r2,8003050 <___vfprintf_internal_r+0x1ec>
 8003040:	01001bc4 	movi	r4,111
 8003044:	1100c01e 	bne	r2,r4,8003348 <___vfprintf_internal_r+0x4e4>
 8003048:	05400204 	movi	r21,8
 800304c:	00000f06 	br	800308c <___vfprintf_internal_r+0x228>
 8003050:	01001d44 	movi	r4,117
 8003054:	11000d26 	beq	r2,r4,800308c <___vfprintf_internal_r+0x228>
 8003058:	01001e04 	movi	r4,120
 800305c:	11000a26 	beq	r2,r4,8003088 <___vfprintf_internal_r+0x224>
 8003060:	0000b906 	br	8003348 <___vfprintf_internal_r+0x4e4>
 8003064:	d8c00a17 	ldw	r3,40(sp)
 8003068:	b7000104 	addi	fp,r22,4
 800306c:	18000726 	beq	r3,zero,800308c <___vfprintf_internal_r+0x228>
 8003070:	df000d15 	stw	fp,52(sp)
 8003074:	b5c00017 	ldw	r23,0(r22)
 8003078:	b800080e 	bge	r23,zero,800309c <___vfprintf_internal_r+0x238>
 800307c:	05efc83a 	sub	r23,zero,r23
 8003080:	02400044 	movi	r9,1
 8003084:	00000606 	br	80030a0 <___vfprintf_internal_r+0x23c>
 8003088:	05400404 	movi	r21,16
 800308c:	b0c00104 	addi	r3,r22,4
 8003090:	d8c00d15 	stw	r3,52(sp)
 8003094:	b5c00017 	ldw	r23,0(r22)
 8003098:	d8000a15 	stw	zero,40(sp)
 800309c:	0013883a 	mov	r9,zero
 80030a0:	d839883a 	mov	fp,sp
 80030a4:	b8001726 	beq	r23,zero,8003104 <___vfprintf_internal_r+0x2a0>
 80030a8:	a80b883a 	mov	r5,r21
 80030ac:	b809883a 	mov	r4,r23
 80030b0:	da401015 	stw	r9,64(sp)
 80030b4:	8002bb80 	call	8002bb8 <__udivsi3>
 80030b8:	a80b883a 	mov	r5,r21
 80030bc:	1009883a 	mov	r4,r2
 80030c0:	102d883a 	mov	r22,r2
 80030c4:	8002c740 	call	8002c74 <__mulsi3>
 80030c8:	b885c83a 	sub	r2,r23,r2
 80030cc:	00c00244 	movi	r3,9
 80030d0:	da401017 	ldw	r9,64(sp)
 80030d4:	18800216 	blt	r3,r2,80030e0 <___vfprintf_internal_r+0x27c>
 80030d8:	10800c04 	addi	r2,r2,48
 80030dc:	00000506 	br	80030f4 <___vfprintf_internal_r+0x290>
 80030e0:	d8c00e17 	ldw	r3,56(sp)
 80030e4:	18000226 	beq	r3,zero,80030f0 <___vfprintf_internal_r+0x28c>
 80030e8:	10800dc4 	addi	r2,r2,55
 80030ec:	00000106 	br	80030f4 <___vfprintf_internal_r+0x290>
 80030f0:	108015c4 	addi	r2,r2,87
 80030f4:	e0800005 	stb	r2,0(fp)
 80030f8:	b02f883a 	mov	r23,r22
 80030fc:	e7000044 	addi	fp,fp,1
 8003100:	003fe806 	br	80030a4 <__alt_data_end+0xfc0030a4>
 8003104:	e6efc83a 	sub	r23,fp,sp
 8003108:	9dc5c83a 	sub	r2,r19,r23
 800310c:	0080090e 	bge	zero,r2,8003134 <___vfprintf_internal_r+0x2d0>
 8003110:	e085883a 	add	r2,fp,r2
 8003114:	01400c04 	movi	r5,48
 8003118:	d8c00917 	ldw	r3,36(sp)
 800311c:	e009883a 	mov	r4,fp
 8003120:	e0c0032e 	bgeu	fp,r3,8003130 <___vfprintf_internal_r+0x2cc>
 8003124:	e7000044 	addi	fp,fp,1
 8003128:	21400005 	stb	r5,0(r4)
 800312c:	e0bffa1e 	bne	fp,r2,8003118 <__alt_data_end+0xfc003118>
 8003130:	e6efc83a 	sub	r23,fp,sp
 8003134:	d8c00b17 	ldw	r3,44(sp)
 8003138:	4dd1883a 	add	r8,r9,r23
 800313c:	922dc83a 	sub	r22,r18,r8
 8003140:	18001626 	beq	r3,zero,800319c <___vfprintf_internal_r+0x338>
 8003144:	48000a26 	beq	r9,zero,8003170 <___vfprintf_internal_r+0x30c>
 8003148:	00800b44 	movi	r2,45
 800314c:	d8800805 	stb	r2,32(sp)
 8003150:	88800117 	ldw	r2,4(r17)
 8003154:	01c00044 	movi	r7,1
 8003158:	d9800804 	addi	r6,sp,32
 800315c:	880b883a 	mov	r5,r17
 8003160:	a009883a 	mov	r4,r20
 8003164:	103ee83a 	callr	r2
 8003168:	10004a1e 	bne	r2,zero,8003294 <___vfprintf_internal_r+0x430>
 800316c:	84000044 	addi	r16,r16,1
 8003170:	0580070e 	bge	zero,r22,8003190 <___vfprintf_internal_r+0x32c>
 8003174:	b00f883a 	mov	r7,r22
 8003178:	01800c04 	movi	r6,48
 800317c:	880b883a 	mov	r5,r17
 8003180:	a009883a 	mov	r4,r20
 8003184:	8002df80 	call	8002df8 <print_repeat>
 8003188:	1000421e 	bne	r2,zero,8003294 <___vfprintf_internal_r+0x430>
 800318c:	85a1883a 	add	r16,r16,r22
 8003190:	e02d883a 	mov	r22,fp
 8003194:	bf2fc83a 	sub	r23,r23,fp
 8003198:	00002006 	br	800321c <___vfprintf_internal_r+0x3b8>
 800319c:	0580090e 	bge	zero,r22,80031c4 <___vfprintf_internal_r+0x360>
 80031a0:	b00f883a 	mov	r7,r22
 80031a4:	01800804 	movi	r6,32
 80031a8:	880b883a 	mov	r5,r17
 80031ac:	a009883a 	mov	r4,r20
 80031b0:	da401015 	stw	r9,64(sp)
 80031b4:	8002df80 	call	8002df8 <print_repeat>
 80031b8:	da401017 	ldw	r9,64(sp)
 80031bc:	1000351e 	bne	r2,zero,8003294 <___vfprintf_internal_r+0x430>
 80031c0:	85a1883a 	add	r16,r16,r22
 80031c4:	483ff226 	beq	r9,zero,8003190 <__alt_data_end+0xfc003190>
 80031c8:	00800b44 	movi	r2,45
 80031cc:	d8800805 	stb	r2,32(sp)
 80031d0:	88800117 	ldw	r2,4(r17)
 80031d4:	01c00044 	movi	r7,1
 80031d8:	d9800804 	addi	r6,sp,32
 80031dc:	880b883a 	mov	r5,r17
 80031e0:	a009883a 	mov	r4,r20
 80031e4:	103ee83a 	callr	r2
 80031e8:	10002a1e 	bne	r2,zero,8003294 <___vfprintf_internal_r+0x430>
 80031ec:	84000044 	addi	r16,r16,1
 80031f0:	003fe706 	br	8003190 <__alt_data_end+0xfc003190>
 80031f4:	b5bfffc4 	addi	r22,r22,-1
 80031f8:	b0800003 	ldbu	r2,0(r22)
 80031fc:	01c00044 	movi	r7,1
 8003200:	d9800804 	addi	r6,sp,32
 8003204:	d8800805 	stb	r2,32(sp)
 8003208:	88800117 	ldw	r2,4(r17)
 800320c:	880b883a 	mov	r5,r17
 8003210:	a009883a 	mov	r4,r20
 8003214:	103ee83a 	callr	r2
 8003218:	10001e1e 	bne	r2,zero,8003294 <___vfprintf_internal_r+0x430>
 800321c:	8585c83a 	sub	r2,r16,r22
 8003220:	b5c9883a 	add	r4,r22,r23
 8003224:	e085883a 	add	r2,fp,r2
 8003228:	013ff216 	blt	zero,r4,80031f4 <__alt_data_end+0xfc0031f4>
 800322c:	1021883a 	mov	r16,r2
 8003230:	dd800d17 	ldw	r22,52(sp)
 8003234:	00004406 	br	8003348 <___vfprintf_internal_r+0x4e4>
 8003238:	00800044 	movi	r2,1
 800323c:	1480080e 	bge	r2,r18,8003260 <___vfprintf_internal_r+0x3fc>
 8003240:	95ffffc4 	addi	r23,r18,-1
 8003244:	b80f883a 	mov	r7,r23
 8003248:	01800804 	movi	r6,32
 800324c:	880b883a 	mov	r5,r17
 8003250:	a009883a 	mov	r4,r20
 8003254:	8002df80 	call	8002df8 <print_repeat>
 8003258:	10000e1e 	bne	r2,zero,8003294 <___vfprintf_internal_r+0x430>
 800325c:	85e1883a 	add	r16,r16,r23
 8003260:	b0800017 	ldw	r2,0(r22)
 8003264:	01c00044 	movi	r7,1
 8003268:	d80d883a 	mov	r6,sp
 800326c:	d8800005 	stb	r2,0(sp)
 8003270:	88800117 	ldw	r2,4(r17)
 8003274:	880b883a 	mov	r5,r17
 8003278:	a009883a 	mov	r4,r20
 800327c:	b5c00104 	addi	r23,r22,4
 8003280:	103ee83a 	callr	r2
 8003284:	1000031e 	bne	r2,zero,8003294 <___vfprintf_internal_r+0x430>
 8003288:	84000044 	addi	r16,r16,1
 800328c:	b82d883a 	mov	r22,r23
 8003290:	00002d06 	br	8003348 <___vfprintf_internal_r+0x4e4>
 8003294:	00bfffc4 	movi	r2,-1
 8003298:	00003106 	br	8003360 <___vfprintf_internal_r+0x4fc>
 800329c:	b5c00017 	ldw	r23,0(r22)
 80032a0:	b7000104 	addi	fp,r22,4
 80032a4:	b809883a 	mov	r4,r23
 80032a8:	8002ddc0 	call	8002ddc <strlen>
 80032ac:	9091c83a 	sub	r8,r18,r2
 80032b0:	102d883a 	mov	r22,r2
 80032b4:	0200090e 	bge	zero,r8,80032dc <___vfprintf_internal_r+0x478>
 80032b8:	400f883a 	mov	r7,r8
 80032bc:	01800804 	movi	r6,32
 80032c0:	880b883a 	mov	r5,r17
 80032c4:	a009883a 	mov	r4,r20
 80032c8:	da001015 	stw	r8,64(sp)
 80032cc:	8002df80 	call	8002df8 <print_repeat>
 80032d0:	da001017 	ldw	r8,64(sp)
 80032d4:	103fef1e 	bne	r2,zero,8003294 <__alt_data_end+0xfc003294>
 80032d8:	8221883a 	add	r16,r16,r8
 80032dc:	88800117 	ldw	r2,4(r17)
 80032e0:	b00f883a 	mov	r7,r22
 80032e4:	b80d883a 	mov	r6,r23
 80032e8:	880b883a 	mov	r5,r17
 80032ec:	a009883a 	mov	r4,r20
 80032f0:	103ee83a 	callr	r2
 80032f4:	103fe71e 	bne	r2,zero,8003294 <__alt_data_end+0xfc003294>
 80032f8:	85a1883a 	add	r16,r16,r22
 80032fc:	e02d883a 	mov	r22,fp
 8003300:	00001106 	br	8003348 <___vfprintf_internal_r+0x4e4>
 8003304:	00c00044 	movi	r3,1
 8003308:	04ffffc4 	movi	r19,-1
 800330c:	d8000e15 	stw	zero,56(sp)
 8003310:	d8c00a15 	stw	r3,40(sp)
 8003314:	05400284 	movi	r21,10
 8003318:	9825883a 	mov	r18,r19
 800331c:	d8000c15 	stw	zero,48(sp)
 8003320:	d8000b15 	stw	zero,44(sp)
 8003324:	182f883a 	mov	r23,r3
 8003328:	00000806 	br	800334c <___vfprintf_internal_r+0x4e8>
 800332c:	ddc00b15 	stw	r23,44(sp)
 8003330:	05c00084 	movi	r23,2
 8003334:	00000506 	br	800334c <___vfprintf_internal_r+0x4e8>
 8003338:	00c00044 	movi	r3,1
 800333c:	d8c00c15 	stw	r3,48(sp)
 8003340:	05c000c4 	movi	r23,3
 8003344:	00000106 	br	800334c <___vfprintf_internal_r+0x4e8>
 8003348:	002f883a 	mov	r23,zero
 800334c:	d8c00f17 	ldw	r3,60(sp)
 8003350:	18c00044 	addi	r3,r3,1
 8003354:	d8c00f15 	stw	r3,60(sp)
 8003358:	003edc06 	br	8002ecc <__alt_data_end+0xfc002ecc>
 800335c:	8005883a 	mov	r2,r16
 8003360:	dfc01a17 	ldw	ra,104(sp)
 8003364:	df001917 	ldw	fp,100(sp)
 8003368:	ddc01817 	ldw	r23,96(sp)
 800336c:	dd801717 	ldw	r22,92(sp)
 8003370:	dd401617 	ldw	r21,88(sp)
 8003374:	dd001517 	ldw	r20,84(sp)
 8003378:	dcc01417 	ldw	r19,80(sp)
 800337c:	dc801317 	ldw	r18,76(sp)
 8003380:	dc401217 	ldw	r17,72(sp)
 8003384:	dc001117 	ldw	r16,68(sp)
 8003388:	dec01b04 	addi	sp,sp,108
 800338c:	f800283a 	ret

08003390 <__vfprintf_internal>:
 8003390:	00820034 	movhi	r2,2048
 8003394:	10958604 	addi	r2,r2,22040
 8003398:	300f883a 	mov	r7,r6
 800339c:	280d883a 	mov	r6,r5
 80033a0:	200b883a 	mov	r5,r4
 80033a4:	11000017 	ldw	r4,0(r2)
 80033a8:	8002e641 	jmpi	8002e64 <___vfprintf_internal_r>

080033ac <__sfvwrite_small_dev>:
 80033ac:	2880000b 	ldhu	r2,0(r5)
 80033b0:	1080020c 	andi	r2,r2,8
 80033b4:	10002126 	beq	r2,zero,800343c <__sfvwrite_small_dev+0x90>
 80033b8:	2880008f 	ldh	r2,2(r5)
 80033bc:	defffa04 	addi	sp,sp,-24
 80033c0:	dc000015 	stw	r16,0(sp)
 80033c4:	dfc00515 	stw	ra,20(sp)
 80033c8:	dd000415 	stw	r20,16(sp)
 80033cc:	dcc00315 	stw	r19,12(sp)
 80033d0:	dc800215 	stw	r18,8(sp)
 80033d4:	dc400115 	stw	r17,4(sp)
 80033d8:	2821883a 	mov	r16,r5
 80033dc:	10001216 	blt	r2,zero,8003428 <__sfvwrite_small_dev+0x7c>
 80033e0:	2027883a 	mov	r19,r4
 80033e4:	3025883a 	mov	r18,r6
 80033e8:	3823883a 	mov	r17,r7
 80033ec:	05010004 	movi	r20,1024
 80033f0:	04400b0e 	bge	zero,r17,8003420 <__sfvwrite_small_dev+0x74>
 80033f4:	880f883a 	mov	r7,r17
 80033f8:	a440010e 	bge	r20,r17,8003400 <__sfvwrite_small_dev+0x54>
 80033fc:	01c10004 	movi	r7,1024
 8003400:	8140008f 	ldh	r5,2(r16)
 8003404:	900d883a 	mov	r6,r18
 8003408:	9809883a 	mov	r4,r19
 800340c:	80035100 	call	8003510 <_write_r>
 8003410:	0080050e 	bge	zero,r2,8003428 <__sfvwrite_small_dev+0x7c>
 8003414:	88a3c83a 	sub	r17,r17,r2
 8003418:	90a5883a 	add	r18,r18,r2
 800341c:	003ff406 	br	80033f0 <__alt_data_end+0xfc0033f0>
 8003420:	0005883a 	mov	r2,zero
 8003424:	00000706 	br	8003444 <__sfvwrite_small_dev+0x98>
 8003428:	8080000b 	ldhu	r2,0(r16)
 800342c:	10801014 	ori	r2,r2,64
 8003430:	8080000d 	sth	r2,0(r16)
 8003434:	00bfffc4 	movi	r2,-1
 8003438:	00000206 	br	8003444 <__sfvwrite_small_dev+0x98>
 800343c:	00bfffc4 	movi	r2,-1
 8003440:	f800283a 	ret
 8003444:	dfc00517 	ldw	ra,20(sp)
 8003448:	dd000417 	ldw	r20,16(sp)
 800344c:	dcc00317 	ldw	r19,12(sp)
 8003450:	dc800217 	ldw	r18,8(sp)
 8003454:	dc400117 	ldw	r17,4(sp)
 8003458:	dc000017 	ldw	r16,0(sp)
 800345c:	dec00604 	addi	sp,sp,24
 8003460:	f800283a 	ret

08003464 <putc>:
 8003464:	defffd04 	addi	sp,sp,-12
 8003468:	00820034 	movhi	r2,2048
 800346c:	dc000115 	stw	r16,4(sp)
 8003470:	dfc00215 	stw	ra,8(sp)
 8003474:	108ceb04 	addi	r2,r2,13228
 8003478:	28800115 	stw	r2,4(r5)
 800347c:	00820034 	movhi	r2,2048
 8003480:	10958604 	addi	r2,r2,22040
 8003484:	d9000005 	stb	r4,0(sp)
 8003488:	2021883a 	mov	r16,r4
 800348c:	11000017 	ldw	r4,0(r2)
 8003490:	01c00044 	movi	r7,1
 8003494:	d80d883a 	mov	r6,sp
 8003498:	80033ac0 	call	80033ac <__sfvwrite_small_dev>
 800349c:	00ffffc4 	movi	r3,-1
 80034a0:	10c00126 	beq	r2,r3,80034a8 <putc+0x44>
 80034a4:	8005883a 	mov	r2,r16
 80034a8:	dfc00217 	ldw	ra,8(sp)
 80034ac:	dc000117 	ldw	r16,4(sp)
 80034b0:	dec00304 	addi	sp,sp,12
 80034b4:	f800283a 	ret

080034b8 <_putc_r>:
 80034b8:	defffd04 	addi	sp,sp,-12
 80034bc:	00820034 	movhi	r2,2048
 80034c0:	dc000115 	stw	r16,4(sp)
 80034c4:	dfc00215 	stw	ra,8(sp)
 80034c8:	108ceb04 	addi	r2,r2,13228
 80034cc:	30800115 	stw	r2,4(r6)
 80034d0:	00820034 	movhi	r2,2048
 80034d4:	10958604 	addi	r2,r2,22040
 80034d8:	11000017 	ldw	r4,0(r2)
 80034dc:	2821883a 	mov	r16,r5
 80034e0:	01c00044 	movi	r7,1
 80034e4:	300b883a 	mov	r5,r6
 80034e8:	d80d883a 	mov	r6,sp
 80034ec:	dc000005 	stb	r16,0(sp)
 80034f0:	80033ac0 	call	80033ac <__sfvwrite_small_dev>
 80034f4:	00ffffc4 	movi	r3,-1
 80034f8:	10c00126 	beq	r2,r3,8003500 <_putc_r+0x48>
 80034fc:	8005883a 	mov	r2,r16
 8003500:	dfc00217 	ldw	ra,8(sp)
 8003504:	dc000117 	ldw	r16,4(sp)
 8003508:	dec00304 	addi	sp,sp,12
 800350c:	f800283a 	ret

08003510 <_write_r>:
 8003510:	defffd04 	addi	sp,sp,-12
 8003514:	dc000015 	stw	r16,0(sp)
 8003518:	04020034 	movhi	r16,2048
 800351c:	dc400115 	stw	r17,4(sp)
 8003520:	84165e04 	addi	r16,r16,22904
 8003524:	2023883a 	mov	r17,r4
 8003528:	2809883a 	mov	r4,r5
 800352c:	300b883a 	mov	r5,r6
 8003530:	380d883a 	mov	r6,r7
 8003534:	dfc00215 	stw	ra,8(sp)
 8003538:	80000015 	stw	zero,0(r16)
 800353c:	80038e00 	call	80038e0 <write>
 8003540:	00ffffc4 	movi	r3,-1
 8003544:	10c0031e 	bne	r2,r3,8003554 <_write_r+0x44>
 8003548:	80c00017 	ldw	r3,0(r16)
 800354c:	18000126 	beq	r3,zero,8003554 <_write_r+0x44>
 8003550:	88c00015 	stw	r3,0(r17)
 8003554:	dfc00217 	ldw	ra,8(sp)
 8003558:	dc400117 	ldw	r17,4(sp)
 800355c:	dc000017 	ldw	r16,0(sp)
 8003560:	dec00304 	addi	sp,sp,12
 8003564:	f800283a 	ret

08003568 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8003568:	defffc04 	addi	sp,sp,-16
 800356c:	df000315 	stw	fp,12(sp)
 8003570:	df000304 	addi	fp,sp,12
 8003574:	e13ffd15 	stw	r4,-12(fp)
 8003578:	e17ffe15 	stw	r5,-8(fp)
 800357c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8003580:	e0fffe17 	ldw	r3,-8(fp)
 8003584:	e0bffd17 	ldw	r2,-12(fp)
 8003588:	18800c26 	beq	r3,r2,80035bc <alt_load_section+0x54>
  {
    while( to != end )
 800358c:	00000806 	br	80035b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8003590:	e0bffe17 	ldw	r2,-8(fp)
 8003594:	10c00104 	addi	r3,r2,4
 8003598:	e0fffe15 	stw	r3,-8(fp)
 800359c:	e0fffd17 	ldw	r3,-12(fp)
 80035a0:	19000104 	addi	r4,r3,4
 80035a4:	e13ffd15 	stw	r4,-12(fp)
 80035a8:	18c00017 	ldw	r3,0(r3)
 80035ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80035b0:	e0fffe17 	ldw	r3,-8(fp)
 80035b4:	e0bfff17 	ldw	r2,-4(fp)
 80035b8:	18bff51e 	bne	r3,r2,8003590 <__alt_data_end+0xfc003590>
    {
      *to++ = *from++;
    }
  }
}
 80035bc:	0001883a 	nop
 80035c0:	e037883a 	mov	sp,fp
 80035c4:	df000017 	ldw	fp,0(sp)
 80035c8:	dec00104 	addi	sp,sp,4
 80035cc:	f800283a 	ret

080035d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80035d0:	defffe04 	addi	sp,sp,-8
 80035d4:	dfc00115 	stw	ra,4(sp)
 80035d8:	df000015 	stw	fp,0(sp)
 80035dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80035e0:	01820034 	movhi	r6,2048
 80035e4:	31959004 	addi	r6,r6,22080
 80035e8:	01420034 	movhi	r5,2048
 80035ec:	2954c804 	addi	r5,r5,21280
 80035f0:	01020034 	movhi	r4,2048
 80035f4:	21159004 	addi	r4,r4,22080
 80035f8:	80035680 	call	8003568 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80035fc:	01820034 	movhi	r6,2048
 8003600:	31808c04 	addi	r6,r6,560
 8003604:	01420034 	movhi	r5,2048
 8003608:	29400804 	addi	r5,r5,32
 800360c:	01020034 	movhi	r4,2048
 8003610:	21000804 	addi	r4,r4,32
 8003614:	80035680 	call	8003568 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8003618:	01820034 	movhi	r6,2048
 800361c:	3194c804 	addi	r6,r6,21280
 8003620:	01420034 	movhi	r5,2048
 8003624:	29542d04 	addi	r5,r5,20660
 8003628:	01020034 	movhi	r4,2048
 800362c:	21142d04 	addi	r4,r4,20660
 8003630:	80035680 	call	8003568 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8003634:	80041040 	call	8004104 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8003638:	80042f00 	call	80042f0 <alt_icache_flush_all>
}
 800363c:	0001883a 	nop
 8003640:	e037883a 	mov	sp,fp
 8003644:	dfc00117 	ldw	ra,4(sp)
 8003648:	df000017 	ldw	fp,0(sp)
 800364c:	dec00204 	addi	sp,sp,8
 8003650:	f800283a 	ret

08003654 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8003654:	defffd04 	addi	sp,sp,-12
 8003658:	dfc00215 	stw	ra,8(sp)
 800365c:	df000115 	stw	fp,4(sp)
 8003660:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8003664:	0009883a 	mov	r4,zero
 8003668:	8003a140 	call	8003a14 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800366c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8003670:	8003a4c0 	call	8003a4c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8003674:	01820034 	movhi	r6,2048
 8003678:	3194bb04 	addi	r6,r6,21228
 800367c:	01420034 	movhi	r5,2048
 8003680:	2954bb04 	addi	r5,r5,21228
 8003684:	01020034 	movhi	r4,2048
 8003688:	2114bb04 	addi	r4,r4,21228
 800368c:	80046940 	call	8004694 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8003690:	80042300 	call	8004230 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8003694:	01020034 	movhi	r4,2048
 8003698:	2110a404 	addi	r4,r4,17040
 800369c:	8004d340 	call	8004d34 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80036a0:	d0a0de17 	ldw	r2,-31880(gp)
 80036a4:	d0e0df17 	ldw	r3,-31876(gp)
 80036a8:	d120e017 	ldw	r4,-31872(gp)
 80036ac:	200d883a 	mov	r6,r4
 80036b0:	180b883a 	mov	r5,r3
 80036b4:	1009883a 	mov	r4,r2
 80036b8:	800074c0 	call	800074c <main>
 80036bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80036c0:	01000044 	movi	r4,1
 80036c4:	800402c0 	call	800402c <close>
  exit (result);
 80036c8:	e13fff17 	ldw	r4,-4(fp)
 80036cc:	8004d480 	call	8004d48 <exit>

080036d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80036d0:	defffa04 	addi	sp,sp,-24
 80036d4:	df000515 	stw	fp,20(sp)
 80036d8:	df000504 	addi	fp,sp,20
 80036dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80036e0:	0005303a 	rdctl	r2,status
 80036e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80036e8:	e0fffc17 	ldw	r3,-16(fp)
 80036ec:	00bfff84 	movi	r2,-2
 80036f0:	1884703a 	and	r2,r3,r2
 80036f4:	1001703a 	wrctl	status,r2
  
  return context;
 80036f8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80036fc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8003700:	e0bfff17 	ldw	r2,-4(fp)
 8003704:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8003708:	e0bffd17 	ldw	r2,-12(fp)
 800370c:	10800017 	ldw	r2,0(r2)
 8003710:	e0fffd17 	ldw	r3,-12(fp)
 8003714:	18c00117 	ldw	r3,4(r3)
 8003718:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800371c:	e0bffd17 	ldw	r2,-12(fp)
 8003720:	10800117 	ldw	r2,4(r2)
 8003724:	e0fffd17 	ldw	r3,-12(fp)
 8003728:	18c00017 	ldw	r3,0(r3)
 800372c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8003730:	e0bffd17 	ldw	r2,-12(fp)
 8003734:	e0fffd17 	ldw	r3,-12(fp)
 8003738:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800373c:	e0bffd17 	ldw	r2,-12(fp)
 8003740:	e0fffd17 	ldw	r3,-12(fp)
 8003744:	10c00015 	stw	r3,0(r2)
 8003748:	e0bffb17 	ldw	r2,-20(fp)
 800374c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003750:	e0bffe17 	ldw	r2,-8(fp)
 8003754:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8003758:	0001883a 	nop
 800375c:	e037883a 	mov	sp,fp
 8003760:	df000017 	ldw	fp,0(sp)
 8003764:	dec00104 	addi	sp,sp,4
 8003768:	f800283a 	ret

0800376c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800376c:	defffb04 	addi	sp,sp,-20
 8003770:	dfc00415 	stw	ra,16(sp)
 8003774:	df000315 	stw	fp,12(sp)
 8003778:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800377c:	d0a00617 	ldw	r2,-32744(gp)
 8003780:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8003784:	d0a0e217 	ldw	r2,-31864(gp)
 8003788:	10800044 	addi	r2,r2,1
 800378c:	d0a0e215 	stw	r2,-31864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8003790:	00002e06 	br	800384c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8003794:	e0bffd17 	ldw	r2,-12(fp)
 8003798:	10800017 	ldw	r2,0(r2)
 800379c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80037a0:	e0bffd17 	ldw	r2,-12(fp)
 80037a4:	10800403 	ldbu	r2,16(r2)
 80037a8:	10803fcc 	andi	r2,r2,255
 80037ac:	10000426 	beq	r2,zero,80037c0 <alt_tick+0x54>
 80037b0:	d0a0e217 	ldw	r2,-31864(gp)
 80037b4:	1000021e 	bne	r2,zero,80037c0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80037b8:	e0bffd17 	ldw	r2,-12(fp)
 80037bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80037c0:	e0bffd17 	ldw	r2,-12(fp)
 80037c4:	10800217 	ldw	r2,8(r2)
 80037c8:	d0e0e217 	ldw	r3,-31864(gp)
 80037cc:	18801d36 	bltu	r3,r2,8003844 <alt_tick+0xd8>
 80037d0:	e0bffd17 	ldw	r2,-12(fp)
 80037d4:	10800403 	ldbu	r2,16(r2)
 80037d8:	10803fcc 	andi	r2,r2,255
 80037dc:	1000191e 	bne	r2,zero,8003844 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80037e0:	e0bffd17 	ldw	r2,-12(fp)
 80037e4:	10800317 	ldw	r2,12(r2)
 80037e8:	e0fffd17 	ldw	r3,-12(fp)
 80037ec:	18c00517 	ldw	r3,20(r3)
 80037f0:	1809883a 	mov	r4,r3
 80037f4:	103ee83a 	callr	r2
 80037f8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80037fc:	e0bfff17 	ldw	r2,-4(fp)
 8003800:	1000031e 	bne	r2,zero,8003810 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8003804:	e13ffd17 	ldw	r4,-12(fp)
 8003808:	80036d00 	call	80036d0 <alt_alarm_stop>
 800380c:	00000d06 	br	8003844 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8003810:	e0bffd17 	ldw	r2,-12(fp)
 8003814:	10c00217 	ldw	r3,8(r2)
 8003818:	e0bfff17 	ldw	r2,-4(fp)
 800381c:	1887883a 	add	r3,r3,r2
 8003820:	e0bffd17 	ldw	r2,-12(fp)
 8003824:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8003828:	e0bffd17 	ldw	r2,-12(fp)
 800382c:	10c00217 	ldw	r3,8(r2)
 8003830:	d0a0e217 	ldw	r2,-31864(gp)
 8003834:	1880032e 	bgeu	r3,r2,8003844 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8003838:	e0bffd17 	ldw	r2,-12(fp)
 800383c:	00c00044 	movi	r3,1
 8003840:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8003844:	e0bffe17 	ldw	r2,-8(fp)
 8003848:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800384c:	e0fffd17 	ldw	r3,-12(fp)
 8003850:	d0a00604 	addi	r2,gp,-32744
 8003854:	18bfcf1e 	bne	r3,r2,8003794 <__alt_data_end+0xfc003794>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8003858:	0001883a 	nop
}
 800385c:	0001883a 	nop
 8003860:	e037883a 	mov	sp,fp
 8003864:	dfc00117 	ldw	ra,4(sp)
 8003868:	df000017 	ldw	fp,0(sp)
 800386c:	dec00204 	addi	sp,sp,8
 8003870:	f800283a 	ret

08003874 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8003874:	defffd04 	addi	sp,sp,-12
 8003878:	dfc00215 	stw	ra,8(sp)
 800387c:	df000115 	stw	fp,4(sp)
 8003880:	df000104 	addi	fp,sp,4
 8003884:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8003888:	e13fff17 	ldw	r4,-4(fp)
 800388c:	8003fcc0 	call	8003fcc <alt_busy_sleep>
}
 8003890:	e037883a 	mov	sp,fp
 8003894:	dfc00117 	ldw	ra,4(sp)
 8003898:	df000017 	ldw	fp,0(sp)
 800389c:	dec00204 	addi	sp,sp,8
 80038a0:	f800283a 	ret

080038a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80038a4:	defffe04 	addi	sp,sp,-8
 80038a8:	dfc00115 	stw	ra,4(sp)
 80038ac:	df000015 	stw	fp,0(sp)
 80038b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80038b4:	d0a00d17 	ldw	r2,-32716(gp)
 80038b8:	10000326 	beq	r2,zero,80038c8 <alt_get_errno+0x24>
 80038bc:	d0a00d17 	ldw	r2,-32716(gp)
 80038c0:	103ee83a 	callr	r2
 80038c4:	00000106 	br	80038cc <alt_get_errno+0x28>
 80038c8:	d0a0dd04 	addi	r2,gp,-31884
}
 80038cc:	e037883a 	mov	sp,fp
 80038d0:	dfc00117 	ldw	ra,4(sp)
 80038d4:	df000017 	ldw	fp,0(sp)
 80038d8:	dec00204 	addi	sp,sp,8
 80038dc:	f800283a 	ret

080038e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80038e0:	defff904 	addi	sp,sp,-28
 80038e4:	dfc00615 	stw	ra,24(sp)
 80038e8:	df000515 	stw	fp,20(sp)
 80038ec:	df000504 	addi	fp,sp,20
 80038f0:	e13ffd15 	stw	r4,-12(fp)
 80038f4:	e17ffe15 	stw	r5,-8(fp)
 80038f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80038fc:	e0bffd17 	ldw	r2,-12(fp)
 8003900:	10000816 	blt	r2,zero,8003924 <write+0x44>
 8003904:	01400304 	movi	r5,12
 8003908:	e13ffd17 	ldw	r4,-12(fp)
 800390c:	8002c740 	call	8002c74 <__mulsi3>
 8003910:	1007883a 	mov	r3,r2
 8003914:	00820034 	movhi	r2,2048
 8003918:	10952104 	addi	r2,r2,21636
 800391c:	1885883a 	add	r2,r3,r2
 8003920:	00000106 	br	8003928 <write+0x48>
 8003924:	0005883a 	mov	r2,zero
 8003928:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800392c:	e0bffb17 	ldw	r2,-20(fp)
 8003930:	10002126 	beq	r2,zero,80039b8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8003934:	e0bffb17 	ldw	r2,-20(fp)
 8003938:	10800217 	ldw	r2,8(r2)
 800393c:	108000cc 	andi	r2,r2,3
 8003940:	10001826 	beq	r2,zero,80039a4 <write+0xc4>
 8003944:	e0bffb17 	ldw	r2,-20(fp)
 8003948:	10800017 	ldw	r2,0(r2)
 800394c:	10800617 	ldw	r2,24(r2)
 8003950:	10001426 	beq	r2,zero,80039a4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8003954:	e0bffb17 	ldw	r2,-20(fp)
 8003958:	10800017 	ldw	r2,0(r2)
 800395c:	10800617 	ldw	r2,24(r2)
 8003960:	e0ffff17 	ldw	r3,-4(fp)
 8003964:	180d883a 	mov	r6,r3
 8003968:	e17ffe17 	ldw	r5,-8(fp)
 800396c:	e13ffb17 	ldw	r4,-20(fp)
 8003970:	103ee83a 	callr	r2
 8003974:	e0bffc15 	stw	r2,-16(fp)
 8003978:	e0bffc17 	ldw	r2,-16(fp)
 800397c:	1000070e 	bge	r2,zero,800399c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8003980:	80038a40 	call	80038a4 <alt_get_errno>
 8003984:	1007883a 	mov	r3,r2
 8003988:	e0bffc17 	ldw	r2,-16(fp)
 800398c:	0085c83a 	sub	r2,zero,r2
 8003990:	18800015 	stw	r2,0(r3)
        return -1;
 8003994:	00bfffc4 	movi	r2,-1
 8003998:	00000c06 	br	80039cc <write+0xec>
      }
      return rval;
 800399c:	e0bffc17 	ldw	r2,-16(fp)
 80039a0:	00000a06 	br	80039cc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80039a4:	80038a40 	call	80038a4 <alt_get_errno>
 80039a8:	1007883a 	mov	r3,r2
 80039ac:	00800344 	movi	r2,13
 80039b0:	18800015 	stw	r2,0(r3)
 80039b4:	00000406 	br	80039c8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80039b8:	80038a40 	call	80038a4 <alt_get_errno>
 80039bc:	1007883a 	mov	r3,r2
 80039c0:	00801444 	movi	r2,81
 80039c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80039c8:	00bfffc4 	movi	r2,-1
}
 80039cc:	e037883a 	mov	sp,fp
 80039d0:	dfc00117 	ldw	ra,4(sp)
 80039d4:	df000017 	ldw	fp,0(sp)
 80039d8:	dec00204 	addi	sp,sp,8
 80039dc:	f800283a 	ret

080039e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80039e0:	defffd04 	addi	sp,sp,-12
 80039e4:	dfc00215 	stw	ra,8(sp)
 80039e8:	df000115 	stw	fp,4(sp)
 80039ec:	df000104 	addi	fp,sp,4
 80039f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80039f4:	d1600a04 	addi	r5,gp,-32728
 80039f8:	e13fff17 	ldw	r4,-4(fp)
 80039fc:	800418c0 	call	800418c <alt_dev_llist_insert>
}
 8003a00:	e037883a 	mov	sp,fp
 8003a04:	dfc00117 	ldw	ra,4(sp)
 8003a08:	df000017 	ldw	fp,0(sp)
 8003a0c:	dec00204 	addi	sp,sp,8
 8003a10:	f800283a 	ret

08003a14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8003a14:	defffd04 	addi	sp,sp,-12
 8003a18:	dfc00215 	stw	ra,8(sp)
 8003a1c:	df000115 	stw	fp,4(sp)
 8003a20:	df000104 	addi	fp,sp,4
 8003a24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8003a28:	8004a180 	call	8004a18 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8003a2c:	00800044 	movi	r2,1
 8003a30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8003a34:	0001883a 	nop
 8003a38:	e037883a 	mov	sp,fp
 8003a3c:	dfc00117 	ldw	ra,4(sp)
 8003a40:	df000017 	ldw	fp,0(sp)
 8003a44:	dec00204 	addi	sp,sp,8
 8003a48:	f800283a 	ret

08003a4c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8003a4c:	defffe04 	addi	sp,sp,-8
 8003a50:	dfc00115 	stw	ra,4(sp)
 8003a54:	df000015 	stw	fp,0(sp)
 8003a58:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8003a5c:	01c0fa04 	movi	r7,1000
 8003a60:	01800084 	movi	r6,2
 8003a64:	000b883a 	mov	r5,zero
 8003a68:	01002004 	movi	r4,128
 8003a6c:	8003f500 	call	8003f50 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8003a70:	01020034 	movhi	r4,2048
 8003a74:	21150c04 	addi	r4,r4,21552
 8003a78:	80039e00 	call	80039e0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 8003a7c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8003a80:	0001883a 	nop
}
 8003a84:	0001883a 	nop
 8003a88:	e037883a 	mov	sp,fp
 8003a8c:	dfc00117 	ldw	ra,4(sp)
 8003a90:	df000017 	ldw	fp,0(sp)
 8003a94:	dec00204 	addi	sp,sp,8
 8003a98:	f800283a 	ret

08003a9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8003a9c:	defffa04 	addi	sp,sp,-24
 8003aa0:	dfc00515 	stw	ra,20(sp)
 8003aa4:	df000415 	stw	fp,16(sp)
 8003aa8:	df000404 	addi	fp,sp,16
 8003aac:	e13ffd15 	stw	r4,-12(fp)
 8003ab0:	e17ffe15 	stw	r5,-8(fp)
 8003ab4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003ab8:	e0bffd17 	ldw	r2,-12(fp)
 8003abc:	10800017 	ldw	r2,0(r2)
 8003ac0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8003ac4:	e0bffc17 	ldw	r2,-16(fp)
 8003ac8:	10c00a04 	addi	r3,r2,40
 8003acc:	e0bffd17 	ldw	r2,-12(fp)
 8003ad0:	10800217 	ldw	r2,8(r2)
 8003ad4:	100f883a 	mov	r7,r2
 8003ad8:	e1bfff17 	ldw	r6,-4(fp)
 8003adc:	e17ffe17 	ldw	r5,-8(fp)
 8003ae0:	1809883a 	mov	r4,r3
 8003ae4:	8003b5c0 	call	8003b5c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8003ae8:	e037883a 	mov	sp,fp
 8003aec:	dfc00117 	ldw	ra,4(sp)
 8003af0:	df000017 	ldw	fp,0(sp)
 8003af4:	dec00204 	addi	sp,sp,8
 8003af8:	f800283a 	ret

08003afc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8003afc:	defffa04 	addi	sp,sp,-24
 8003b00:	dfc00515 	stw	ra,20(sp)
 8003b04:	df000415 	stw	fp,16(sp)
 8003b08:	df000404 	addi	fp,sp,16
 8003b0c:	e13ffd15 	stw	r4,-12(fp)
 8003b10:	e17ffe15 	stw	r5,-8(fp)
 8003b14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003b18:	e0bffd17 	ldw	r2,-12(fp)
 8003b1c:	10800017 	ldw	r2,0(r2)
 8003b20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8003b24:	e0bffc17 	ldw	r2,-16(fp)
 8003b28:	10c00a04 	addi	r3,r2,40
 8003b2c:	e0bffd17 	ldw	r2,-12(fp)
 8003b30:	10800217 	ldw	r2,8(r2)
 8003b34:	100f883a 	mov	r7,r2
 8003b38:	e1bfff17 	ldw	r6,-4(fp)
 8003b3c:	e17ffe17 	ldw	r5,-8(fp)
 8003b40:	1809883a 	mov	r4,r3
 8003b44:	8003c480 	call	8003c48 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8003b48:	e037883a 	mov	sp,fp
 8003b4c:	dfc00117 	ldw	ra,4(sp)
 8003b50:	df000017 	ldw	fp,0(sp)
 8003b54:	dec00204 	addi	sp,sp,8
 8003b58:	f800283a 	ret

08003b5c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 8003b5c:	defff704 	addi	sp,sp,-36
 8003b60:	df000815 	stw	fp,32(sp)
 8003b64:	df000804 	addi	fp,sp,32
 8003b68:	e13ffc15 	stw	r4,-16(fp)
 8003b6c:	e17ffd15 	stw	r5,-12(fp)
 8003b70:	e1bffe15 	stw	r6,-8(fp)
 8003b74:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 8003b78:	e0bffc17 	ldw	r2,-16(fp)
 8003b7c:	10800017 	ldw	r2,0(r2)
 8003b80:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 8003b84:	e0bffd17 	ldw	r2,-12(fp)
 8003b88:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 8003b8c:	e0bffe17 	ldw	r2,-8(fp)
 8003b90:	e0fffd17 	ldw	r3,-12(fp)
 8003b94:	1885883a 	add	r2,r3,r2
 8003b98:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 8003b9c:	00001206 	br	8003be8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8003ba0:	e0bff917 	ldw	r2,-28(fp)
 8003ba4:	10800037 	ldwio	r2,0(r2)
 8003ba8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 8003bac:	e0bffb17 	ldw	r2,-20(fp)
 8003bb0:	10a0000c 	andi	r2,r2,32768
 8003bb4:	10000626 	beq	r2,zero,8003bd0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8003bb8:	e0bff817 	ldw	r2,-32(fp)
 8003bbc:	10c00044 	addi	r3,r2,1
 8003bc0:	e0fff815 	stw	r3,-32(fp)
 8003bc4:	e0fffb17 	ldw	r3,-20(fp)
 8003bc8:	10c00005 	stb	r3,0(r2)
 8003bcc:	00000606 	br	8003be8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 8003bd0:	e0fff817 	ldw	r3,-32(fp)
 8003bd4:	e0bffd17 	ldw	r2,-12(fp)
 8003bd8:	1880071e 	bne	r3,r2,8003bf8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 8003bdc:	e0bfff17 	ldw	r2,-4(fp)
 8003be0:	1090000c 	andi	r2,r2,16384
 8003be4:	1000061e 	bne	r2,zero,8003c00 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 8003be8:	e0fff817 	ldw	r3,-32(fp)
 8003bec:	e0bffa17 	ldw	r2,-24(fp)
 8003bf0:	18bfeb36 	bltu	r3,r2,8003ba0 <__alt_data_end+0xfc003ba0>
 8003bf4:	00000306 	br	8003c04 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 8003bf8:	0001883a 	nop
 8003bfc:	00000106 	br	8003c04 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 8003c00:	0001883a 	nop
    
  }

  if (ptr != buffer)
 8003c04:	e0fff817 	ldw	r3,-32(fp)
 8003c08:	e0bffd17 	ldw	r2,-12(fp)
 8003c0c:	18800426 	beq	r3,r2,8003c20 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 8003c10:	e0fff817 	ldw	r3,-32(fp)
 8003c14:	e0bffd17 	ldw	r2,-12(fp)
 8003c18:	1885c83a 	sub	r2,r3,r2
 8003c1c:	00000606 	br	8003c38 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 8003c20:	e0bfff17 	ldw	r2,-4(fp)
 8003c24:	1090000c 	andi	r2,r2,16384
 8003c28:	10000226 	beq	r2,zero,8003c34 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 8003c2c:	00bffd44 	movi	r2,-11
 8003c30:	00000106 	br	8003c38 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 8003c34:	00bffec4 	movi	r2,-5
}
 8003c38:	e037883a 	mov	sp,fp
 8003c3c:	df000017 	ldw	fp,0(sp)
 8003c40:	dec00104 	addi	sp,sp,4
 8003c44:	f800283a 	ret

08003c48 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8003c48:	defff904 	addi	sp,sp,-28
 8003c4c:	df000615 	stw	fp,24(sp)
 8003c50:	df000604 	addi	fp,sp,24
 8003c54:	e13ffc15 	stw	r4,-16(fp)
 8003c58:	e17ffd15 	stw	r5,-12(fp)
 8003c5c:	e1bffe15 	stw	r6,-8(fp)
 8003c60:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 8003c64:	e0bffc17 	ldw	r2,-16(fp)
 8003c68:	10800017 	ldw	r2,0(r2)
 8003c6c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 8003c70:	e0bffe17 	ldw	r2,-8(fp)
 8003c74:	e0fffd17 	ldw	r3,-12(fp)
 8003c78:	1885883a 	add	r2,r3,r2
 8003c7c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 8003c80:	00000e06 	br	8003cbc <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8003c84:	e0bffa17 	ldw	r2,-24(fp)
 8003c88:	10800104 	addi	r2,r2,4
 8003c8c:	10800037 	ldwio	r2,0(r2)
 8003c90:	10bfffec 	andhi	r2,r2,65535
 8003c94:	10000926 	beq	r2,zero,8003cbc <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 8003c98:	e0fffa17 	ldw	r3,-24(fp)
 8003c9c:	e0bffd17 	ldw	r2,-12(fp)
 8003ca0:	11000044 	addi	r4,r2,1
 8003ca4:	e13ffd15 	stw	r4,-12(fp)
 8003ca8:	10800003 	ldbu	r2,0(r2)
 8003cac:	10803fcc 	andi	r2,r2,255
 8003cb0:	1080201c 	xori	r2,r2,128
 8003cb4:	10bfe004 	addi	r2,r2,-128
 8003cb8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 8003cbc:	e0fffd17 	ldw	r3,-12(fp)
 8003cc0:	e0bffb17 	ldw	r2,-20(fp)
 8003cc4:	18bfef36 	bltu	r3,r2,8003c84 <__alt_data_end+0xfc003c84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 8003cc8:	e0bffe17 	ldw	r2,-8(fp)
}
 8003ccc:	e037883a 	mov	sp,fp
 8003cd0:	df000017 	ldw	fp,0(sp)
 8003cd4:	dec00104 	addi	sp,sp,4
 8003cd8:	f800283a 	ret

08003cdc <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 8003cdc:	defff404 	addi	sp,sp,-48
 8003ce0:	df000b15 	stw	fp,44(sp)
 8003ce4:	df000b04 	addi	fp,sp,44
 8003ce8:	e13ffc15 	stw	r4,-16(fp)
 8003cec:	e17ffd15 	stw	r5,-12(fp)
 8003cf0:	e1bffe15 	stw	r6,-8(fp)
 8003cf4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 8003cf8:	e0ffff17 	ldw	r3,-4(fp)
 8003cfc:	e0bffe17 	ldw	r2,-8(fp)
 8003d00:	1885883a 	add	r2,r3,r2
 8003d04:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 8003d08:	e0c00217 	ldw	r3,8(fp)
 8003d0c:	e0800117 	ldw	r2,4(fp)
 8003d10:	1885883a 	add	r2,r3,r2
 8003d14:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 8003d18:	e0800117 	ldw	r2,4(fp)
 8003d1c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 8003d20:	e0bffe17 	ldw	r2,-8(fp)
 8003d24:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 8003d28:	00800044 	movi	r2,1
 8003d2c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 8003d30:	e0bffc17 	ldw	r2,-16(fp)
 8003d34:	10800504 	addi	r2,r2,20
 8003d38:	1009883a 	mov	r4,r2
 8003d3c:	00c00044 	movi	r3,1
 8003d40:	e0bffd17 	ldw	r2,-12(fp)
 8003d44:	1884983a 	sll	r2,r3,r2
 8003d48:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 8003d4c:	e0800317 	ldw	r2,12(fp)
 8003d50:	1080008c 	andi	r2,r2,2
 8003d54:	1000051e 	bne	r2,zero,8003d6c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 8003d58:	e0bffc17 	ldw	r2,-16(fp)
 8003d5c:	10800304 	addi	r2,r2,12
 8003d60:	1007883a 	mov	r3,r2
 8003d64:	00810004 	movi	r2,1024
 8003d68:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8003d6c:	e0bffc17 	ldw	r2,-16(fp)
 8003d70:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8003d74:	e0bffc17 	ldw	r2,-16(fp)
 8003d78:	10800204 	addi	r2,r2,8
 8003d7c:	10800037 	ldwio	r2,0(r2)
 8003d80:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8003d84:	e0bffa17 	ldw	r2,-24(fp)
 8003d88:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8003d8c:	10000226 	beq	r2,zero,8003d98 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8003d90:	e0bff717 	ldw	r2,-36(fp)
 8003d94:	1000031e 	bne	r2,zero,8003da4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8003d98:	e0bffa17 	ldw	r2,-24(fp)
 8003d9c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8003da0:	103ff426 	beq	r2,zero,8003d74 <__alt_data_end+0xfc003d74>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 8003da4:	e0bffa17 	ldw	r2,-24(fp)
 8003da8:	1080100c 	andi	r2,r2,64
 8003dac:	10001e26 	beq	r2,zero,8003e28 <alt_avalon_spi_command+0x14c>
 8003db0:	e0bff717 	ldw	r2,-36(fp)
 8003db4:	00801c0e 	bge	zero,r2,8003e28 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 8003db8:	e0bff717 	ldw	r2,-36(fp)
 8003dbc:	10bfffc4 	addi	r2,r2,-1
 8003dc0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 8003dc4:	e0ffff17 	ldw	r3,-4(fp)
 8003dc8:	e0bff817 	ldw	r2,-32(fp)
 8003dcc:	18800a2e 	bgeu	r3,r2,8003df8 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 8003dd0:	e0bffc17 	ldw	r2,-16(fp)
 8003dd4:	10800104 	addi	r2,r2,4
 8003dd8:	1009883a 	mov	r4,r2
 8003ddc:	e0bfff17 	ldw	r2,-4(fp)
 8003de0:	10c00044 	addi	r3,r2,1
 8003de4:	e0ffff15 	stw	r3,-4(fp)
 8003de8:	10800003 	ldbu	r2,0(r2)
 8003dec:	10803fcc 	andi	r2,r2,255
 8003df0:	20800035 	stwio	r2,0(r4)
 8003df4:	00000c06 	br	8003e28 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 8003df8:	e0bff517 	ldw	r2,-44(fp)
 8003dfc:	10000826 	beq	r2,zero,8003e20 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 8003e00:	e0bff517 	ldw	r2,-44(fp)
 8003e04:	10bfffc4 	addi	r2,r2,-1
 8003e08:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 8003e0c:	e0bffc17 	ldw	r2,-16(fp)
 8003e10:	10800104 	addi	r2,r2,4
 8003e14:	0007883a 	mov	r3,zero
 8003e18:	10c00035 	stwio	r3,0(r2)
 8003e1c:	00000206 	br	8003e28 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 8003e20:	00bf0004 	movi	r2,-1024
 8003e24:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 8003e28:	e0bffa17 	ldw	r2,-24(fp)
 8003e2c:	1080200c 	andi	r2,r2,128
 8003e30:	103fd026 	beq	r2,zero,8003d74 <__alt_data_end+0xfc003d74>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8003e34:	e0bffc17 	ldw	r2,-16(fp)
 8003e38:	10800037 	ldwio	r2,0(r2)
 8003e3c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 8003e40:	e0bff617 	ldw	r2,-40(fp)
 8003e44:	10000426 	beq	r2,zero,8003e58 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 8003e48:	e0bff617 	ldw	r2,-40(fp)
 8003e4c:	10bfffc4 	addi	r2,r2,-1
 8003e50:	e0bff615 	stw	r2,-40(fp)
 8003e54:	00000506 	br	8003e6c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 8003e58:	e0800217 	ldw	r2,8(fp)
 8003e5c:	10c00044 	addi	r3,r2,1
 8003e60:	e0c00215 	stw	r3,8(fp)
 8003e64:	e0fffb17 	ldw	r3,-20(fp)
 8003e68:	10c00005 	stb	r3,0(r2)
      credits++;
 8003e6c:	e0bff717 	ldw	r2,-36(fp)
 8003e70:	10800044 	addi	r2,r2,1
 8003e74:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 8003e78:	e0bff617 	ldw	r2,-40(fp)
 8003e7c:	103fbd1e 	bne	r2,zero,8003d74 <__alt_data_end+0xfc003d74>
 8003e80:	e0c00217 	ldw	r3,8(fp)
 8003e84:	e0bff917 	ldw	r2,-28(fp)
 8003e88:	18bfba1e 	bne	r3,r2,8003d74 <__alt_data_end+0xfc003d74>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8003e8c:	e0bffc17 	ldw	r2,-16(fp)
 8003e90:	10800204 	addi	r2,r2,8
 8003e94:	10800037 	ldwio	r2,0(r2)
 8003e98:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 8003e9c:	e0bffa17 	ldw	r2,-24(fp)
 8003ea0:	1080080c 	andi	r2,r2,32
 8003ea4:	103ff926 	beq	r2,zero,8003e8c <__alt_data_end+0xfc003e8c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 8003ea8:	e0800317 	ldw	r2,12(fp)
 8003eac:	1080004c 	andi	r2,r2,1
 8003eb0:	1000041e 	bne	r2,zero,8003ec4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 8003eb4:	e0bffc17 	ldw	r2,-16(fp)
 8003eb8:	10800304 	addi	r2,r2,12
 8003ebc:	0007883a 	mov	r3,zero
 8003ec0:	10c00035 	stwio	r3,0(r2)

  return read_length;
 8003ec4:	e0800117 	ldw	r2,4(fp)
}
 8003ec8:	e037883a 	mov	sp,fp
 8003ecc:	df000017 	ldw	fp,0(sp)
 8003ed0:	dec00104 	addi	sp,sp,4
 8003ed4:	f800283a 	ret

08003ed8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8003ed8:	defffa04 	addi	sp,sp,-24
 8003edc:	dfc00515 	stw	ra,20(sp)
 8003ee0:	df000415 	stw	fp,16(sp)
 8003ee4:	df000404 	addi	fp,sp,16
 8003ee8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8003eec:	0007883a 	mov	r3,zero
 8003ef0:	e0bfff17 	ldw	r2,-4(fp)
 8003ef4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8003ef8:	e0bfff17 	ldw	r2,-4(fp)
 8003efc:	10800104 	addi	r2,r2,4
 8003f00:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003f04:	0005303a 	rdctl	r2,status
 8003f08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003f0c:	e0fffd17 	ldw	r3,-12(fp)
 8003f10:	00bfff84 	movi	r2,-2
 8003f14:	1884703a 	and	r2,r3,r2
 8003f18:	1001703a 	wrctl	status,r2
  
  return context;
 8003f1c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8003f20:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8003f24:	800376c0 	call	800376c <alt_tick>
 8003f28:	e0bffc17 	ldw	r2,-16(fp)
 8003f2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003f30:	e0bffe17 	ldw	r2,-8(fp)
 8003f34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8003f38:	0001883a 	nop
 8003f3c:	e037883a 	mov	sp,fp
 8003f40:	dfc00117 	ldw	ra,4(sp)
 8003f44:	df000017 	ldw	fp,0(sp)
 8003f48:	dec00204 	addi	sp,sp,8
 8003f4c:	f800283a 	ret

08003f50 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8003f50:	defff804 	addi	sp,sp,-32
 8003f54:	dfc00715 	stw	ra,28(sp)
 8003f58:	df000615 	stw	fp,24(sp)
 8003f5c:	df000604 	addi	fp,sp,24
 8003f60:	e13ffc15 	stw	r4,-16(fp)
 8003f64:	e17ffd15 	stw	r5,-12(fp)
 8003f68:	e1bffe15 	stw	r6,-8(fp)
 8003f6c:	e1ffff15 	stw	r7,-4(fp)
 8003f70:	e0bfff17 	ldw	r2,-4(fp)
 8003f74:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8003f78:	d0a0e117 	ldw	r2,-31868(gp)
 8003f7c:	1000021e 	bne	r2,zero,8003f88 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8003f80:	e0bffb17 	ldw	r2,-20(fp)
 8003f84:	d0a0e115 	stw	r2,-31868(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8003f88:	e0bffc17 	ldw	r2,-16(fp)
 8003f8c:	10800104 	addi	r2,r2,4
 8003f90:	00c001c4 	movi	r3,7
 8003f94:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8003f98:	d8000015 	stw	zero,0(sp)
 8003f9c:	e1fffc17 	ldw	r7,-16(fp)
 8003fa0:	01820034 	movhi	r6,2048
 8003fa4:	318fb604 	addi	r6,r6,16088
 8003fa8:	e17ffe17 	ldw	r5,-8(fp)
 8003fac:	e13ffd17 	ldw	r4,-12(fp)
 8003fb0:	80043100 	call	8004310 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8003fb4:	0001883a 	nop
 8003fb8:	e037883a 	mov	sp,fp
 8003fbc:	dfc00117 	ldw	ra,4(sp)
 8003fc0:	df000017 	ldw	fp,0(sp)
 8003fc4:	dec00204 	addi	sp,sp,8
 8003fc8:	f800283a 	ret

08003fcc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8003fcc:	defffe04 	addi	sp,sp,-8
 8003fd0:	df000115 	stw	fp,4(sp)
 8003fd4:	df000104 	addi	fp,sp,4
 8003fd8:	e13fff15 	stw	r4,-4(fp)
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8003fdc:	0005883a 	mov	r2,zero
}
 8003fe0:	e037883a 	mov	sp,fp
 8003fe4:	df000017 	ldw	fp,0(sp)
 8003fe8:	dec00104 	addi	sp,sp,4
 8003fec:	f800283a 	ret

08003ff0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003ff0:	defffe04 	addi	sp,sp,-8
 8003ff4:	dfc00115 	stw	ra,4(sp)
 8003ff8:	df000015 	stw	fp,0(sp)
 8003ffc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004000:	d0a00d17 	ldw	r2,-32716(gp)
 8004004:	10000326 	beq	r2,zero,8004014 <alt_get_errno+0x24>
 8004008:	d0a00d17 	ldw	r2,-32716(gp)
 800400c:	103ee83a 	callr	r2
 8004010:	00000106 	br	8004018 <alt_get_errno+0x28>
 8004014:	d0a0dd04 	addi	r2,gp,-31884
}
 8004018:	e037883a 	mov	sp,fp
 800401c:	dfc00117 	ldw	ra,4(sp)
 8004020:	df000017 	ldw	fp,0(sp)
 8004024:	dec00204 	addi	sp,sp,8
 8004028:	f800283a 	ret

0800402c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800402c:	defffb04 	addi	sp,sp,-20
 8004030:	dfc00415 	stw	ra,16(sp)
 8004034:	df000315 	stw	fp,12(sp)
 8004038:	df000304 	addi	fp,sp,12
 800403c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8004040:	e0bfff17 	ldw	r2,-4(fp)
 8004044:	10000816 	blt	r2,zero,8004068 <close+0x3c>
 8004048:	01400304 	movi	r5,12
 800404c:	e13fff17 	ldw	r4,-4(fp)
 8004050:	8002c740 	call	8002c74 <__mulsi3>
 8004054:	1007883a 	mov	r3,r2
 8004058:	00820034 	movhi	r2,2048
 800405c:	10952104 	addi	r2,r2,21636
 8004060:	1885883a 	add	r2,r3,r2
 8004064:	00000106 	br	800406c <close+0x40>
 8004068:	0005883a 	mov	r2,zero
 800406c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8004070:	e0bffd17 	ldw	r2,-12(fp)
 8004074:	10001926 	beq	r2,zero,80040dc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8004078:	e0bffd17 	ldw	r2,-12(fp)
 800407c:	10800017 	ldw	r2,0(r2)
 8004080:	10800417 	ldw	r2,16(r2)
 8004084:	10000626 	beq	r2,zero,80040a0 <close+0x74>
 8004088:	e0bffd17 	ldw	r2,-12(fp)
 800408c:	10800017 	ldw	r2,0(r2)
 8004090:	10800417 	ldw	r2,16(r2)
 8004094:	e13ffd17 	ldw	r4,-12(fp)
 8004098:	103ee83a 	callr	r2
 800409c:	00000106 	br	80040a4 <close+0x78>
 80040a0:	0005883a 	mov	r2,zero
 80040a4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80040a8:	e13fff17 	ldw	r4,-4(fp)
 80040ac:	80049940 	call	8004994 <alt_release_fd>
    if (rval < 0)
 80040b0:	e0bffe17 	ldw	r2,-8(fp)
 80040b4:	1000070e 	bge	r2,zero,80040d4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 80040b8:	8003ff00 	call	8003ff0 <alt_get_errno>
 80040bc:	1007883a 	mov	r3,r2
 80040c0:	e0bffe17 	ldw	r2,-8(fp)
 80040c4:	0085c83a 	sub	r2,zero,r2
 80040c8:	18800015 	stw	r2,0(r3)
      return -1;
 80040cc:	00bfffc4 	movi	r2,-1
 80040d0:	00000706 	br	80040f0 <close+0xc4>
    }
    return 0;
 80040d4:	0005883a 	mov	r2,zero
 80040d8:	00000506 	br	80040f0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80040dc:	8003ff00 	call	8003ff0 <alt_get_errno>
 80040e0:	1007883a 	mov	r3,r2
 80040e4:	00801444 	movi	r2,81
 80040e8:	18800015 	stw	r2,0(r3)
    return -1;
 80040ec:	00bfffc4 	movi	r2,-1
  }
}
 80040f0:	e037883a 	mov	sp,fp
 80040f4:	dfc00117 	ldw	ra,4(sp)
 80040f8:	df000017 	ldw	fp,0(sp)
 80040fc:	dec00204 	addi	sp,sp,8
 8004100:	f800283a 	ret

08004104 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8004104:	deffff04 	addi	sp,sp,-4
 8004108:	df000015 	stw	fp,0(sp)
 800410c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8004110:	0001883a 	nop
 8004114:	e037883a 	mov	sp,fp
 8004118:	df000017 	ldw	fp,0(sp)
 800411c:	dec00104 	addi	sp,sp,4
 8004120:	f800283a 	ret

08004124 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8004124:	defffc04 	addi	sp,sp,-16
 8004128:	df000315 	stw	fp,12(sp)
 800412c:	df000304 	addi	fp,sp,12
 8004130:	e13ffd15 	stw	r4,-12(fp)
 8004134:	e17ffe15 	stw	r5,-8(fp)
 8004138:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800413c:	e0bfff17 	ldw	r2,-4(fp)
}
 8004140:	e037883a 	mov	sp,fp
 8004144:	df000017 	ldw	fp,0(sp)
 8004148:	dec00104 	addi	sp,sp,4
 800414c:	f800283a 	ret

08004150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004150:	defffe04 	addi	sp,sp,-8
 8004154:	dfc00115 	stw	ra,4(sp)
 8004158:	df000015 	stw	fp,0(sp)
 800415c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004160:	d0a00d17 	ldw	r2,-32716(gp)
 8004164:	10000326 	beq	r2,zero,8004174 <alt_get_errno+0x24>
 8004168:	d0a00d17 	ldw	r2,-32716(gp)
 800416c:	103ee83a 	callr	r2
 8004170:	00000106 	br	8004178 <alt_get_errno+0x28>
 8004174:	d0a0dd04 	addi	r2,gp,-31884
}
 8004178:	e037883a 	mov	sp,fp
 800417c:	dfc00117 	ldw	ra,4(sp)
 8004180:	df000017 	ldw	fp,0(sp)
 8004184:	dec00204 	addi	sp,sp,8
 8004188:	f800283a 	ret

0800418c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800418c:	defffa04 	addi	sp,sp,-24
 8004190:	dfc00515 	stw	ra,20(sp)
 8004194:	df000415 	stw	fp,16(sp)
 8004198:	df000404 	addi	fp,sp,16
 800419c:	e13ffe15 	stw	r4,-8(fp)
 80041a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80041a4:	e0bffe17 	ldw	r2,-8(fp)
 80041a8:	10000326 	beq	r2,zero,80041b8 <alt_dev_llist_insert+0x2c>
 80041ac:	e0bffe17 	ldw	r2,-8(fp)
 80041b0:	10800217 	ldw	r2,8(r2)
 80041b4:	1000061e 	bne	r2,zero,80041d0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80041b8:	80041500 	call	8004150 <alt_get_errno>
 80041bc:	1007883a 	mov	r3,r2
 80041c0:	00800584 	movi	r2,22
 80041c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80041c8:	00bffa84 	movi	r2,-22
 80041cc:	00001306 	br	800421c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80041d0:	e0bffe17 	ldw	r2,-8(fp)
 80041d4:	e0ffff17 	ldw	r3,-4(fp)
 80041d8:	e0fffc15 	stw	r3,-16(fp)
 80041dc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80041e0:	e0bffd17 	ldw	r2,-12(fp)
 80041e4:	e0fffc17 	ldw	r3,-16(fp)
 80041e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80041ec:	e0bffc17 	ldw	r2,-16(fp)
 80041f0:	10c00017 	ldw	r3,0(r2)
 80041f4:	e0bffd17 	ldw	r2,-12(fp)
 80041f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80041fc:	e0bffc17 	ldw	r2,-16(fp)
 8004200:	10800017 	ldw	r2,0(r2)
 8004204:	e0fffd17 	ldw	r3,-12(fp)
 8004208:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800420c:	e0bffc17 	ldw	r2,-16(fp)
 8004210:	e0fffd17 	ldw	r3,-12(fp)
 8004214:	10c00015 	stw	r3,0(r2)

  return 0;  
 8004218:	0005883a 	mov	r2,zero
}
 800421c:	e037883a 	mov	sp,fp
 8004220:	dfc00117 	ldw	ra,4(sp)
 8004224:	df000017 	ldw	fp,0(sp)
 8004228:	dec00204 	addi	sp,sp,8
 800422c:	f800283a 	ret

08004230 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8004230:	defffd04 	addi	sp,sp,-12
 8004234:	dfc00215 	stw	ra,8(sp)
 8004238:	df000115 	stw	fp,4(sp)
 800423c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8004240:	00820034 	movhi	r2,2048
 8004244:	10942c04 	addi	r2,r2,20656
 8004248:	e0bfff15 	stw	r2,-4(fp)
 800424c:	00000606 	br	8004268 <_do_ctors+0x38>
        (*ctor) (); 
 8004250:	e0bfff17 	ldw	r2,-4(fp)
 8004254:	10800017 	ldw	r2,0(r2)
 8004258:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800425c:	e0bfff17 	ldw	r2,-4(fp)
 8004260:	10bfff04 	addi	r2,r2,-4
 8004264:	e0bfff15 	stw	r2,-4(fp)
 8004268:	e0ffff17 	ldw	r3,-4(fp)
 800426c:	00820034 	movhi	r2,2048
 8004270:	10942d04 	addi	r2,r2,20660
 8004274:	18bff62e 	bgeu	r3,r2,8004250 <__alt_data_end+0xfc004250>
        (*ctor) (); 
}
 8004278:	0001883a 	nop
 800427c:	e037883a 	mov	sp,fp
 8004280:	dfc00117 	ldw	ra,4(sp)
 8004284:	df000017 	ldw	fp,0(sp)
 8004288:	dec00204 	addi	sp,sp,8
 800428c:	f800283a 	ret

08004290 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8004290:	defffd04 	addi	sp,sp,-12
 8004294:	dfc00215 	stw	ra,8(sp)
 8004298:	df000115 	stw	fp,4(sp)
 800429c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80042a0:	00820034 	movhi	r2,2048
 80042a4:	10942c04 	addi	r2,r2,20656
 80042a8:	e0bfff15 	stw	r2,-4(fp)
 80042ac:	00000606 	br	80042c8 <_do_dtors+0x38>
        (*dtor) (); 
 80042b0:	e0bfff17 	ldw	r2,-4(fp)
 80042b4:	10800017 	ldw	r2,0(r2)
 80042b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80042bc:	e0bfff17 	ldw	r2,-4(fp)
 80042c0:	10bfff04 	addi	r2,r2,-4
 80042c4:	e0bfff15 	stw	r2,-4(fp)
 80042c8:	e0ffff17 	ldw	r3,-4(fp)
 80042cc:	00820034 	movhi	r2,2048
 80042d0:	10942d04 	addi	r2,r2,20660
 80042d4:	18bff62e 	bgeu	r3,r2,80042b0 <__alt_data_end+0xfc0042b0>
        (*dtor) (); 
}
 80042d8:	0001883a 	nop
 80042dc:	e037883a 	mov	sp,fp
 80042e0:	dfc00117 	ldw	ra,4(sp)
 80042e4:	df000017 	ldw	fp,0(sp)
 80042e8:	dec00204 	addi	sp,sp,8
 80042ec:	f800283a 	ret

080042f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80042f0:	deffff04 	addi	sp,sp,-4
 80042f4:	df000015 	stw	fp,0(sp)
 80042f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80042fc:	0001883a 	nop
 8004300:	e037883a 	mov	sp,fp
 8004304:	df000017 	ldw	fp,0(sp)
 8004308:	dec00104 	addi	sp,sp,4
 800430c:	f800283a 	ret

08004310 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8004310:	defff904 	addi	sp,sp,-28
 8004314:	dfc00615 	stw	ra,24(sp)
 8004318:	df000515 	stw	fp,20(sp)
 800431c:	df000504 	addi	fp,sp,20
 8004320:	e13ffc15 	stw	r4,-16(fp)
 8004324:	e17ffd15 	stw	r5,-12(fp)
 8004328:	e1bffe15 	stw	r6,-8(fp)
 800432c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8004330:	e0800217 	ldw	r2,8(fp)
 8004334:	d8800015 	stw	r2,0(sp)
 8004338:	e1ffff17 	ldw	r7,-4(fp)
 800433c:	e1bffe17 	ldw	r6,-8(fp)
 8004340:	e17ffd17 	ldw	r5,-12(fp)
 8004344:	e13ffc17 	ldw	r4,-16(fp)
 8004348:	80044c00 	call	80044c0 <alt_iic_isr_register>
}  
 800434c:	e037883a 	mov	sp,fp
 8004350:	dfc00117 	ldw	ra,4(sp)
 8004354:	df000017 	ldw	fp,0(sp)
 8004358:	dec00204 	addi	sp,sp,8
 800435c:	f800283a 	ret

08004360 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8004360:	defff904 	addi	sp,sp,-28
 8004364:	df000615 	stw	fp,24(sp)
 8004368:	df000604 	addi	fp,sp,24
 800436c:	e13ffe15 	stw	r4,-8(fp)
 8004370:	e17fff15 	stw	r5,-4(fp)
 8004374:	e0bfff17 	ldw	r2,-4(fp)
 8004378:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800437c:	0005303a 	rdctl	r2,status
 8004380:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004384:	e0fffb17 	ldw	r3,-20(fp)
 8004388:	00bfff84 	movi	r2,-2
 800438c:	1884703a 	and	r2,r3,r2
 8004390:	1001703a 	wrctl	status,r2
  
  return context;
 8004394:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004398:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800439c:	00c00044 	movi	r3,1
 80043a0:	e0bffa17 	ldw	r2,-24(fp)
 80043a4:	1884983a 	sll	r2,r3,r2
 80043a8:	1007883a 	mov	r3,r2
 80043ac:	d0a0e317 	ldw	r2,-31860(gp)
 80043b0:	1884b03a 	or	r2,r3,r2
 80043b4:	d0a0e315 	stw	r2,-31860(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80043b8:	d0a0e317 	ldw	r2,-31860(gp)
 80043bc:	100170fa 	wrctl	ienable,r2
 80043c0:	e0bffc17 	ldw	r2,-16(fp)
 80043c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80043c8:	e0bffd17 	ldw	r2,-12(fp)
 80043cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80043d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80043d4:	0001883a 	nop
}
 80043d8:	e037883a 	mov	sp,fp
 80043dc:	df000017 	ldw	fp,0(sp)
 80043e0:	dec00104 	addi	sp,sp,4
 80043e4:	f800283a 	ret

080043e8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80043e8:	defff904 	addi	sp,sp,-28
 80043ec:	df000615 	stw	fp,24(sp)
 80043f0:	df000604 	addi	fp,sp,24
 80043f4:	e13ffe15 	stw	r4,-8(fp)
 80043f8:	e17fff15 	stw	r5,-4(fp)
 80043fc:	e0bfff17 	ldw	r2,-4(fp)
 8004400:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004404:	0005303a 	rdctl	r2,status
 8004408:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800440c:	e0fffb17 	ldw	r3,-20(fp)
 8004410:	00bfff84 	movi	r2,-2
 8004414:	1884703a 	and	r2,r3,r2
 8004418:	1001703a 	wrctl	status,r2
  
  return context;
 800441c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004420:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8004424:	00c00044 	movi	r3,1
 8004428:	e0bffa17 	ldw	r2,-24(fp)
 800442c:	1884983a 	sll	r2,r3,r2
 8004430:	0084303a 	nor	r2,zero,r2
 8004434:	1007883a 	mov	r3,r2
 8004438:	d0a0e317 	ldw	r2,-31860(gp)
 800443c:	1884703a 	and	r2,r3,r2
 8004440:	d0a0e315 	stw	r2,-31860(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8004444:	d0a0e317 	ldw	r2,-31860(gp)
 8004448:	100170fa 	wrctl	ienable,r2
 800444c:	e0bffc17 	ldw	r2,-16(fp)
 8004450:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004454:	e0bffd17 	ldw	r2,-12(fp)
 8004458:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800445c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8004460:	0001883a 	nop
}
 8004464:	e037883a 	mov	sp,fp
 8004468:	df000017 	ldw	fp,0(sp)
 800446c:	dec00104 	addi	sp,sp,4
 8004470:	f800283a 	ret

08004474 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8004474:	defffc04 	addi	sp,sp,-16
 8004478:	df000315 	stw	fp,12(sp)
 800447c:	df000304 	addi	fp,sp,12
 8004480:	e13ffe15 	stw	r4,-8(fp)
 8004484:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8004488:	000530fa 	rdctl	r2,ienable
 800448c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8004490:	00c00044 	movi	r3,1
 8004494:	e0bfff17 	ldw	r2,-4(fp)
 8004498:	1884983a 	sll	r2,r3,r2
 800449c:	1007883a 	mov	r3,r2
 80044a0:	e0bffd17 	ldw	r2,-12(fp)
 80044a4:	1884703a 	and	r2,r3,r2
 80044a8:	1004c03a 	cmpne	r2,r2,zero
 80044ac:	10803fcc 	andi	r2,r2,255
}
 80044b0:	e037883a 	mov	sp,fp
 80044b4:	df000017 	ldw	fp,0(sp)
 80044b8:	dec00104 	addi	sp,sp,4
 80044bc:	f800283a 	ret

080044c0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80044c0:	defff504 	addi	sp,sp,-44
 80044c4:	dfc00a15 	stw	ra,40(sp)
 80044c8:	df000915 	stw	fp,36(sp)
 80044cc:	df000904 	addi	fp,sp,36
 80044d0:	e13ffc15 	stw	r4,-16(fp)
 80044d4:	e17ffd15 	stw	r5,-12(fp)
 80044d8:	e1bffe15 	stw	r6,-8(fp)
 80044dc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80044e0:	00bffa84 	movi	r2,-22
 80044e4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80044e8:	e0bffd17 	ldw	r2,-12(fp)
 80044ec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80044f0:	e0bff817 	ldw	r2,-32(fp)
 80044f4:	10800808 	cmpgei	r2,r2,32
 80044f8:	1000271e 	bne	r2,zero,8004598 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80044fc:	0005303a 	rdctl	r2,status
 8004500:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004504:	e0fffb17 	ldw	r3,-20(fp)
 8004508:	00bfff84 	movi	r2,-2
 800450c:	1884703a 	and	r2,r3,r2
 8004510:	1001703a 	wrctl	status,r2
  
  return context;
 8004514:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8004518:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800451c:	00820034 	movhi	r2,2048
 8004520:	1096c204 	addi	r2,r2,23304
 8004524:	e0fff817 	ldw	r3,-32(fp)
 8004528:	180690fa 	slli	r3,r3,3
 800452c:	10c5883a 	add	r2,r2,r3
 8004530:	e0fffe17 	ldw	r3,-8(fp)
 8004534:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8004538:	00820034 	movhi	r2,2048
 800453c:	1096c204 	addi	r2,r2,23304
 8004540:	e0fff817 	ldw	r3,-32(fp)
 8004544:	180690fa 	slli	r3,r3,3
 8004548:	10c5883a 	add	r2,r2,r3
 800454c:	10800104 	addi	r2,r2,4
 8004550:	e0ffff17 	ldw	r3,-4(fp)
 8004554:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8004558:	e0bffe17 	ldw	r2,-8(fp)
 800455c:	10000526 	beq	r2,zero,8004574 <alt_iic_isr_register+0xb4>
 8004560:	e0bff817 	ldw	r2,-32(fp)
 8004564:	100b883a 	mov	r5,r2
 8004568:	e13ffc17 	ldw	r4,-16(fp)
 800456c:	80043600 	call	8004360 <alt_ic_irq_enable>
 8004570:	00000406 	br	8004584 <alt_iic_isr_register+0xc4>
 8004574:	e0bff817 	ldw	r2,-32(fp)
 8004578:	100b883a 	mov	r5,r2
 800457c:	e13ffc17 	ldw	r4,-16(fp)
 8004580:	80043e80 	call	80043e8 <alt_ic_irq_disable>
 8004584:	e0bff715 	stw	r2,-36(fp)
 8004588:	e0bffa17 	ldw	r2,-24(fp)
 800458c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004590:	e0bff917 	ldw	r2,-28(fp)
 8004594:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8004598:	e0bff717 	ldw	r2,-36(fp)
}
 800459c:	e037883a 	mov	sp,fp
 80045a0:	dfc00117 	ldw	ra,4(sp)
 80045a4:	df000017 	ldw	fp,0(sp)
 80045a8:	dec00204 	addi	sp,sp,8
 80045ac:	f800283a 	ret

080045b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80045b0:	defff804 	addi	sp,sp,-32
 80045b4:	dfc00715 	stw	ra,28(sp)
 80045b8:	df000615 	stw	fp,24(sp)
 80045bc:	dc000515 	stw	r16,20(sp)
 80045c0:	df000604 	addi	fp,sp,24
 80045c4:	e13ffb15 	stw	r4,-20(fp)
 80045c8:	e17ffc15 	stw	r5,-16(fp)
 80045cc:	e1bffd15 	stw	r6,-12(fp)
 80045d0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80045d4:	e1bffe17 	ldw	r6,-8(fp)
 80045d8:	e17ffd17 	ldw	r5,-12(fp)
 80045dc:	e13ffc17 	ldw	r4,-16(fp)
 80045e0:	80048380 	call	8004838 <open>
 80045e4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80045e8:	e0bffa17 	ldw	r2,-24(fp)
 80045ec:	10002216 	blt	r2,zero,8004678 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80045f0:	04020034 	movhi	r16,2048
 80045f4:	84152104 	addi	r16,r16,21636
 80045f8:	e0bffa17 	ldw	r2,-24(fp)
 80045fc:	01400304 	movi	r5,12
 8004600:	1009883a 	mov	r4,r2
 8004604:	8002c740 	call	8002c74 <__mulsi3>
 8004608:	8085883a 	add	r2,r16,r2
 800460c:	10c00017 	ldw	r3,0(r2)
 8004610:	e0bffb17 	ldw	r2,-20(fp)
 8004614:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8004618:	04020034 	movhi	r16,2048
 800461c:	84152104 	addi	r16,r16,21636
 8004620:	e0bffa17 	ldw	r2,-24(fp)
 8004624:	01400304 	movi	r5,12
 8004628:	1009883a 	mov	r4,r2
 800462c:	8002c740 	call	8002c74 <__mulsi3>
 8004630:	8085883a 	add	r2,r16,r2
 8004634:	10800104 	addi	r2,r2,4
 8004638:	10c00017 	ldw	r3,0(r2)
 800463c:	e0bffb17 	ldw	r2,-20(fp)
 8004640:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8004644:	04020034 	movhi	r16,2048
 8004648:	84152104 	addi	r16,r16,21636
 800464c:	e0bffa17 	ldw	r2,-24(fp)
 8004650:	01400304 	movi	r5,12
 8004654:	1009883a 	mov	r4,r2
 8004658:	8002c740 	call	8002c74 <__mulsi3>
 800465c:	8085883a 	add	r2,r16,r2
 8004660:	10800204 	addi	r2,r2,8
 8004664:	10c00017 	ldw	r3,0(r2)
 8004668:	e0bffb17 	ldw	r2,-20(fp)
 800466c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8004670:	e13ffa17 	ldw	r4,-24(fp)
 8004674:	80049940 	call	8004994 <alt_release_fd>
  }
} 
 8004678:	0001883a 	nop
 800467c:	e6ffff04 	addi	sp,fp,-4
 8004680:	dfc00217 	ldw	ra,8(sp)
 8004684:	df000117 	ldw	fp,4(sp)
 8004688:	dc000017 	ldw	r16,0(sp)
 800468c:	dec00304 	addi	sp,sp,12
 8004690:	f800283a 	ret

08004694 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8004694:	defffb04 	addi	sp,sp,-20
 8004698:	dfc00415 	stw	ra,16(sp)
 800469c:	df000315 	stw	fp,12(sp)
 80046a0:	df000304 	addi	fp,sp,12
 80046a4:	e13ffd15 	stw	r4,-12(fp)
 80046a8:	e17ffe15 	stw	r5,-8(fp)
 80046ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80046b0:	01c07fc4 	movi	r7,511
 80046b4:	01800044 	movi	r6,1
 80046b8:	e17ffd17 	ldw	r5,-12(fp)
 80046bc:	01020034 	movhi	r4,2048
 80046c0:	21152404 	addi	r4,r4,21648
 80046c4:	80045b00 	call	80045b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80046c8:	01c07fc4 	movi	r7,511
 80046cc:	000d883a 	mov	r6,zero
 80046d0:	e17ffe17 	ldw	r5,-8(fp)
 80046d4:	01020034 	movhi	r4,2048
 80046d8:	21152104 	addi	r4,r4,21636
 80046dc:	80045b00 	call	80045b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80046e0:	01c07fc4 	movi	r7,511
 80046e4:	01800044 	movi	r6,1
 80046e8:	e17fff17 	ldw	r5,-4(fp)
 80046ec:	01020034 	movhi	r4,2048
 80046f0:	21152704 	addi	r4,r4,21660
 80046f4:	80045b00 	call	80045b0 <alt_open_fd>
}  
 80046f8:	0001883a 	nop
 80046fc:	e037883a 	mov	sp,fp
 8004700:	dfc00117 	ldw	ra,4(sp)
 8004704:	df000017 	ldw	fp,0(sp)
 8004708:	dec00204 	addi	sp,sp,8
 800470c:	f800283a 	ret

08004710 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004710:	defffe04 	addi	sp,sp,-8
 8004714:	dfc00115 	stw	ra,4(sp)
 8004718:	df000015 	stw	fp,0(sp)
 800471c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004720:	d0a00d17 	ldw	r2,-32716(gp)
 8004724:	10000326 	beq	r2,zero,8004734 <alt_get_errno+0x24>
 8004728:	d0a00d17 	ldw	r2,-32716(gp)
 800472c:	103ee83a 	callr	r2
 8004730:	00000106 	br	8004738 <alt_get_errno+0x28>
 8004734:	d0a0dd04 	addi	r2,gp,-31884
}
 8004738:	e037883a 	mov	sp,fp
 800473c:	dfc00117 	ldw	ra,4(sp)
 8004740:	df000017 	ldw	fp,0(sp)
 8004744:	dec00204 	addi	sp,sp,8
 8004748:	f800283a 	ret

0800474c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800474c:	defffb04 	addi	sp,sp,-20
 8004750:	dfc00415 	stw	ra,16(sp)
 8004754:	df000315 	stw	fp,12(sp)
 8004758:	dc000215 	stw	r16,8(sp)
 800475c:	df000304 	addi	fp,sp,12
 8004760:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8004764:	e0bffe17 	ldw	r2,-8(fp)
 8004768:	10800217 	ldw	r2,8(r2)
 800476c:	10d00034 	orhi	r3,r2,16384
 8004770:	e0bffe17 	ldw	r2,-8(fp)
 8004774:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8004778:	e03ffd15 	stw	zero,-12(fp)
 800477c:	00002306 	br	800480c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8004780:	04020034 	movhi	r16,2048
 8004784:	84152104 	addi	r16,r16,21636
 8004788:	e0bffd17 	ldw	r2,-12(fp)
 800478c:	01400304 	movi	r5,12
 8004790:	1009883a 	mov	r4,r2
 8004794:	8002c740 	call	8002c74 <__mulsi3>
 8004798:	8085883a 	add	r2,r16,r2
 800479c:	10c00017 	ldw	r3,0(r2)
 80047a0:	e0bffe17 	ldw	r2,-8(fp)
 80047a4:	10800017 	ldw	r2,0(r2)
 80047a8:	1880151e 	bne	r3,r2,8004800 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80047ac:	04020034 	movhi	r16,2048
 80047b0:	84152104 	addi	r16,r16,21636
 80047b4:	e0bffd17 	ldw	r2,-12(fp)
 80047b8:	01400304 	movi	r5,12
 80047bc:	1009883a 	mov	r4,r2
 80047c0:	8002c740 	call	8002c74 <__mulsi3>
 80047c4:	8085883a 	add	r2,r16,r2
 80047c8:	10800204 	addi	r2,r2,8
 80047cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80047d0:	10000b0e 	bge	r2,zero,8004800 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80047d4:	01400304 	movi	r5,12
 80047d8:	e13ffd17 	ldw	r4,-12(fp)
 80047dc:	8002c740 	call	8002c74 <__mulsi3>
 80047e0:	1007883a 	mov	r3,r2
 80047e4:	00820034 	movhi	r2,2048
 80047e8:	10952104 	addi	r2,r2,21636
 80047ec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80047f0:	e0bffe17 	ldw	r2,-8(fp)
 80047f4:	18800226 	beq	r3,r2,8004800 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80047f8:	00bffcc4 	movi	r2,-13
 80047fc:	00000806 	br	8004820 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8004800:	e0bffd17 	ldw	r2,-12(fp)
 8004804:	10800044 	addi	r2,r2,1
 8004808:	e0bffd15 	stw	r2,-12(fp)
 800480c:	d0a00c17 	ldw	r2,-32720(gp)
 8004810:	1007883a 	mov	r3,r2
 8004814:	e0bffd17 	ldw	r2,-12(fp)
 8004818:	18bfd92e 	bgeu	r3,r2,8004780 <__alt_data_end+0xfc004780>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800481c:	0005883a 	mov	r2,zero
}
 8004820:	e6ffff04 	addi	sp,fp,-4
 8004824:	dfc00217 	ldw	ra,8(sp)
 8004828:	df000117 	ldw	fp,4(sp)
 800482c:	dc000017 	ldw	r16,0(sp)
 8004830:	dec00304 	addi	sp,sp,12
 8004834:	f800283a 	ret

08004838 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8004838:	defff604 	addi	sp,sp,-40
 800483c:	dfc00915 	stw	ra,36(sp)
 8004840:	df000815 	stw	fp,32(sp)
 8004844:	df000804 	addi	fp,sp,32
 8004848:	e13ffd15 	stw	r4,-12(fp)
 800484c:	e17ffe15 	stw	r5,-8(fp)
 8004850:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8004854:	00bfffc4 	movi	r2,-1
 8004858:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800485c:	00bffb44 	movi	r2,-19
 8004860:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8004864:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8004868:	d1600a04 	addi	r5,gp,-32728
 800486c:	e13ffd17 	ldw	r4,-12(fp)
 8004870:	8004a3c0 	call	8004a3c <alt_find_dev>
 8004874:	e0bff815 	stw	r2,-32(fp)
 8004878:	e0bff817 	ldw	r2,-32(fp)
 800487c:	1000051e 	bne	r2,zero,8004894 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8004880:	e13ffd17 	ldw	r4,-12(fp)
 8004884:	8004acc0 	call	8004acc <alt_find_file>
 8004888:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800488c:	00800044 	movi	r2,1
 8004890:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8004894:	e0bff817 	ldw	r2,-32(fp)
 8004898:	10002b26 	beq	r2,zero,8004948 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800489c:	e13ff817 	ldw	r4,-32(fp)
 80048a0:	8004bd40 	call	8004bd4 <alt_get_fd>
 80048a4:	e0bff915 	stw	r2,-28(fp)
 80048a8:	e0bff917 	ldw	r2,-28(fp)
 80048ac:	1000030e 	bge	r2,zero,80048bc <open+0x84>
    {
      status = index;
 80048b0:	e0bff917 	ldw	r2,-28(fp)
 80048b4:	e0bffa15 	stw	r2,-24(fp)
 80048b8:	00002506 	br	8004950 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 80048bc:	01400304 	movi	r5,12
 80048c0:	e13ff917 	ldw	r4,-28(fp)
 80048c4:	8002c740 	call	8002c74 <__mulsi3>
 80048c8:	1007883a 	mov	r3,r2
 80048cc:	00820034 	movhi	r2,2048
 80048d0:	10952104 	addi	r2,r2,21636
 80048d4:	1885883a 	add	r2,r3,r2
 80048d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80048dc:	e0fffe17 	ldw	r3,-8(fp)
 80048e0:	00900034 	movhi	r2,16384
 80048e4:	10bfffc4 	addi	r2,r2,-1
 80048e8:	1886703a 	and	r3,r3,r2
 80048ec:	e0bffc17 	ldw	r2,-16(fp)
 80048f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80048f4:	e0bffb17 	ldw	r2,-20(fp)
 80048f8:	1000051e 	bne	r2,zero,8004910 <open+0xd8>
 80048fc:	e13ffc17 	ldw	r4,-16(fp)
 8004900:	800474c0 	call	800474c <alt_file_locked>
 8004904:	e0bffa15 	stw	r2,-24(fp)
 8004908:	e0bffa17 	ldw	r2,-24(fp)
 800490c:	10001016 	blt	r2,zero,8004950 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8004910:	e0bff817 	ldw	r2,-32(fp)
 8004914:	10800317 	ldw	r2,12(r2)
 8004918:	10000826 	beq	r2,zero,800493c <open+0x104>
 800491c:	e0bff817 	ldw	r2,-32(fp)
 8004920:	10800317 	ldw	r2,12(r2)
 8004924:	e1ffff17 	ldw	r7,-4(fp)
 8004928:	e1bffe17 	ldw	r6,-8(fp)
 800492c:	e17ffd17 	ldw	r5,-12(fp)
 8004930:	e13ffc17 	ldw	r4,-16(fp)
 8004934:	103ee83a 	callr	r2
 8004938:	00000106 	br	8004940 <open+0x108>
 800493c:	0005883a 	mov	r2,zero
 8004940:	e0bffa15 	stw	r2,-24(fp)
 8004944:	00000206 	br	8004950 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8004948:	00bffb44 	movi	r2,-19
 800494c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8004950:	e0bffa17 	ldw	r2,-24(fp)
 8004954:	1000090e 	bge	r2,zero,800497c <open+0x144>
  {
    alt_release_fd (index);  
 8004958:	e13ff917 	ldw	r4,-28(fp)
 800495c:	80049940 	call	8004994 <alt_release_fd>
    ALT_ERRNO = -status;
 8004960:	80047100 	call	8004710 <alt_get_errno>
 8004964:	1007883a 	mov	r3,r2
 8004968:	e0bffa17 	ldw	r2,-24(fp)
 800496c:	0085c83a 	sub	r2,zero,r2
 8004970:	18800015 	stw	r2,0(r3)
    return -1;
 8004974:	00bfffc4 	movi	r2,-1
 8004978:	00000106 	br	8004980 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 800497c:	e0bff917 	ldw	r2,-28(fp)
}
 8004980:	e037883a 	mov	sp,fp
 8004984:	dfc00117 	ldw	ra,4(sp)
 8004988:	df000017 	ldw	fp,0(sp)
 800498c:	dec00204 	addi	sp,sp,8
 8004990:	f800283a 	ret

08004994 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8004994:	defffc04 	addi	sp,sp,-16
 8004998:	dfc00315 	stw	ra,12(sp)
 800499c:	df000215 	stw	fp,8(sp)
 80049a0:	dc000115 	stw	r16,4(sp)
 80049a4:	df000204 	addi	fp,sp,8
 80049a8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80049ac:	e0bffe17 	ldw	r2,-8(fp)
 80049b0:	108000d0 	cmplti	r2,r2,3
 80049b4:	1000111e 	bne	r2,zero,80049fc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80049b8:	04020034 	movhi	r16,2048
 80049bc:	84152104 	addi	r16,r16,21636
 80049c0:	e0bffe17 	ldw	r2,-8(fp)
 80049c4:	01400304 	movi	r5,12
 80049c8:	1009883a 	mov	r4,r2
 80049cc:	8002c740 	call	8002c74 <__mulsi3>
 80049d0:	8085883a 	add	r2,r16,r2
 80049d4:	10800204 	addi	r2,r2,8
 80049d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80049dc:	04020034 	movhi	r16,2048
 80049e0:	84152104 	addi	r16,r16,21636
 80049e4:	e0bffe17 	ldw	r2,-8(fp)
 80049e8:	01400304 	movi	r5,12
 80049ec:	1009883a 	mov	r4,r2
 80049f0:	8002c740 	call	8002c74 <__mulsi3>
 80049f4:	8085883a 	add	r2,r16,r2
 80049f8:	10000015 	stw	zero,0(r2)
  }
}
 80049fc:	0001883a 	nop
 8004a00:	e6ffff04 	addi	sp,fp,-4
 8004a04:	dfc00217 	ldw	ra,8(sp)
 8004a08:	df000117 	ldw	fp,4(sp)
 8004a0c:	dc000017 	ldw	r16,0(sp)
 8004a10:	dec00304 	addi	sp,sp,12
 8004a14:	f800283a 	ret

08004a18 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8004a18:	deffff04 	addi	sp,sp,-4
 8004a1c:	df000015 	stw	fp,0(sp)
 8004a20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8004a24:	000170fa 	wrctl	ienable,zero
}
 8004a28:	0001883a 	nop
 8004a2c:	e037883a 	mov	sp,fp
 8004a30:	df000017 	ldw	fp,0(sp)
 8004a34:	dec00104 	addi	sp,sp,4
 8004a38:	f800283a 	ret

08004a3c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8004a3c:	defffa04 	addi	sp,sp,-24
 8004a40:	dfc00515 	stw	ra,20(sp)
 8004a44:	df000415 	stw	fp,16(sp)
 8004a48:	df000404 	addi	fp,sp,16
 8004a4c:	e13ffe15 	stw	r4,-8(fp)
 8004a50:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8004a54:	e0bfff17 	ldw	r2,-4(fp)
 8004a58:	10800017 	ldw	r2,0(r2)
 8004a5c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8004a60:	e13ffe17 	ldw	r4,-8(fp)
 8004a64:	8002ddc0 	call	8002ddc <strlen>
 8004a68:	10800044 	addi	r2,r2,1
 8004a6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004a70:	00000d06 	br	8004aa8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8004a74:	e0bffc17 	ldw	r2,-16(fp)
 8004a78:	10800217 	ldw	r2,8(r2)
 8004a7c:	e0fffd17 	ldw	r3,-12(fp)
 8004a80:	180d883a 	mov	r6,r3
 8004a84:	e17ffe17 	ldw	r5,-8(fp)
 8004a88:	1009883a 	mov	r4,r2
 8004a8c:	8004d680 	call	8004d68 <memcmp>
 8004a90:	1000021e 	bne	r2,zero,8004a9c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8004a94:	e0bffc17 	ldw	r2,-16(fp)
 8004a98:	00000706 	br	8004ab8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8004a9c:	e0bffc17 	ldw	r2,-16(fp)
 8004aa0:	10800017 	ldw	r2,0(r2)
 8004aa4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004aa8:	e0fffc17 	ldw	r3,-16(fp)
 8004aac:	e0bfff17 	ldw	r2,-4(fp)
 8004ab0:	18bff01e 	bne	r3,r2,8004a74 <__alt_data_end+0xfc004a74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8004ab4:	0005883a 	mov	r2,zero
}
 8004ab8:	e037883a 	mov	sp,fp
 8004abc:	dfc00117 	ldw	ra,4(sp)
 8004ac0:	df000017 	ldw	fp,0(sp)
 8004ac4:	dec00204 	addi	sp,sp,8
 8004ac8:	f800283a 	ret

08004acc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8004acc:	defffb04 	addi	sp,sp,-20
 8004ad0:	dfc00415 	stw	ra,16(sp)
 8004ad4:	df000315 	stw	fp,12(sp)
 8004ad8:	df000304 	addi	fp,sp,12
 8004adc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8004ae0:	d0a00817 	ldw	r2,-32736(gp)
 8004ae4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8004ae8:	00003106 	br	8004bb0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8004aec:	e0bffd17 	ldw	r2,-12(fp)
 8004af0:	10800217 	ldw	r2,8(r2)
 8004af4:	1009883a 	mov	r4,r2
 8004af8:	8002ddc0 	call	8002ddc <strlen>
 8004afc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8004b00:	e0bffd17 	ldw	r2,-12(fp)
 8004b04:	10c00217 	ldw	r3,8(r2)
 8004b08:	e0bffe17 	ldw	r2,-8(fp)
 8004b0c:	10bfffc4 	addi	r2,r2,-1
 8004b10:	1885883a 	add	r2,r3,r2
 8004b14:	10800003 	ldbu	r2,0(r2)
 8004b18:	10803fcc 	andi	r2,r2,255
 8004b1c:	1080201c 	xori	r2,r2,128
 8004b20:	10bfe004 	addi	r2,r2,-128
 8004b24:	10800bd8 	cmpnei	r2,r2,47
 8004b28:	1000031e 	bne	r2,zero,8004b38 <alt_find_file+0x6c>
    {
      len -= 1;
 8004b2c:	e0bffe17 	ldw	r2,-8(fp)
 8004b30:	10bfffc4 	addi	r2,r2,-1
 8004b34:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8004b38:	e0bffe17 	ldw	r2,-8(fp)
 8004b3c:	e0ffff17 	ldw	r3,-4(fp)
 8004b40:	1885883a 	add	r2,r3,r2
 8004b44:	10800003 	ldbu	r2,0(r2)
 8004b48:	10803fcc 	andi	r2,r2,255
 8004b4c:	1080201c 	xori	r2,r2,128
 8004b50:	10bfe004 	addi	r2,r2,-128
 8004b54:	10800be0 	cmpeqi	r2,r2,47
 8004b58:	1000081e 	bne	r2,zero,8004b7c <alt_find_file+0xb0>
 8004b5c:	e0bffe17 	ldw	r2,-8(fp)
 8004b60:	e0ffff17 	ldw	r3,-4(fp)
 8004b64:	1885883a 	add	r2,r3,r2
 8004b68:	10800003 	ldbu	r2,0(r2)
 8004b6c:	10803fcc 	andi	r2,r2,255
 8004b70:	1080201c 	xori	r2,r2,128
 8004b74:	10bfe004 	addi	r2,r2,-128
 8004b78:	10000a1e 	bne	r2,zero,8004ba4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8004b7c:	e0bffd17 	ldw	r2,-12(fp)
 8004b80:	10800217 	ldw	r2,8(r2)
 8004b84:	e0fffe17 	ldw	r3,-8(fp)
 8004b88:	180d883a 	mov	r6,r3
 8004b8c:	e17fff17 	ldw	r5,-4(fp)
 8004b90:	1009883a 	mov	r4,r2
 8004b94:	8004d680 	call	8004d68 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8004b98:	1000021e 	bne	r2,zero,8004ba4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8004b9c:	e0bffd17 	ldw	r2,-12(fp)
 8004ba0:	00000706 	br	8004bc0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8004ba4:	e0bffd17 	ldw	r2,-12(fp)
 8004ba8:	10800017 	ldw	r2,0(r2)
 8004bac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8004bb0:	e0fffd17 	ldw	r3,-12(fp)
 8004bb4:	d0a00804 	addi	r2,gp,-32736
 8004bb8:	18bfcc1e 	bne	r3,r2,8004aec <__alt_data_end+0xfc004aec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8004bbc:	0005883a 	mov	r2,zero
}
 8004bc0:	e037883a 	mov	sp,fp
 8004bc4:	dfc00117 	ldw	ra,4(sp)
 8004bc8:	df000017 	ldw	fp,0(sp)
 8004bcc:	dec00204 	addi	sp,sp,8
 8004bd0:	f800283a 	ret

08004bd4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8004bd4:	defffa04 	addi	sp,sp,-24
 8004bd8:	dfc00515 	stw	ra,20(sp)
 8004bdc:	df000415 	stw	fp,16(sp)
 8004be0:	dc000315 	stw	r16,12(sp)
 8004be4:	df000404 	addi	fp,sp,16
 8004be8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8004bec:	00bffa04 	movi	r2,-24
 8004bf0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8004bf4:	e03ffc15 	stw	zero,-16(fp)
 8004bf8:	00001d06 	br	8004c70 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8004bfc:	04020034 	movhi	r16,2048
 8004c00:	84152104 	addi	r16,r16,21636
 8004c04:	e0bffc17 	ldw	r2,-16(fp)
 8004c08:	01400304 	movi	r5,12
 8004c0c:	1009883a 	mov	r4,r2
 8004c10:	8002c740 	call	8002c74 <__mulsi3>
 8004c14:	8085883a 	add	r2,r16,r2
 8004c18:	10800017 	ldw	r2,0(r2)
 8004c1c:	1000111e 	bne	r2,zero,8004c64 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8004c20:	04020034 	movhi	r16,2048
 8004c24:	84152104 	addi	r16,r16,21636
 8004c28:	e0bffc17 	ldw	r2,-16(fp)
 8004c2c:	01400304 	movi	r5,12
 8004c30:	1009883a 	mov	r4,r2
 8004c34:	8002c740 	call	8002c74 <__mulsi3>
 8004c38:	8085883a 	add	r2,r16,r2
 8004c3c:	e0fffe17 	ldw	r3,-8(fp)
 8004c40:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8004c44:	d0e00c17 	ldw	r3,-32720(gp)
 8004c48:	e0bffc17 	ldw	r2,-16(fp)
 8004c4c:	1880020e 	bge	r3,r2,8004c58 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8004c50:	e0bffc17 	ldw	r2,-16(fp)
 8004c54:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 8004c58:	e0bffc17 	ldw	r2,-16(fp)
 8004c5c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8004c60:	00000606 	br	8004c7c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8004c64:	e0bffc17 	ldw	r2,-16(fp)
 8004c68:	10800044 	addi	r2,r2,1
 8004c6c:	e0bffc15 	stw	r2,-16(fp)
 8004c70:	e0bffc17 	ldw	r2,-16(fp)
 8004c74:	10800810 	cmplti	r2,r2,32
 8004c78:	103fe01e 	bne	r2,zero,8004bfc <__alt_data_end+0xfc004bfc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8004c7c:	e0bffd17 	ldw	r2,-12(fp)
}
 8004c80:	e6ffff04 	addi	sp,fp,-4
 8004c84:	dfc00217 	ldw	ra,8(sp)
 8004c88:	df000117 	ldw	fp,4(sp)
 8004c8c:	dc000017 	ldw	r16,0(sp)
 8004c90:	dec00304 	addi	sp,sp,12
 8004c94:	f800283a 	ret

08004c98 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8004c98:	defffe04 	addi	sp,sp,-8
 8004c9c:	df000115 	stw	fp,4(sp)
 8004ca0:	df000104 	addi	fp,sp,4
 8004ca4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8004ca8:	e0bfff17 	ldw	r2,-4(fp)
 8004cac:	10bffe84 	addi	r2,r2,-6
 8004cb0:	10c00428 	cmpgeui	r3,r2,16
 8004cb4:	18001a1e 	bne	r3,zero,8004d20 <alt_exception_cause_generated_bad_addr+0x88>
 8004cb8:	100690ba 	slli	r3,r2,2
 8004cbc:	00820034 	movhi	r2,2048
 8004cc0:	10933404 	addi	r2,r2,19664
 8004cc4:	1885883a 	add	r2,r3,r2
 8004cc8:	10800017 	ldw	r2,0(r2)
 8004ccc:	1000683a 	jmp	r2
 8004cd0:	08004d10 	cmplti	zero,at,308
 8004cd4:	08004d10 	cmplti	zero,at,308
 8004cd8:	08004d20 	cmpeqi	zero,at,308
 8004cdc:	08004d20 	cmpeqi	zero,at,308
 8004ce0:	08004d20 	cmpeqi	zero,at,308
 8004ce4:	08004d10 	cmplti	zero,at,308
 8004ce8:	08004d18 	cmpnei	zero,at,308
 8004cec:	08004d20 	cmpeqi	zero,at,308
 8004cf0:	08004d10 	cmplti	zero,at,308
 8004cf4:	08004d10 	cmplti	zero,at,308
 8004cf8:	08004d20 	cmpeqi	zero,at,308
 8004cfc:	08004d10 	cmplti	zero,at,308
 8004d00:	08004d18 	cmpnei	zero,at,308
 8004d04:	08004d20 	cmpeqi	zero,at,308
 8004d08:	08004d20 	cmpeqi	zero,at,308
 8004d0c:	08004d10 	cmplti	zero,at,308
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8004d10:	00800044 	movi	r2,1
 8004d14:	00000306 	br	8004d24 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8004d18:	0005883a 	mov	r2,zero
 8004d1c:	00000106 	br	8004d24 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8004d20:	0005883a 	mov	r2,zero
  }
}
 8004d24:	e037883a 	mov	sp,fp
 8004d28:	df000017 	ldw	fp,0(sp)
 8004d2c:	dec00104 	addi	sp,sp,4
 8004d30:	f800283a 	ret

08004d34 <atexit>:
 8004d34:	200b883a 	mov	r5,r4
 8004d38:	000f883a 	mov	r7,zero
 8004d3c:	000d883a 	mov	r6,zero
 8004d40:	0009883a 	mov	r4,zero
 8004d44:	8004d981 	jmpi	8004d98 <__register_exitproc>

08004d48 <exit>:
 8004d48:	defffe04 	addi	sp,sp,-8
 8004d4c:	000b883a 	mov	r5,zero
 8004d50:	dc000015 	stw	r16,0(sp)
 8004d54:	dfc00115 	stw	ra,4(sp)
 8004d58:	2021883a 	mov	r16,r4
 8004d5c:	8004ef00 	call	8004ef0 <__call_exitprocs>
 8004d60:	8009883a 	mov	r4,r16
 8004d64:	80050800 	call	8005080 <_exit>

08004d68 <memcmp>:
 8004d68:	218d883a 	add	r6,r4,r6
 8004d6c:	21800826 	beq	r4,r6,8004d90 <memcmp+0x28>
 8004d70:	20800003 	ldbu	r2,0(r4)
 8004d74:	28c00003 	ldbu	r3,0(r5)
 8004d78:	10c00226 	beq	r2,r3,8004d84 <memcmp+0x1c>
 8004d7c:	10c5c83a 	sub	r2,r2,r3
 8004d80:	f800283a 	ret
 8004d84:	21000044 	addi	r4,r4,1
 8004d88:	29400044 	addi	r5,r5,1
 8004d8c:	003ff706 	br	8004d6c <__alt_data_end+0xfc004d6c>
 8004d90:	0005883a 	mov	r2,zero
 8004d94:	f800283a 	ret

08004d98 <__register_exitproc>:
 8004d98:	00820034 	movhi	r2,2048
 8004d9c:	10958504 	addi	r2,r2,22036
 8004da0:	10c00017 	ldw	r3,0(r2)
 8004da4:	defff904 	addi	sp,sp,-28
 8004da8:	dc000015 	stw	r16,0(sp)
 8004dac:	1c000c17 	ldw	r16,48(r3)
 8004db0:	dd400515 	stw	r21,20(sp)
 8004db4:	dd000415 	stw	r20,16(sp)
 8004db8:	dcc00315 	stw	r19,12(sp)
 8004dbc:	dc800215 	stw	r18,8(sp)
 8004dc0:	dc400115 	stw	r17,4(sp)
 8004dc4:	dfc00615 	stw	ra,24(sp)
 8004dc8:	202b883a 	mov	r21,r4
 8004dcc:	2823883a 	mov	r17,r5
 8004dd0:	3027883a 	mov	r19,r6
 8004dd4:	3825883a 	mov	r18,r7
 8004dd8:	1029883a 	mov	r20,r2
 8004ddc:	8000021e 	bne	r16,zero,8004de8 <__register_exitproc+0x50>
 8004de0:	1c000d04 	addi	r16,r3,52
 8004de4:	1c000c15 	stw	r16,48(r3)
 8004de8:	80800117 	ldw	r2,4(r16)
 8004dec:	00c007c4 	movi	r3,31
 8004df0:	1880110e 	bge	r3,r2,8004e38 <__register_exitproc+0xa0>
 8004df4:	00800034 	movhi	r2,0
 8004df8:	10800004 	addi	r2,r2,0
 8004dfc:	1000021e 	bne	r2,zero,8004e08 <__register_exitproc+0x70>
 8004e00:	00bfffc4 	movi	r2,-1
 8004e04:	00003106 	br	8004ecc <__register_exitproc+0x134>
 8004e08:	01002304 	movi	r4,140
 8004e0c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8004e10:	1021883a 	mov	r16,r2
 8004e14:	103ffa26 	beq	r2,zero,8004e00 <__alt_data_end+0xfc004e00>
 8004e18:	10000115 	stw	zero,4(r2)
 8004e1c:	a0800017 	ldw	r2,0(r20)
 8004e20:	10c00c17 	ldw	r3,48(r2)
 8004e24:	80c00015 	stw	r3,0(r16)
 8004e28:	14000c15 	stw	r16,48(r2)
 8004e2c:	80002215 	stw	zero,136(r16)
 8004e30:	a8001d26 	beq	r21,zero,8004ea8 <__register_exitproc+0x110>
 8004e34:	00000606 	br	8004e50 <__register_exitproc+0xb8>
 8004e38:	a8001b26 	beq	r21,zero,8004ea8 <__register_exitproc+0x110>
 8004e3c:	80802217 	ldw	r2,136(r16)
 8004e40:	1000091e 	bne	r2,zero,8004e68 <__register_exitproc+0xd0>
 8004e44:	00800034 	movhi	r2,0
 8004e48:	10800004 	addi	r2,r2,0
 8004e4c:	103fec26 	beq	r2,zero,8004e00 <__alt_data_end+0xfc004e00>
 8004e50:	01004204 	movi	r4,264
 8004e54:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8004e58:	103fe926 	beq	r2,zero,8004e00 <__alt_data_end+0xfc004e00>
 8004e5c:	10004015 	stw	zero,256(r2)
 8004e60:	10004115 	stw	zero,260(r2)
 8004e64:	80802215 	stw	r2,136(r16)
 8004e68:	81400117 	ldw	r5,4(r16)
 8004e6c:	01000044 	movi	r4,1
 8004e70:	2947883a 	add	r3,r5,r5
 8004e74:	18c7883a 	add	r3,r3,r3
 8004e78:	10c7883a 	add	r3,r2,r3
 8004e7c:	1cc00015 	stw	r19,0(r3)
 8004e80:	2148983a 	sll	r4,r4,r5
 8004e84:	11404017 	ldw	r5,256(r2)
 8004e88:	290ab03a 	or	r5,r5,r4
 8004e8c:	11404015 	stw	r5,256(r2)
 8004e90:	1c802015 	stw	r18,128(r3)
 8004e94:	00c00084 	movi	r3,2
 8004e98:	a8c0031e 	bne	r21,r3,8004ea8 <__register_exitproc+0x110>
 8004e9c:	10c04117 	ldw	r3,260(r2)
 8004ea0:	1908b03a 	or	r4,r3,r4
 8004ea4:	11004115 	stw	r4,260(r2)
 8004ea8:	80800117 	ldw	r2,4(r16)
 8004eac:	10c00044 	addi	r3,r2,1
 8004eb0:	10800084 	addi	r2,r2,2
 8004eb4:	1085883a 	add	r2,r2,r2
 8004eb8:	1085883a 	add	r2,r2,r2
 8004ebc:	80c00115 	stw	r3,4(r16)
 8004ec0:	80a1883a 	add	r16,r16,r2
 8004ec4:	84400015 	stw	r17,0(r16)
 8004ec8:	0005883a 	mov	r2,zero
 8004ecc:	dfc00617 	ldw	ra,24(sp)
 8004ed0:	dd400517 	ldw	r21,20(sp)
 8004ed4:	dd000417 	ldw	r20,16(sp)
 8004ed8:	dcc00317 	ldw	r19,12(sp)
 8004edc:	dc800217 	ldw	r18,8(sp)
 8004ee0:	dc400117 	ldw	r17,4(sp)
 8004ee4:	dc000017 	ldw	r16,0(sp)
 8004ee8:	dec00704 	addi	sp,sp,28
 8004eec:	f800283a 	ret

08004ef0 <__call_exitprocs>:
 8004ef0:	defff504 	addi	sp,sp,-44
 8004ef4:	dd000515 	stw	r20,20(sp)
 8004ef8:	05020034 	movhi	r20,2048
 8004efc:	dc800315 	stw	r18,12(sp)
 8004f00:	dfc00a15 	stw	ra,40(sp)
 8004f04:	df000915 	stw	fp,36(sp)
 8004f08:	ddc00815 	stw	r23,32(sp)
 8004f0c:	dd800715 	stw	r22,28(sp)
 8004f10:	dd400615 	stw	r21,24(sp)
 8004f14:	dcc00415 	stw	r19,16(sp)
 8004f18:	dc400215 	stw	r17,8(sp)
 8004f1c:	dc000115 	stw	r16,4(sp)
 8004f20:	d9000015 	stw	r4,0(sp)
 8004f24:	2825883a 	mov	r18,r5
 8004f28:	a5158504 	addi	r20,r20,22036
 8004f2c:	a4400017 	ldw	r17,0(r20)
 8004f30:	8cc00c17 	ldw	r19,48(r17)
 8004f34:	8c400c04 	addi	r17,r17,48
 8004f38:	98004526 	beq	r19,zero,8005050 <__call_exitprocs+0x160>
 8004f3c:	9c000117 	ldw	r16,4(r19)
 8004f40:	00900034 	movhi	r2,16384
 8004f44:	10bfffc4 	addi	r2,r2,-1
 8004f48:	9d402217 	ldw	r21,136(r19)
 8004f4c:	85bfffc4 	addi	r22,r16,-1
 8004f50:	80a1883a 	add	r16,r16,r2
 8004f54:	8421883a 	add	r16,r16,r16
 8004f58:	8421883a 	add	r16,r16,r16
 8004f5c:	ac2f883a 	add	r23,r21,r16
 8004f60:	84000204 	addi	r16,r16,8
 8004f64:	9c21883a 	add	r16,r19,r16
 8004f68:	b0002716 	blt	r22,zero,8005008 <__call_exitprocs+0x118>
 8004f6c:	90000726 	beq	r18,zero,8004f8c <__call_exitprocs+0x9c>
 8004f70:	a800041e 	bne	r21,zero,8004f84 <__call_exitprocs+0x94>
 8004f74:	b5bfffc4 	addi	r22,r22,-1
 8004f78:	bdffff04 	addi	r23,r23,-4
 8004f7c:	843fff04 	addi	r16,r16,-4
 8004f80:	003ff906 	br	8004f68 <__alt_data_end+0xfc004f68>
 8004f84:	b9002017 	ldw	r4,128(r23)
 8004f88:	913ffa1e 	bne	r18,r4,8004f74 <__alt_data_end+0xfc004f74>
 8004f8c:	99000117 	ldw	r4,4(r19)
 8004f90:	82000017 	ldw	r8,0(r16)
 8004f94:	213fffc4 	addi	r4,r4,-1
 8004f98:	b100021e 	bne	r22,r4,8004fa4 <__call_exitprocs+0xb4>
 8004f9c:	9d800115 	stw	r22,4(r19)
 8004fa0:	00000106 	br	8004fa8 <__call_exitprocs+0xb8>
 8004fa4:	80000015 	stw	zero,0(r16)
 8004fa8:	403ff226 	beq	r8,zero,8004f74 <__alt_data_end+0xfc004f74>
 8004fac:	9f000117 	ldw	fp,4(r19)
 8004fb0:	a8000526 	beq	r21,zero,8004fc8 <__call_exitprocs+0xd8>
 8004fb4:	00800044 	movi	r2,1
 8004fb8:	1592983a 	sll	r9,r2,r22
 8004fbc:	a9404017 	ldw	r5,256(r21)
 8004fc0:	494a703a 	and	r5,r9,r5
 8004fc4:	2800021e 	bne	r5,zero,8004fd0 <__call_exitprocs+0xe0>
 8004fc8:	403ee83a 	callr	r8
 8004fcc:	00000906 	br	8004ff4 <__call_exitprocs+0x104>
 8004fd0:	a9004117 	ldw	r4,260(r21)
 8004fd4:	4908703a 	and	r4,r9,r4
 8004fd8:	2000041e 	bne	r4,zero,8004fec <__call_exitprocs+0xfc>
 8004fdc:	b9400017 	ldw	r5,0(r23)
 8004fe0:	d9000017 	ldw	r4,0(sp)
 8004fe4:	403ee83a 	callr	r8
 8004fe8:	00000206 	br	8004ff4 <__call_exitprocs+0x104>
 8004fec:	b9000017 	ldw	r4,0(r23)
 8004ff0:	403ee83a 	callr	r8
 8004ff4:	99000117 	ldw	r4,4(r19)
 8004ff8:	e13fcc1e 	bne	fp,r4,8004f2c <__alt_data_end+0xfc004f2c>
 8004ffc:	89000017 	ldw	r4,0(r17)
 8005000:	993fdc26 	beq	r19,r4,8004f74 <__alt_data_end+0xfc004f74>
 8005004:	003fc906 	br	8004f2c <__alt_data_end+0xfc004f2c>
 8005008:	00800034 	movhi	r2,0
 800500c:	10800004 	addi	r2,r2,0
 8005010:	10000f26 	beq	r2,zero,8005050 <__call_exitprocs+0x160>
 8005014:	99400117 	ldw	r5,4(r19)
 8005018:	99000017 	ldw	r4,0(r19)
 800501c:	2800091e 	bne	r5,zero,8005044 <__call_exitprocs+0x154>
 8005020:	20000826 	beq	r4,zero,8005044 <__call_exitprocs+0x154>
 8005024:	89000015 	stw	r4,0(r17)
 8005028:	a8000226 	beq	r21,zero,8005034 <__call_exitprocs+0x144>
 800502c:	a809883a 	mov	r4,r21
 8005030:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8005034:	9809883a 	mov	r4,r19
 8005038:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800503c:	8cc00017 	ldw	r19,0(r17)
 8005040:	003fbd06 	br	8004f38 <__alt_data_end+0xfc004f38>
 8005044:	9823883a 	mov	r17,r19
 8005048:	2027883a 	mov	r19,r4
 800504c:	003fba06 	br	8004f38 <__alt_data_end+0xfc004f38>
 8005050:	dfc00a17 	ldw	ra,40(sp)
 8005054:	df000917 	ldw	fp,36(sp)
 8005058:	ddc00817 	ldw	r23,32(sp)
 800505c:	dd800717 	ldw	r22,28(sp)
 8005060:	dd400617 	ldw	r21,24(sp)
 8005064:	dd000517 	ldw	r20,20(sp)
 8005068:	dcc00417 	ldw	r19,16(sp)
 800506c:	dc800317 	ldw	r18,12(sp)
 8005070:	dc400217 	ldw	r17,8(sp)
 8005074:	dc000117 	ldw	r16,4(sp)
 8005078:	dec00b04 	addi	sp,sp,44
 800507c:	f800283a 	ret

08005080 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8005080:	defffd04 	addi	sp,sp,-12
 8005084:	df000215 	stw	fp,8(sp)
 8005088:	df000204 	addi	fp,sp,8
 800508c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8005090:	0001883a 	nop
 8005094:	e0bfff17 	ldw	r2,-4(fp)
 8005098:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800509c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80050a0:	10000226 	beq	r2,zero,80050ac <_exit+0x2c>
    ALT_SIM_FAIL();
 80050a4:	002af070 	cmpltui	zero,zero,43969
 80050a8:	00000106 	br	80050b0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80050ac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80050b0:	003fff06 	br	80050b0 <__alt_data_end+0xfc0050b0>
